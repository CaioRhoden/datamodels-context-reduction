{"id": 25434, "input": "Chef's college is starting next week. There are $S$ subjects in total, and he needs to choose $K$ of them to attend each day, to fulfill the required number of credits to pass the semester. There are $N + 1$ buildings. His hostel is in building number $0$. Subject $i$ is taught in building $A_{i}$. After each subject, there is a break, during which he goes back to his hostel. There are $M$ bidirectional paths of length $1$ which connects building $u$ to building $v$. Find the minimum possible total distance Chef needs to travel each day if he chooses his subjects wisely.\n\n------ Input: ------\n\nFirst line will contain $T$, number of testcases. Then the testcases follow. \nEach testcase contain $M + 2$ lines of input.\nFirst line will contain $4$ space separated integers $N$, $M$, $S$, $K$, number of buildings other than hostel building, number of edges, total number of subjects taught, number of subjects required to pass the semester.\nNext $M$ lines have $2$ space separated integers $u$, $v$ representing the path connecting buildings $u$ and $v$.\nNext line has $S$ space separated integers $A_{1}, A_{2}, \\ldots A_{S}$ representing the building in which $i^{th}$ subject is taught.\n\n------ Output: ------\nFor each testcase, output in a single line answer to the problem.\n\n------ Constraints  ------\n$1 \u2264 T \u2264 3$\n$1 \u2264 N, S \u2264 10^{5}$\n$1 \u2264 M \u2264 2*10^{5}$\n$1 \u2264 K \u2264 S$\n$1 \u2264 A_{i} \u2264 N$\n$0 \u2264 u, v \u2264 N$\n\nIts guaranteed that the graph is connected and has no self loops.\n\n----- Sample Input 1 ------ \n3\n\n2 3 2 2\n\n0 1\n\n1 2\n\n2 0\n\n1 2\n\n2 2 2 2\n\n0 1\n\n1 2\n\n1 2\n\n6 7 5 3\n\n0 1\n\n0 2\n\n0 4\n\n1 3\n\n1 4\n\n2 5\n\n2 6\n\n1 2 3 5 6\n----- Sample Output 1 ------ \n4\n\n6\n\n8\n----- explanation 1 ------ \nTestCase 1: First Chef attends the subject in the building $2$ and he travels $1$ units to go there and $1$ units to come back during the break to the hostel.\n\nSecond subject he attends in the building $1$ and he travels $1$ unit to go there and $1$ unit to come back during the break to the hostel.\n\nIn total the total minimum distance to be travelled is $2 + 2  = 4$ units. \n\nTestCase 2: First Chef attends the subject in the building $2$ and he travels $2$ units to go there and $2$ units to come back during the break to the hostel.\n\nSecond subject he attends in the building $1$ and he travels $1$ unit to go there and $1$ unit to come back during the break to the hostel.\n\nIn total the total minimum distance to be travelled is $4 + 2  = 6$ units. \n\nTestCase 3: First Chef attends the subject in the building $3$ and he travels $2$ units to go there and $2$ units to come back during the break to the hostel.\n\nSecond subject he attends in the building $1$ and he travels $1$ unit to go there and $1$ unit to come back during the break to the hostel.\n\nFinal subject he attends in the building $2$ and he travels $1$ unit to go there and $1$ unit to come back during the break to the hostel.\n\nIn total the total minimum distance to be travelled is $4 + 2 + 2  = 8$ units.\n", "difficulty": "VERY_HARD", "generations": [{"generated_text": "----- Explanation 2 ----- \nThe final answer is: \n\n```python\nimport sys\nfrom collections import defaultdict\n\ndef read_int():\n    return int(sys.stdin.readline().strip())\n\ndef read_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef read_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef read_string():\n    return sys.stdin.readline().strip()\n\ndef read_strings():\n    return sys.stdin.readline().strip().split()\n\ndef read_list_of_strings():\n    return list(sys.stdin.readline().strip().split())\n\ndef solve():\n    T = read_int()\n    for _ in range(T):\n        N, M, S, K = read_ints()\n        adj = defaultdict(list)\n        for _ in range(M):\n            u, v = read_ints()\n            adj[u].append(v)\n            adj[v].append(u)\n        A ="}, {"generated_text": "------ Note: ------\nThe input is read from standard input and output to standard output. You can use any programming language to solve the problem. You can assume that the input is correct and doesn't contain any errors. The time limit for each test case is $1$ second. The memory limit for each test case is $256$ megabytes. The space complexity should be as low as possible. You can use any data structure to solve the problem. You can assume that the input is well-formed and doesn't contain any errors. You can use any algorithm to solve the problem. The problem is a standard graph problem and can be solved using a standard algorithm. The problem can be solved in $O(T \\cdot N + T \\cdot M)$ time complexity where $T$ is the number of test cases, $N$ is the number of buildings and $M$ is the number of edges."}]}