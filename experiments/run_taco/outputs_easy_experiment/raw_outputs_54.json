{"id": 54, "input": "Alice is a big fan of volleyball and especially of the very strong \"Team A\".\n\nVolleyball match consists of up to five sets. During each set teams score one point for winning a ball. The first four sets are played until one of the teams scores at least 25 points and the fifth set is played until one of the teams scores at least 15 points. Moreover, if one of the teams scores 25 (or 15 in the fifth set) points while the other team scores 24 (or 14 in the fifth set), the set is played until the absolute difference between teams' points becomes two. The match ends when one of the teams wins three sets. The match score is the number of sets won by each team.\n\nAlice found a book containing all the results of all matches played by \"Team A\". The book is old, and some parts of the book became unreadable. Alice can not read the information on how many sets each of the teams won, she can not read the information on how many points each of the teams scored in each set, she even does not know the number of sets played in a match. The only information she has is the total number of points scored by each of the teams in all the sets during a single match.\n\nAlice wonders what is the best match score \"Team A\" could achieve in each of the matches. The bigger is the difference between the number of sets won by \"Team A\" and their opponent, the better is the match score. Find the best match score or conclude that no match could end like that. If there is a solution, then find any possible score for each set that results in the best match score.\n\nInput\n\nThe first line contains a single integer m (1 \u2264 m \u2264 50 000) \u2014 the number of matches found by Alice in the book.\n\nEach of the next m lines contains two integers a and b (0 \u2264 a, b \u2264 200) \u2014 the number of points scored by \"Team A\" and the number of points scored by their opponents respectively.\n\nOutput\n\nOutput the solution for every match in the same order as they are given in the input. If the teams could not score a and b points respectively, output \"Impossible\".\n\nOtherwise, output the match score formatted as \"x:y\", where x is the number of sets won by \"Team A\" and y is the number of sets won by their opponent. \n\nThe next line should contain the set scores in the order they were played. Each set score should be printed in the same format as the match score, with x being the number of points scored by \"Team A\" in this set, and y being the number of points scored by their opponent.\n\nExample\n\nInput\n\n\n6\n75 0\n90 90\n20 0\n0 75\n78 50\n80 100\n\n\nOutput\n\n\n3:0\n25:0 25:0 25:0\n3:1\n25:22 25:22 15:25 25:21\nImpossible\n0:3\n0:25 0:25 0:25\n3:0\n25:11 28:26 25:13\n3:2\n25:17 0:25 25:22 15:25 15:11\n", "difficulty": "HARD", "generations": [{"generated_text": "Here is a Python program that solves the problem:\n\n```python\ndef is_valid_score(a, b):\n    \"\"\"Check if score a and b is valid.\"\"\"\n    if a < 15 or b < 15:\n        return False\n    if a < 25 and abs(a - b)!= 1:\n        return False\n    return True\n\ndef find_sets(a, b):\n    \"\"\"Find the sets won by each team.\"\"\"\n    sets_a = 0\n    sets_b = 0\n    sets = []\n    for i in range(1, 6):\n        if a >= 25:\n            sets_a += 1\n            a -= 25\n        elif b >= 25:\n            sets_b += 1\n            b -= 25\n        else:\n            if i == 5:\n                if a >= 15:\n                    sets_a += 1\n                    a -= 15\n                elif b >= 15:\n                    sets_b += 1\n                    b -= 15\n            else:\n                if a > b:\n                    sets_a += 1\n                    a -= (b + 1)\n                else:\n                    sets_b += 1\n                    b -= (a + 1)\n            sets.append((a, b))\n    return sets_a, sets_b, sets\n\ndef find_best_score(a, b):\n    \"\"\"Find the best match score.\"\"\"\n    if not is_valid_score(a, b):\n        return \"Impossible\", None\n    sets_a, sets_b, sets = find_sets(a, b)\n    if sets_a > sets_b:\n        return f\"{sets_a}:{sets_b}\", sets\n    elif sets_b > sets_a:\n        return f\"{sets_b}:{sets_a}\", [(y, x) for x, y in sets]\n    else:\n        return f\"{sets_a}:{sets_b}\", sets\n\ndef main():\n    m = int(input())\n    for _ in range(m):\n        a, b = map(int, input().split())\n        best_score, sets = find_best_score(a, b)\n        print(best_score)\n        if sets:\n            print(\" \".join([f\"{x}:{y}\" for x, y in sets]))\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis program first checks if the score is valid. If it is not, it returns \"Impossible\". Otherwise, it finds the sets won by each team and returns the best match score and the sets won by each team. If the teams won the same number of sets, it returns the sets in reverse order."}, {"generated_text": "Here's a Python program to solve the problem:\n\n```python\ndef find_match_score(a, b):\n    # Find the number of sets won by Team A\n    possible_wins = []\n    for i in range(1, min(5, a//25 + 1)):\n        for j in range(1, min(5, b//25 + 1)):\n            if i + j == 5:\n                continue\n            score_A = a\n            score_B = b\n            sets_won_by_A = 0\n            sets_won_by_B = 0\n            for k in range(1, 6):\n                if k <= 4:\n                    if score_A >= 25 and score_B < 25 or score_A >= 24 and score_B < 23:\n                        score_A -= 25\n                        score_B -= 24\n                        sets_won_by_A += 1\n                    elif score_B >= 25 and score_A < 25 or score_B >= 24 and score_A < 23:\n                        score_A -= 24\n                        score_B -= 25\n                        sets_won_by_B += 1\n                    else:\n                        if score_A >= 25:\n                            score_A -= 25\n                            sets_won_by_A += 1\n                        elif score_B >= 25:\n                            score_B -= 25\n                            sets_won_by_B += 1\n                        else:\n                            if score_A >= 24 and score_B < 23:\n                                score_A -= 24\n                                sets_won_by_A += 1\n                            elif score_B >= 24 and score_A < 23:\n                                score_B -= 24\n                                sets_won_by_B += 1\n                            else:\n                                if score_A < score_B:\n                                    score_A -= 23\n                                    score_B -= 24\n                                else:\n                                    score_A -= 24\n                                    score_B -= 23\n                else:\n                    if score_A >= 15 and score_B < 15 or score_A >= 14 and score_B < 14:\n                        score_A -= 15\n                        score_B -= 14\n                        sets_won_by_A += 1\n                    elif score_B >= 15 and score_A < 15 or score_B >= 14 and score_A < 14:\n                        score_A -= 14\n                        score_B -= 15\n                        sets_won_by_B += 1\n                    else:\n                        if score_A >= 15:\n                            score_A -= 15\n                            sets_won_by_A += 1\n                        elif score_B >= 15:\n                            score_B -= 15\n                            sets_won_by_B += 1\n                        else:\n                            if score_A < score_B:\n                                score_A -= 14\n                                score_B -= 15\n                            else:\n                                score_A -= 15\n                                score_B -= 14\n            if sets_won_by_A > sets_won_by_B and sets_won_by_A - sets_won_by_B > max(possible_wins):\n                possible_wins = [sets_won_by_A - sets_won_by_B]\n            elif sets_won_by_A > sets_won_by_B and sets_won_by_A - sets_won_by_B == max(possible_wins):\n                possible_wins.append(sets_won_by_A - sets_won_by_B)\n    if possible_wins:\n        max_diff = max(possible_wins)\n        for win in possible_wins:\n            if win == max_diff:\n                return max_diff, win, get_set_scores(a, b)\n    return \"Impossible\"\n\ndef get_set_scores(a, b):\n    sets = []\n    score_A = a\n    score_B = b\n    for k in range(1, 6):\n        if k <= 4:\n            if score_A >= 25 and score_B < 25 or score_A >= 24 and score_B < 23:\n                sets.append(\"25:0\")\n                score_A -= 25\n                score_B -= 24\n            elif score_B >= 25 and score_A < 25 or score_B >= 24 and score_A < 23:\n                sets.append(\"0:25\")\n                score_A -= 24\n                score_B -= 25\n            else:\n                if score_A >= 25:\n                    sets.append(\"25:0\")\n                    score_A -= 25\n                elif score_B >= 25:\n                    sets.append(\"0:25\")\n                    score_B -= 25\n                else:\n                    if score_A >= 24 and score_B < 23:\n                        sets.append(\"24:23\")\n                        score_A -= 24\n                    elif score_B >= 24 and score_A < 23:\n                        sets.append(\"23:24\")\n                        score_B -= 24\n                    else:\n                        if score_A < score_B:\n                            sets.append(\"23:24\")\n                            score_A -= 23\n                            score_B -= 24\n                        else:\n                            sets.append(\"24:23\")\n                            score_A -= 24\n                            score_B -= 23\n        else:\n            if score_A >= 15 and score_B < 15 or score_A >= 14 and score_B < 14:\n                sets.append(\"15:0\")\n                score_A -= 15\n                score_B -= 14\n            elif score_B >= 15 and score_A < 15 or score_B >= 14 and score_A < 14:\n                sets.append(\"0:15\")\n                score_A -= 14\n                score_B -= 15\n            else:\n                if score_A >= 15:\n                    sets.append(\"15:0\")\n                    score_A -= 15\n                elif score_B >= 15:\n                    sets.append(\"0:15\")\n                    score_B -= 15\n                else:\n                    if score_A < score_B:\n                        sets.append(\"14:15\")\n                        score_A -= 14\n                        score_B -= 15\n                    else:\n                        sets.append(\"15:14\")\n                        score_A -= 15\n                        score_B -= 14\n    return \" \".join(sets)\n\ndef main():\n    m = int(input())\n    for _ in range(m):\n        a, b = map(int, input().split())\n        print(find_match_score(a, b))\n\nif __name__ =="}, {"generated_text": "Here is a Python program that solves the problem.\n\n```python\ndef check_match(a, b):\n    # Check if the match can end with a score of a:b\n    if a < b:\n        return \"Impossible\"\n\n    # Calculate the minimum and maximum possible number of sets\n    min_sets = max(3, (b + 3) // 5)\n    max_sets = min(5, (a + 4) // 5)\n\n    # Check if it's possible for \"Team A\" to win at least min_sets sets\n    for sets_won_by_a in range(min_sets, max_sets + 1):\n        sets_won_by_b = max_sets - sets_won_by_a\n        if a >= sets_won_by_a * 25 + sets_won_by_b * 25 and \\\n           a <= sets_won_by_a * 25 + (sets_won_by_b - 1) * 25 + 2 and \\\n           b >= sets_won_by_b * 25 + sets_won_by_a * 25 and \\\n           b <= sets_won_by_b * 25 + (sets_won_by_a - 1) * 25 + 2:\n            if sets_won_by_a!= sets_won_by_b:\n                return f\"{sets_won_by_a}:{sets_won_by_b}\"\n            else:\n                # If the sets are tied, we need to check the fifth set\n                if max_sets == 5:\n                    if a >= 15 and a <= 17 and b >= 8 and b <= 10:\n                        return f\"{sets_won_by_a}:{sets_won_by_b}\"\n                    else:\n                        return \"Impossible\"\n\n    # If no solution is found, return \"Impossible\"\n    return \"Impossible\"\n\n\ndef get_set_scores(a, b):\n    # Get the set scores for the match\n    scores = []\n    sets_won_by_a = 0\n    sets_won_by_b = 0\n    for i in range(5):\n        if i < 4:\n            if a >= 25 and a <= 27 and b >= 24 and b <= 26:\n                scores.append(\"25:24\")\n                sets_won_by_a += 1\n            elif a >= 24 and a <= 26 and b >= 23 and b <= 25:\n                scores.append(\"25:24\")\n                sets_won_by_b += 1\n            elif a >= 24 and a <= 26 and b >= 23 and b <= 25:\n                # If the teams are tied, we need to simulate the set\n                if a > b:\n                    scores.append(\"25:24\")\n                    sets_won_by_a += 1\n                else:\n                    scores.append(\"24:25\")\n                    sets_won_by_b += 1\n            elif a >= 25 and a <= 27 and b >= 24 and b <= 26:\n                scores.append(\"25:24\")\n                sets_won_by_a += 1\n            elif a >= 25 and a <= 27 and b >= 24 and b <= 26:\n                scores.append(\"24:25\")\n                sets_won_by_b += 1\n            else:\n                return \"Impossible\"\n        else:\n            if a >= 15 and a <= 17 and b >= 8 and b <= 10:\n                scores.append(\"15:8\")\n                sets_won_by_a += 1\n            elif a >= 8 and a <= 10 and b >= 15 and b <= 17:\n                scores.append(\"8:15\")\n                sets_won_by_b += 1\n            elif a >= 8 and a <= 10 and b >= 14 and b <= 16:\n                # If the teams are tied, we need to simulate the set\n                if a > b:\n                    scores.append(\"15:8\")\n                    sets_won_by_a += 1\n                else:\n                    scores.append(\"14:15\")\n                    sets_won_by_b += 1\n            elif a >= 14 and a <= 16 and b >= 8 and b <= 10:\n                scores.append(\"14:8\")\n                sets_won_by_a += 1\n            elif a >= 14 and a <= 16 and b >= 8 and b <= 10:\n                scores.append(\"8:14\")\n                sets_won_by_b += 1\n            else:\n                return \"Impossible\"\n    if sets_won_by_a!= sets_won_by_b:\n        return scores\n    else:\n        # If the sets are tied, we need to simulate the fifth set\n        if a > b:\n            scores.append(\"15:8\")\n            sets_won_by_a += 1\n        else:\n            scores.append(\"8:15\")\n            sets_won_by_b += 1\n        return scores\n\n\ndef main():\n    m = int(input())\n    for _ in range(m):\n        a, b = map(int, input().split())\n        result = check_match(a, b)\n        if result == \"Impossible\":\n            print(result)\n        else:\n            match_score = result.split(\":\")\n            scores = get_set_scores(a, b)\n            if scores == \"Impossible\":\n                print(result)\n            else:\n                print(f\"{match_score[0]}:{match_score[1]}\")\n                print(\" \".join(scores))\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis program first checks if the match can end with a score of a:b. If it can, it calculates the minimum and maximum possible number of sets and checks if it's possible for \"Team A\" to win at least min_sets sets. If it is, it returns the match score.\n\nIf the sets are tied, it needs to simulate the fifth set. If the teams are tied in the fifth set, it also needs to simulate the set.\n\nIf no solution is found, it returns \"Impossible\".\n\nThe get_set_scores function simulates the sets and returns the set scores.\n\nThe main function reads the input and calls the check_match and get_set_scores functions for each match."}, {"generated_text": "Here is a Python program that solves the problem:\n\n```python\ndef find_sets_scored(a, b):\n    sets_won_by_a = 0\n    sets_won_by_b = 0\n    sets_scored = 0\n    for i in range(5):\n        if a >= 25 and b >= 25:\n            if abs(a - b) > 1:\n                a -= 2\n                b -= 2\n                sets_scored += 1\n            else:\n                if a > b:\n                    sets_won_by_a += 1\n                else:\n                    sets_won_by_b += 1\n                sets_scored += 1\n        elif a >= 15 and b >= 15 and i == 4:\n            if abs(a - b) > 1:\n                a -= 2\n                b -= 2\n                sets_scored += 1\n            else:\n                if a > b:\n                    sets_won_by_a += 1\n                else:\n                    sets_won_by_b += 1\n                sets_scored += 1\n        elif a >= 25:\n            sets_won_by_a += 1\n            sets_scored += 1\n        elif b >= 25:\n            sets_won_by_b += 1\n            sets_scored += 1\n        else:\n            if a > b:\n                sets_won_by_a += 1\n            else:\n                sets_won_by_b += 1\n            sets_scored += 1\n        if sets_won_by_a >= 3 or sets_won_by_b >= 3:\n            break\n        a -= 1\n        b -= 1\n    if sets_won_by_a >= 3 or sets_won_by_b >= 3:\n        return sets_won_by_a, sets_won_by_b, sets_scored\n    return None\n\ndef find_match_score(a, b):\n    possible_scores = []\n    sets_scored = find_sets_scored(a, b)\n    if sets_scored is None:\n        return \"Impossible\"\n    for i in range(sets_scored):\n        for j in range(25, -1, -1):\n            for k in range(25, -1, -1):\n                if j + k == a and i!= 0 or j + k == b and i!= 0:\n                    continue\n                if j + k > 24 and i == 0:\n                    continue\n                if k + 15 == b and i == 4:\n                    continue\n                if j + k > 14 and i == 4:\n                    continue\n                a_copy = a\n                b_copy = b\n                sets_won_by_a = 0\n                sets_won_by_b = 0\n                sets = []\n                for t in range(5):\n                    if a_copy >= 25 and b_copy >= 25:\n                        if abs(a_copy - b_copy) > 1:\n                            a_copy -= 2\n                            b_copy -= 2\n                            sets.append(f\"{j}:{k}\")\n                        else:\n                            if a_copy > b_copy:\n                                sets_won_by_a += 1\n                            else:\n                                sets_won_by_b += 1\n                            sets.append(f\"{j}:{k}\")\n                    elif a_copy >= 15 and b_copy >= 15 and t == 4:\n                        if abs(a_copy - b_copy) > 1:\n                            a_copy -= 2\n                            b_copy -= 2\n                            sets.append(f\"{j}:{k}\")\n                        else:\n                            if a_copy > b_copy:\n                                sets_won_by_a += 1\n                            else:\n                                sets_won_by_b += 1\n                            sets.append(f\"{j}:{k}\")\n                    elif a_copy >= 25:\n                        sets_won_by_a += 1\n                        sets.append(f\"{j}:{k}\")\n                    elif b_copy >= 25:\n                        sets_won_by_b += 1\n                        sets.append(f\"{j}:{k}\")\n                    else:\n                        if a_copy > b_copy:\n                            sets_won_by_a += 1\n                        else:\n                            sets_won_by_b += 1\n                        sets.append(f\"{j}:{k}\")\n                    if sets_won_by_a >= 3 or sets_won_by_b >= 3:\n                        break\n                    a_copy -= 1\n                    b_copy -= 1\n                if sets_won_by_a >= 3 or sets_won_by_b >= 3:\n                    possible_scores.append((sets_won_by_a, sets_won_by_b, sets))\n    max_difference = -float('inf')\n    best_match_score = None\n    for score in possible_scores:\n        difference = abs(score[0] - score[1])\n        if difference > max_difference:\n            max_difference = difference\n            best_match_score = score\n    if best_match_score is None:\n        return \"Impossible\"\n    return f\"{best_match_score[0]}:{best_match_score[1]}\\n{' '.join([set_score for set_score in best_match_score[2]])}\"\n\ndef main():\n    m = int(input())\n    for _ in range(m):\n        a, b = map(int, input().split())\n        print(find_match_score(a, b))\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis program first defines a helper function `find_sets_scored` that calculates the number of sets won by each team given the total points scored by each team. Then it defines the main function `find_match_score` that tries all possible scores for each set and finds the match score with the maximum difference between the number of sets won by each team. The `main` function reads the input and calls `find_match_score` for each match."}, {"generated_text": "Here is the Python program to solve the problem.\n\n```python\ndef is_possible(a, b):\n    if a < 25 and b < 25:\n        return False\n    if a == 25 and b == 24:\n        return False\n    if a == 24 and b == 25:\n        return False\n    if a >= 25 and b >= 25:\n        diff = abs(a - b)\n        if diff > 1:\n            return False\n    if a >= 15 and b >= 15:\n        diff = abs(a - b)\n        if diff > 1:\n            return False\n    return True\n\ndef find_sets(a, b):\n    sets_a = []\n    sets_b = []\n    if a < b:\n        return \"Impossible\"\n    if a == 0:\n        return \"0:3\"\n    if b == 0:\n        return \"3:0\"\n    if a == 25 and b == 0:\n        return \"3:0\"\n    if a == 0 and b == 25:\n        return \"0:3\"\n    if a >= 25 and b >= 25:\n        diff = abs(a - b)\n        if diff == 1:\n            return \"2:2\"\n        sets_a.append((25, 24))\n        sets_b.append((24, 25))\n        return find_sets(a - 49, b - 49)\n    if a >= 15 and b >= 15:\n        diff = abs(a - b)\n        if diff == 1:\n            return \"2:2\"\n        sets_a.append((25, 24))\n        sets_b.append((24, 25))\n        return find_sets(a - 49, b - 49)\n    if a >= 25:\n        sets_a.append((25, 0))\n        return find_sets(a - 25, b)\n    if b >= 25:\n        sets_b.append((0, 25))\n        return find_sets(a, b - 25)\n\ndef main():\n    n = int(input())\n    for _ in range(n):\n        a, b = map(int, input().split())\n        if not is_possible(a, b):\n            print(\"Impossible\")\n            continue\n        match_score = find_sets(a, b)\n        print(match_score)\n        sets = match_score.split(\":\")\n        sets_a = []\n        sets_b = []\n        if sets[0] == \"2\":\n            for i in range(4):\n                sets_a.append((25, 24))\n                sets_b.append((24, 25))\n            match_score = \"2:2\"\n        else:\n            for i in range(int(sets[0])):\n                sets_a.append((25, 0))\n                sets_b.append((0, 25))\n            for i in range(int(sets[1])):\n                sets_a.append((0, 25))\n                sets_b.append((25, 0))\n            if match_score == \"2:2\":\n                for i in range(4):\n                    sets_a.append((25, 24))\n                    sets_b.append((24, 25))\n            elif match_score == \"3:0\":\n                for i in range(3):\n                    sets_a.append((25, 0))\n                    sets_b.append((0, 25))\n            elif match_score == \"0:3\":\n                for i in range(3):\n                    sets_b.append((25, 0))\n                    sets_a.append((0, 25))\n            elif match_score == \"3:1\":\n                for i in range(3):\n                    sets_a.append((25, 0))\n                    sets_b.append((0, 25))\n                sets_a.append((25, 24))\n                sets_b.append((24, 25))\n            elif match_score == \"1:3\":\n                for i in range(3):\n                    sets_b.append((25, 0))\n                    sets_a.append((0, 25))\n                sets_b.append((24, 25))\n                sets_a.append((25, 24))\n            elif match_score == \"3:2\":\n                for i in range(3):\n                    sets_a.append((25, 0))\n                    sets_b.append((0, 25))\n                sets_a.append((25, 24))\n                sets_b.append((24, 25))\n                sets_a.append((25, 24))\n                sets_b.append((24, 25))\n            elif match_score == \"2:3\":\n                for i in range(3):\n                    sets_b.append((25, 0))\n                    sets_a.append((0, 25))\n                sets_b.append((24, 25))\n                sets_a.append((25, 24))\n                sets_b.append((24, 25))\n                sets_a.append((25, 24))\n                sets_b.append((24, 25))\n        for i in range(len(sets_a)):\n            print(f\"{sets_a[i][0]}:{sets_a[i][1]}\")\n        for i in range(len(sets_b)):\n            print(f\"{sets_b[i][0]}:{sets_b[i][1]}\")\n\nif __name__ == \"__main__\":\n    main()\n```\nThis program first checks if it's possible to achieve the given match score. If it's not possible, it prints \"Impossible\". Otherwise, it finds the sets that resulted in the match score and prints them."}, {"generated_text": "Here is a Python program to solve the problem:\n\n```python\ndef possible_score(a, b):\n    \"\"\"Check if it's possible to score a and b points respectively.\"\"\"\n    if a == 0 or b == 0:\n        return False\n    for sets in range(1, 6):\n        for team_a in range(25, a + 1):\n            if team_a >= 25 and abs(team_a - (a - team_a)) == 1:\n                continue\n            for team_b in range(25, b + 1):\n                if team_b >= 25 and abs(team_b - (b - team_b)) == 1:\n                    continue\n                if team_a + team_b == a + b and check_score(sets, team_a, team_b):\n                    return True\n    return False\n\ndef check_score(sets, team_a, team_b):\n    \"\"\"Check if the score is valid for the given number of sets.\"\"\"\n    for i in range(sets):\n        if team_a < 25 and team_b < 25:\n            if team_a < team_b and team_b - team_a!= 1:\n                return False\n            if team_b < team_a and team_a - team_b!= 1:\n                return False\n    return True\n\ndef get_sets_won(a, b):\n    \"\"\"Get the sets won by each team.\"\"\"\n    sets_won_a = 0\n    sets_won_b = 0\n    for i in range(1, 6):\n        if possible_score(a, b):\n            team_a, team_b = 0, 0\n            for j in range(i):\n                while True:\n                    score = input(\"Enter the score for set {}: \".format(j + 1))\n                    team_a, team_b = map(int, score.split(':'))\n                    if team_a + team_b == a + b and check_score(i, team_a, team_b):\n                        break\n            if team_a > team_b:\n                sets_won_a += 1\n            else:\n                sets_won_b += 1\n        else:\n            return \"Impossible\"\n    if sets_won_a > sets_won_b:\n        return \"{}:{}\".format(sets_won_a, sets_won_b)\n    elif sets_won_a < sets_wwon_b:\n        return \"{}:{}\".format(sets_won_a, sets_won_b)\n    else:\n        return \"1:1\"\n\ndef main():\n    m = int(input())\n    for _ in range(m):\n        a, b = map(int, input().split())\n        print(get_sets_won(a, b))\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis program first checks if it's possible to score a and b points respectively. If it's possible, it checks all possible combinations of scores for the sets and returns the sets won by each team. If it's not possible, it returns \"Impossible\"."}, {"generated_text": "Here is a Python program that solves the problem:\n\n```python\ndef is_valid_score(a, b):\n    if a == b:\n        return False\n    if a > b and a - b >= 2:\n        return True\n    if a < b and b - a >= 2:\n        return True\n    return False\n\ndef calculate_sets_score(a, b):\n    sets_won_by_a = 0\n    sets_won_by_b = 0\n    sets = []\n    a_points = 0\n    b_points = 0\n    for i in range(1, 6):\n        if i < 5:\n            max_points = 25\n        else:\n            max_points = 15\n        while True:\n            if a_points >= max_points and b_points < max_points - 2:\n                sets_won_by_a += 1\n                a_points = max_points\n                b_points = max_points - 2\n                sets.append(f'{max_points}:{max_points - 2}')\n                break\n            elif a_points < max_points and b_points >= max_points and b_points - a_points >= 2:\n                sets_won_by_b += 1\n                a_points = max_points - 2\n                b_points = max_points\n                sets.append(f'{max_points - 2}:{max_points}')\n                break\n            elif a_points < max_points and b_points < max_points:\n                if a == a_points + 1 and b == b_points + 1:\n                    a_points += 1\n                    b_points += 1\n                    sets.append(f'{a_points}:{b_points}')\n                elif a > a_points and a - a_points >= 2 and b < b_points:\n                    a_points += 2\n                    sets.append(f'{a_points}:{b_points}')\n                    b_points += 1\n                    sets.append(f'{a_points - 2}:{b_points + 1}')\n                elif a < a_points and a_points - a >= 2 and b > b_points:\n                    a_points += 1\n                    sets.append(f'{a_points}:{b_points + 1}')\n                    b_points += 2\n                    sets.append(f'{a_points - 1}:{b_points}')\n                else:\n                    return 'Impossible'\n    if sets_won_by_a + sets_won_by_b >= 3:\n        return f'{sets_won_by_a}:{sets_won_by_b}'\n    else:\n        return 'Impossible'\n\ndef main():\n    m = int(input())\n    for _ in range(m):\n        a, b = map(int, input().split())\n        if is_valid_score(a, b):\n            print(calculate_sets_score(a, b))\n        else:\n            print('Impossible')\n\nif __name__ == '__main__':\n    main()\n```\n\nThis program works by first checking if the score is valid, then it tries to calculate the sets score by simulating the sets. It keeps track of the points scored by both teams and the sets won by each team. If it finds a valid sets score, it prints it, otherwise it prints 'Impossible'."}, {"generated_text": "Here is a Python program that will solve the problem:\n\n```python\ndef possible(a, b):\n    if a == b:\n        return False\n    return True\n\ndef find_score(a, b):\n    for i in range(5):\n        for j in range(5):\n            if i + j == 5:\n                if a >= 25 * i and a <= 25 * i + 1 and b >= 25 * j and b <= 25 * j + 1:\n                    return [i, j]\n                if a >= 15 * i and a <= 15 * i + 1 and b >= 15 * j and b <= 15 * j + 1:\n                    return [i, j]\n    return None\n\ndef find_sets(a, b, score):\n    sets = []\n    i = 0\n    while a >= 25 * score[0] and i < 4:\n        if a == 25 * score[0]:\n            sets.append([25, 24])\n        else:\n            diff = abs(a - b)\n            if diff == 1:\n                if a > b:\n                    sets.append([25, 24])\n                else:\n                    sets.append([24, 25])\n            elif diff > 1:\n                sets.append([a - diff // 2, b + diff // 2])\n            a -= sets[-1][0]\n            b -= sets[-1][1]\n        i += 1\n    i = 0\n    while a >= 15 * score[1] and i < 4:\n        if a == 15 * score[1]:\n            sets.append([15, 14])\n        else:\n            diff = abs(a - b)\n            if diff == 1:\n                if a > b:\n                    sets.append([15, 14])\n                else:\n                    sets.append([14, 15])\n            elif diff > 1:\n                sets.append([a - diff // 2, b + diff // 2])\n            a -= sets[-1][0]\n            b -= sets[-1][1]\n        i += 1\n    if a > b:\n        sets.append([a, b])\n    else:\n        sets.append([b, a])\n    return sets\n\nfor _ in range(int(input())):\n    a, b = map(int, input().split())\n    if a > b:\n        max_score = 3\n        min_score = 0\n    else:\n        max_score = 0\n        min_score = 3\n    score = find_score(a, b)\n    if score is None:\n        print('Impossible')\n    else:\n        print(max_score, min_score)\n        sets = find_sets(a, b, score)\n        for s in sets:\n            print(*s, end=' ')\n        print()\n```\n\nThis program will take the number of matches as input, then for each match, it will take the total points scored by each team as input. It will then determine the best possible match score for each match, and if it is possible, it will print out the score and the set scores for each match. If it is not possible, it will print 'Impossible'."}, {"generated_text": "Here is a Python program that solves the problem:\n\n```python\ndef find_sets(a, b):\n    \"\"\"\n    Find the number of sets that can be played and the scores for each set.\n\n    Parameters:\n    a (int): The total number of points scored by \"Team A\".\n    b (int): The total number of points scored by their opponent.\n\n    Returns:\n    tuple: A tuple containing the number of sets won by \"Team A\" and their opponent,\n           and a list of lists containing the scores for each set.\n    \"\"\"\n    # Initialize variables to store the number of sets won by each team\n    team_a_sets = 0\n    team_b_sets = 0\n\n    # Initialize a list to store the scores for each set\n    set_scores = []\n\n    # Calculate the maximum number of sets that can be played\n    max_sets = min(5, (a + b + 3) // 5)\n\n    # Iterate over the possible number of sets\n    for sets in range(max_sets, 0, -1):\n        # Calculate the maximum number of points that can be scored in the current set\n        max_set_points = min(25, 15 if sets == max_sets else 25)\n\n        # Calculate the minimum number of points that can be scored in the current set\n        min_set_points = max(2, 2 if sets == max_sets else 14)\n\n        # Check if the current set can be played\n        if a >= min_set_points and b >= min_set_points and (a - min_set_points) % 2 == 0 and (b - min_set_points) % 2 == 0:\n            # Calculate the number of points scored by \"Team A\" in the current set\n            team_a_points = min(a, max_set_points)\n\n            # Calculate the number of points scored by their opponent in the current set\n            team_b_points = max(b - (team_a_points - min_set_points), min_set_points)\n\n            # Check if the current set is the last set\n            if sets == 1:\n                # If the current set is the last set, check if \"Team A\" wins\n                if team_a_points > team_b_points:\n                    team_a_sets += 1\n                else:\n                    team_b_sets += 1\n            else:\n                # If the current set is not the last set, add the scores to the list\n                set_scores.append([team_a_points, team_b_points])\n\n                # Update the total number of points scored by each team\n                a -= team_a_points\n                b -= team_b_points\n\n    # Return the number of sets won by each team and the scores for each set\n    return team_a_sets, team_b_sets, set_scores\n\n\ndef main():\n    # Read the number of matches\n    m = int(input())\n\n    # Iterate over the matches\n    for _ in range(m):\n        # Read the total number of points scored by each team\n        a, b = map(int, input().split())\n\n        # Find the number of sets that can be played and the scores for each set\n        team_a_sets, team_b_sets, set_scores = find_sets(a, b)\n\n        # Check if the match can end\n        if team_a_sets + team_b_sets!= 0 and (team_a_sets - team_b_sets) * 2!= abs(team_a_sets - team_b_sets):\n            print(\"Impossible\")\n        else:\n            # Print the match score\n            print(f\"{team_a_sets}:{team_b_sets}\")\n\n            # Print the scores for each set\n            for set_score in set_scores:\n                print(f\"{set_score[0]}:{set_score[1]}\")\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis program uses a brute-force approach to find the number of sets that can be played and the scores for each set. It iterates over the possible number of sets in reverse order and checks if the current set can be played. If the current set can be played, it calculates the number of points scored by each team in the current set and updates the total number of points scored by each team. Finally, it prints the match score and the scores for each set."}, {"generated_text": "Here is a Python program that will solve the problem:\n\n```python\ndef calculate_match_score(a, b):\n    match_scores = []\n    for i in range(5):\n        if a >= 25 and b < 24:\n            a -= 25\n            b += 25\n            match_scores.append(f\"25:{b}\")\n        elif a < 24 and b >= 25:\n            a += 25\n            b -= 25\n            match_scores.append(f\"{a}:25\")\n        elif a >= 25 and b >= 24:\n            if abs(a - b) >= 2:\n                if a > b:\n                    a -= 25\n                    b += 25\n                else:\n                    a += 25\n                    b -= 25\n                match_scores.append(f\"25:{b}\")\n            else:\n                return \"Impossible\"\n        elif a < 24 and b < 25:\n            if abs(a - b) >= 2:\n                if a > b:\n                    a += 25\n                    b -= 25\n                else:\n                    a -= 25\n                    b += 25\n                match_scores.append(f\"{a}:25\")\n            else:\n                return \"Impossible\"\n        elif a >= 15 and b < 14:\n            a -= 15\n            b += 15\n            match_scores.append(f\"15:{b}\")\n        elif a < 14 and b >= 15:\n            a += 15\n            b -= 15\n            match_scores.append(f\"{a}:15\")\n        elif a >= 15 and b >= 14:\n            if abs(a - b) >= 2:\n                if a > b:\n                    a -= 15\n                    b += 15\n                else:\n                    a += 15\n                    b -= 15\n                match_scores.append(f\"15:{b}\")\n            else:\n                return \"Impossible\"\n        elif a < 14 and b < 15:\n            if abs(a - b) >= 2:\n                if a > b:\n                    a += 15\n                    b -= 15\n                else:\n                    a -= 15\n                    b += 15\n                match_scores.append(f\"{a}:15\")\n            else:\n                return \"Impossible\"\n        if len(match_scores) >= 3:\n            if len(match_scores) == 5:\n                match_scores[-1] = f\"{match_scores[-1].split(':')[0]}:{match_scores[-1].split(':')[1].lstrip('0')}\"\n        if a >= 25 or b >= 25:\n            return \"Impossible\"\n        if a >= 15 and b >= 15:\n            return \"Impossible\"\n        if a == b:\n            return \"Impossible\"\n    if a > b:\n        return f\"{len([s for s in match_scores if s.split(':')[0] == '25'])}:{len([s for s in match_scores if s.split(':')[0] == '15'])}\"\n    else:\n        return f\"{len([s for s in match_scores if s.split(':')[0] == '15'])}:{len([s for s in match_scores if s.split(':')[0] == '25'])}\"\n\ndef main():\n    m = int(input())\n    for _ in range(m):\n        a, b = map(int, input().split())\n        score = calculate_match_score(a, b)\n        if score == \"Impossible\":\n            print(score)\n        else:\n            print(score)\n            sets = []\n            for i in range(5):\n                if score.split(':')[0] == \"3\":\n                    if i < 3:\n                        sets.append(\"25:0\")\n                    else:\n                        if a > b:\n                            sets.append(f\"25:{b}\")\n                        else:\n                            sets.append(f\"{a}:25\")\n                elif score.split(':')[0] == \"2\":\n                    if i < 3:\n                        sets.append(\"25:0\")\n                    elif i == 3:\n                        sets.append(\"25:22\")\n                    else:\n                        if a > b:\n                            sets.append(f\"25:{b}\")\n                        else:\n                            sets.append(f\"{a}:25\")\n                elif score.split(':')[0] == \"1\":\n                    if i < 3:\n                        sets.append(\"25:0\")\n                    elif i == 3:\n                        sets.append(\"25:22\")\n                    elif i == 4:\n                        sets.append(\"25:22\")\n                    else:\n                        if a > b:\n                            sets.append(f\"25:{b}\")\n                        else:\n                            sets.append(f\"{a}:25\")\n                elif score.split(':')[0] == \"0\":\n                    if i < 3:\n                        sets.append(\"0:25\")\n                    elif i == 3:\n                        sets.append(\"0:25\")\n                    else:\n                        sets.append(\"0:25\")\n            print(\" \".join(sets))\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis program uses a brute force approach to calculate all possible match scores for each input match. It tries all possible combinations of points scored by Team A and their opponents, and checks if the match can end like that. If it can, it prints the match score and the set scores. If it can't, it prints \"Impossible\"."}, {"generated_text": "Here is a Python program that solves the problem:\n\n```python\ndef get_setscore(a, b):\n    sets = []\n    if a >= 25 and b < 24:\n        sets.append((25, b))\n        a -= 25\n        b = 0\n    elif b >= 25 and a < 24:\n        sets.append((a, 25))\n        a = 0\n        b -= 25\n    elif a >= 15 and b < 14 and len(sets) == 4:\n        sets.append((15, b))\n        a -= 15\n        b = 0\n    elif b >= 15 and a < 14 and len(sets) == 4:\n        sets.append((a, 15))\n        a = 0\n        b -= 15\n    while a > 0 or b > 0:\n        diff = abs(a - b)\n        if a > b:\n            sets.append((25, b))\n            a -= 25\n            b = 0\n        elif b > a:\n            sets.append((a, 25))\n            a = 0\n            b -= 25\n        elif diff == 2:\n            if a > b:\n                sets.append((a-23, 2))\n                a = 23\n                b = 0\n            elif b > a:\n                sets.append((2, b-23))\n                a = 0\n                b = 23\n        else:\n            if a > b:\n                sets.append((a-1, 1))\n                a = 1\n                b = 0\n            elif b > a:\n                sets.append((1, b-1))\n                a = 0\n                b = 1\n    return sets\n\ndef get_match_score(a, b):\n    best_diff = -1\n    best_sets = None\n    for i in range(3, 6):\n        sets = get_setscore(a, b)\n        if len(sets)!= i:\n            continue\n        diff = sum(1 for x, y in sets if x > y)\n        if diff > best_diff:\n            best_diff = diff\n            best_sets = sets\n    if best_sets is None:\n        return \"Impossible\"\n    return f\"{best_diff}:{3-best_diff}\", \" \".join(f\"{x}:{y}\" for x, y in best_sets)\n\nm = int(input())\nfor _ in range(m):\n    a, b = map(int, input().split())\n    print(get_match_score(a, b))\n```\n\nThis program works as follows:\n\n1. The `get_setscore` function generates all possible sets that can be played given the total points scored by both teams. It uses a greedy approach, trying to maximize the difference in points scored by the two teams in each set.\n\n2. The `get_match_score` function tries all possible numbers of sets (3, 4, or 5) and selects the one that results in the highest difference in points scored by the two teams. It uses the `get_setscore` function to generate all possible sets for each number of sets.\n\n3. The main part of the program reads the input and prints the match score and set scores for each match.\n\nThis program should work correctly for all valid inputs. However, it may run slowly for large inputs due to its brute-force approach."}, {"generated_text": "Here's the Python program to solve the problem:\n\n```python\ndef calculate_match_score(a, b):\n    # Check if the match could end with the given scores\n    if a == b or (a == b + 1 and a < 15) or (a == b - 1 and a > 24) or (a > b and a - b > 2) or (a < b and b - a > 2):\n        return \"Impossible\"\n\n    # Calculate the number of sets won by team A\n    sets_won = 0\n    sets_lost = 0\n    for i in range(1, 6):\n        if a >= 25 and b < 24:\n            sets_won += 1\n            a -= 25\n            b -= 24\n        elif a < 24 and b >= 25:\n            sets_lost += 1\n            a -= 24\n            b -= 25\n        elif i == 5:\n            if a >= 15 and b < 14:\n                sets_won += 1\n                a -= 15\n                b -= 14\n            elif a < 14 and b >= 15:\n                sets_lost += 1\n                a -= 14\n                b -= 15\n        else:\n            if a >= 25 and b < 24:\n                sets_won += 1\n                a -= 25\n                b -= 24\n                break\n            elif a < 24 and b >= 25:\n                sets_lost += 1\n                a -= 24\n                b -= 25\n                break\n            elif a - b >= 2 or b - a >= 2:\n                if a >= 25:\n                    sets_won += 1\n                    a -= 25\n                elif b >= 25:\n                    sets_lost += 1\n                    b -= 25\n                elif a >= 15:\n                    sets_won += 1\n                    a -= 15\n                elif b >= 15:\n                    sets_lost += 1\n                    b -= 15\n                else:\n                    break\n            else:\n                break\n\n    # Return the match score and set scores\n    return f\"{sets_won}:{sets_lost}\\n\" + \\\n           \"\\n\".join([\" \".join(map(str, [max(0, a), min(200, b)])) for a, b in zip([25]*sets_won + [a]*sets_lost, [25]*sets_won + [b]*sets_lost)])\n\nm = int(input())\nfor _ in range(m):\n    a, b = map(int, input().split())\n    print(calculate_match_score(a, b))\n```\n\nThis program works by iterating over all possible sets and trying to calculate the number of sets won by team A. It keeps track of the remaining points for both teams and checks if the match could end with the given scores. If it can, it returns the match score and the set scores; otherwise, it returns \"Impossible\"."}, {"generated_text": "Here is the Python program to solve the problem:\n\n```python\ndef is_valid_score(a, b):\n    if a < 25 and b < 25:\n        return a - b < 2 and b - a < 2\n    if a < 15 and b < 15:\n        return a - b < 2 and b - a < 2\n    return True\n\n\ndef find_sets_score(a, b):\n    sets_score = []\n    sets_won_by_a = 0\n    sets_won_by_b = 0\n    for i in range(1, 5):\n        if a >= 25:\n            sets_score.append(f\"{a}:{b}\")\n            sets_won_by_a += 1\n            a -= 25\n            b -= 25\n        elif b >= 25:\n            sets_score.append(f\"{a}:{b}\")\n            sets_won_by_b += 1\n            a -= 25\n            b -= 25\n        else:\n            for j in range(1, 100):\n                if a + j >= 25 and b + j < 25 and is_valid_score(a + j, b + j):\n                    a += j\n                    b += j\n                    sets_score.append(f\"{a}:{b}\")\n                    if a >= 25:\n                        sets_won_by_a += 1\n                        a -= 25\n                        b -= 25\n                    break\n                elif b + j >= 25 and a + j < 25 and is_valid_score(a + j, b + j):\n                    a += j\n                    b += j\n                    sets_score.append(f\"{a}:{b}\")\n                    if b >= 25:\n                        sets_won_by_b += 1\n                        a -= 25\n                        b -= 25\n                    break\n    if a >= 15 and b < 15:\n        sets_score.append(f\"{a}:{b}\")\n        sets_won_by_a += 1\n    elif a < 15 and b >= 15:\n        sets_score.append(f\"{a}:{b}\")\n        sets_won_by_b += 1\n    else:\n        for j in range(1, 100):\n            if a + j >= 15 and b + j < 15 and is_valid_score(a + j, b + j):\n                a += j\n                b += j\n                sets_score.append(f\"{a}:{b}\")\n                if a >= 15:\n                    sets_won_by_a += 1\n                break\n            elif b + j >= 15 and a + j < 15 and is_valid_score(a + j, b + j):\n                a += j\n                b += j\n                sets_score.append(f\"{a}:{b}\")\n                if b >= 15:\n                    sets_won_by_b += 1\n                break\n    return sets_score, sets_won_by_a, sets_won_by_b\n\n\ndef find_best_match_score(a, b):\n    if a < b:\n        a, b = b, a\n    sets_score, sets_won_by_a, sets_won_by_b = find_sets_score(a, b)\n    if sets_won_by_a > sets_won_by_b:\n        return sets_won_by_a, sets_won_by_b, sets_score\n    else:\n        return \"Impossible\"\n\n\ndef solve():\n    m = int(input())\n    for _ in range(m):\n        a, b = map(int, input().split())\n        if a > b:\n            a, b = b, a\n        sets_won_by_a, sets_won_by_b, sets_score = find_best_match_score(a, b)\n        if sets_won_by_a > sets_won_by_b:\n            print(f\"{sets_won_by_a}:{sets_won_by_b}\")\n            print(\" \".join(sets_score))\n        else:\n            print(\"Impossible\")\n\n\nsolve()\n```\nThis program first defines a function `is_valid_score` to check if a score is valid. Then it defines a function `find_sets_score` to find the sets score for a given score. The function `find_best_match_score` uses `find_sets_score` to find the best match score for a given score. Finally, the program defines a function `solve` to solve the problem by reading the input, calling `find_best_match_score` for each score, and printing the result."}, {"generated_text": "Here is a Python program to solve the problem:\n\n```python\ndef get_match_score(a, b):\n    \"\"\"\n    Calculate the best match score \"Team A\" could achieve in each of the matches.\n    \n    Args:\n    a (int): The number of points scored by \"Team A\".\n    b (int): The number of points scored by their opponents.\n    \n    Returns:\n    tuple: A tuple containing the match score and the set scores. If the teams could not score a and b points respectively, returns (\"Impossible\", None).\n    \"\"\"\n\n    # Calculate the total number of sets played\n    total_sets = min(5, max(3, (a + b + 1) // 2))\n    \n    # Initialize variables to store the best match score and the set scores\n    best_score = None\n    best_scores = None\n    \n    # Check all possible match scores\n    for score_a in range(total_sets + 1):\n        for score_b in range(total_sets + 1):\n            # Check if the current match score is valid\n            if (a >= 25 * score_a + 25 and a < 25 * (score_a + 1)) or \\\n               (a >= 25 * score_a + 24 and a < 25 * (score_a + 1) and 25 * score_b + 24 <= b < 25 * (score_b + 1)):\n                continue\n            if (b >= 25 * score_b + 25 and b < 25 * (score_b + 1)) or \\\n               (b >= 25 * score_b + 24 and b < 25 * (score_b + 1) and 25 * score_a + 24 <= a < 25 * (score_a + 1)):\n                continue\n            if (a >= 15 * score_a + 15 and a < 15 * (score_a + 1)) or \\\n               (a >= 15 * score_a + 14 and a < 15 * (score_a + 1) and 15 * score_b + 14 <= b < 15 * (score_b + 1)):\n                continue\n            if (b >= 15 * score_b + 15 and b < 15 * (score_b + 1)) or \\\n               (b >= 15 * score_b + 14 and b < 15 * (score_b + 1) and 15 * score_a + 14 <= a < 15 * (score_a + 1)):\n                continue\n            \n            # Check if the current match score is the best one\n            if best_score is None or abs(score_a - score_b) > abs(best_score[0] - best_score[1]):\n                best_score = (score_a, score_b)\n                best_scores = []\n                for i in range(total_sets):\n                    if a >= 25 and b < 24:\n                        best_scores.append(\"25:0\")\n                    elif a >= 25 and b == 24:\n                        for j in range(2):\n                            if a >= 25 + 2 * j and b < 24 - 2 * j:\n                                best_scores.append(f\"25:{24 - 2 * j}\")\n                                a -= 25 + 2 * j\n                                b -= 24 - 2 * j\n                                break\n                        else:\n                            continue\n                    elif a >= 25 and b > 24:\n                        for j in range(2):\n                            if a >= 25 + 2 * j and b >= 24 + 2 * j:\n                                best_scores.append(f\"25:{24 + 2 * j}\")\n                                a -= 25 + 2 * j\n                                b -= 24 + 2 * j\n                                break\n                        else:\n                            continue\n                    elif a < 25 and b >= 25:\n                        best_scores.append(\"0:25\")\n                    elif a < 25 and b < 25:\n                        if a > b:\n                            best_scores.append(f\"25:0\")\n                            a -= 25\n                        else:\n                            best_scores.append(f\"0:25\")\n                            b -= 25\n                    elif a > b:\n                        for j in range(2):\n                            if a >= 24 + 2 * j and b < 24 - 2 * j:\n                                best_scores.append(f\"{24 + 2 * j}:0\")\n                                a -= 24 + 2 * j\n                                break\n                        else:\n                            continue\n                    else:\n                        for j in range(2):\n                            if b >= 24 + 2 * j and a < 24 - 2 * j:\n                                best_scores.append(f\"0:{24 + 2 * j}\")\n                                b -= 24 + 2 * j\n                                break\n                        else:\n                            continue\n                # Fill the rest of the sets\n                for i in range(total_sets - len(best_scores)):\n                    if a >= 15 and b < 14:\n                        best_scores.append(\"15:0\")\n                    elif a >= 15 and b == 14:\n                        for j in range(2):\n                            if a >= 15 + 2 * j and b < 14 - 2 * j:\n                                best_scores.append(f\"15:{14 - 2 * j}\")\n                                a -= 15 + 2 * j\n                                b -= 14 - 2 * j\n                                break\n                        else:\n                            continue\n                    elif a >= 15 and b > 14:\n                        for j in range(2):\n                            if a >= 15 + 2 * j and b >= 14 + 2 * j:\n                                best_scores.append(f\"15:{14 + 2 * j}\")\n                                a -= 15 + 2 * j\n                                b -= 14 + 2 * j\n                                break\n                        else:\n                            continue\n                    elif a < 15 and b >= 15:\n                        best_scores.append(\"0:15\")\n                    elif a < 15 and b < 15:\n                        if a > b:\n                            best_scores.append(f\"15:0\")\n                            a -= 15\n                        else:\n                            best_scores.append(f\"0:15\")\n                            b -= 15\n                    elif a > b:\n                        for j in range(2):\n"}, {"generated_text": "Here is a Python program that solves the problem:\n\n```python\ndef find_match_score(a, b):\n    # Find the number of sets played in the match\n    for sets in range(5):\n        # If the first team won the match\n        if (a >= 25 and b <= 24) or (a > b and a >= 25 and b >= 24 and abs(a - b) >= 2):\n            return a, b, sets\n        # If the second team won the match\n        if (b >= 25 and a <= 24) or (b > a and b >= 25 and a >= 24 and abs(b - a) >= 2):\n            return b, a, sets\n        # If the first team won the fifth set\n        if sets == 4 and a >= 15 and b <= 14:\n            return a, b, sets + 1\n        # If the second team won the fifth set\n        if sets == 4 and b >= 15 and a <= 14:\n            return b, a, sets + 1\n        # If the match is not over yet\n        a, b = a - 1, b - 1\n    # If no solution is found\n    return None, None, None\n\ndef print_match_score(a, b, sets):\n    if sets is None:\n        print(\"Impossible\")\n    else:\n        score = str(sets - (a > b)) + \":\" + str(sets - (a < b))\n        print(score)\n        set_scores = []\n        a_remaining, b_remaining = a, b\n        for i in range(sets):\n            # If the first team won the set\n            if (a_remaining >= 25 and b_remaining <= 24) or (a_remaining > b_remaining and a_remaining >= 25 and b_remaining >= 24 and abs(a_remaining - b_remaining) >= 2):\n                set_scores.append(\"25:0\" if i < 4 else \"15:0\")\n                a_remaining -= 25 if i < 4 else 15\n            # If the second team won the set\n            elif (b_remaining >= 25 and a_remaining <= 24) or (b_remaining > a_remaining and b_remaining >= 25 and a_remaining >= 24 and abs(b_remaining - a_remaining) >= 2):\n                set_scores.append(\"0:25\" if i < 4 else \"25:15\")\n                b_remaining -= 25 if i < 4 else 15\n            # If the first team won the fifth set\n            elif i == 4 and a_remaining >= 15 and b_remaining <= 14:\n                set_scores.append(\"25:\" + str(b_remaining) if a_remaining == 25 else \"25:\" + str(b_remaining + 1))\n                a_remaining -= 25\n            # If the second team won the fifth set\n            elif i == 4 and b_remaining >= 15 and a_remaining <= 14:\n                set_scores.append(str(a_remaining) + \":25\" if b_remaining == 25 else str(a_remaining + 1) + \":25\")\n                b_remaining -= 25\n            # If the set is not over yet\n            elif a_remaining > b_remaining:\n                set_scores.append(str(a_remaining) + \":\" + str(b_remaining))\n                a_remaining -= 1\n                b_remaining -= 1\n            else:\n                set_scores.append(str(b_remaining) + \":\" + str(a_remaining))\n                a_remaining -= 1\n                b_remaining -= 1\n        print(\" \".join(set_scores))\n\ndef main():\n    m = int(input())\n    for _ in range(m):\n        a, b = map(int, input().split())\n        result = find_match_score(a, b)\n        print_match_score(*result)\n\nif __name__ == \"__main__\":\n    main()\n```\nThis program first tries to find the number of sets played in the match by simulating the match. If it finds a possible solution, it prints the match score and the set scores. If it cannot find a solution, it prints \"Impossible\"."}, {"generated_text": "Here is a Python program that can solve this problem:\n\n```python\ndef is_valid(a, b):\n    \"\"\"Check if the points scored by both teams are valid\"\"\"\n    if a == b:\n        return False\n    for i in range(4):\n        if abs(a - 25) <= (b - 24) and a > b:\n            return False\n        if abs(b - 25) <= (a - 24) and b > a:\n            return False\n    if abs(a - 15) <= (b - 14) and a > b:\n        return False\n    if abs(b - 15) <= (a - 14) and b > a:\n        return False\n    return True\n\ndef get_match_score(a, b):\n    \"\"\"Get the match score\"\"\"\n    score_a = 0\n    score_b = 0\n    for i in range(4):\n        if a >= 25 and (b < 24 or abs(a - 25) > (b - 24)):\n            score_a += 1\n        elif b >= 25 and (a < 24 or abs(b - 25) > (a - 24)):\n            score_b += 1\n        else:\n            a -= 1\n            b -= 1\n    if a >= 15 and (b < 14 or abs(a - 15) > (b - 14)):\n        score_a += 1\n    elif b >= 15 and (a < 14 or abs(b - 15) > (a - 14)):\n        score_b += 1\n    return score_a, score_b\n\ndef get_set_scores(a, b):\n    \"\"\"Get the set scores\"\"\"\n    scores_a = []\n    scores_b = []\n    for i in range(4):\n        if a >= 25 and (b < 24 or abs(a - 25) > (b - 24)):\n            scores_a.append('25:0')\n            scores_b.append('0:25')\n            a -= 25\n            b -= 24\n        elif b >= 25 and (a < 24 or abs(b - 25) > (a - 24)):\n            scores_a.append('0:25')\n            scores_b.append('25:0')\n            a -= 24\n            b -= 25\n        else:\n            scores_a.append(f'{a}:{b}')\n            scores_b.append(f'{b}:{a}')\n            a -= 1\n            b -= 1\n    if a >= 15 and (b < 14 or abs(a - 15) > (b - 14)):\n        scores_a.append(f'{a}:0')\n        scores_b.append('0:' + str(b))\n    elif b >= 15 and (a < 14 or abs(b - 15) > (a - 14)):\n        scores_a.append('0:' + str(b))\n        scores_b.append(f'{b}:{a}')\n    return scores_a, scores_b\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        a, b = map(int, input().split())\n        if not is_valid(a, b):\n            print('Impossible')\n        else:\n            score_a, score_b = get_match_score(a, b)\n            print(f'{score_a}:{score_b}')\n            scores_a, scores_b = get_set_scores(a, b)\n            print(' '.join(scores_a))\n            print(' '.join(scores_b))\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis program first checks if the points scored by both teams are valid. If they are not, it prints \"Impossible\". Otherwise, it calculates the match score and the set scores, and prints the match score and the set scores."}, {"generated_text": "Here's a Python program that solves the problem:\n\n```python\ndef find_match_score(a, b):\n    for possible_sets in range(5):\n        if a < possible_sets * 25 or b < possible_sets * 25:\n            continue\n        for sets_a in range(possible_sets + 1):\n            sets_b = possible_sets - sets_a\n            if a < sets_a * 25 + sets_b * 25 and b < sets_a * 25 + sets_b * 25:\n                continue\n            if a < sets_a * 25 + (possible_sets - sets_a) * 15 and b < sets_a * 25 + (possible_sets - sets_a) * 15:\n                continue\n            a_points = 0\n            b_points = 0\n            a_sets = 0\n            b_sets = 0\n            for i in range(possible_sets):\n                if i < possible_sets - 1:\n                    if a >= 25 and b >= 24:\n                        diff = abs(a - b)\n                        if diff >= 2:\n                            a_points += 25\n                            b_points += 24\n                            a_sets += 1\n                        else:\n                            continue\n                    elif a >= 25:\n                        a_points += 25\n                        a_sets += 1\n                    elif b >= 25:\n                        b_points += 25\n                        b_sets += 1\n                    else:\n                        while a < 25 and b < 25:\n                            if a >= b:\n                                a_points += 1\n                                a_sets += 1\n                            else:\n                                b_points += 1\n                                b_sets += 1\n                            a += 1\n                            b += 1\n                else:\n                    if a >= 15 and b >= 14:\n                        diff = abs(a - b)\n                        if diff >= 2:\n                            a_points += 15\n                            b_points += 14\n                            a_sets += 1\n                        else:\n                            continue\n                    elif a >= 15:\n                        a_points += 15\n                        a_sets += 1\n                    elif b >= 15:\n                        b_points += 15\n                        b_sets += 1\n            if a_sets == sets_a and b_sets == sets_b:\n                return str(sets_a) + \":\" + str(sets_b) + \"\\n\" + \" \".join(str(x) + \":\" + str(y) for x, y in zip([a_points] * a_sets, [b_points] * b_sets) + ([a_points] * (possible_sets - a_sets), [b_points] * (possible_sets - b_sets)))\n    return \"Impossible\"\n\ndef main():\n    m = int(input())\n    for _ in range(m):\n        a, b = map(int, input().split())\n        print(find_match_score(a, b))\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis program works by trying all possible combinations of sets won by each team, and then checking if it's possible for the teams to score the given total points with those sets. If it's possible, it returns the match score and the set scores. If it's not possible, it returns \"Impossible\"."}, {"generated_text": "Here's a Python program to solve the problem:\n\n```python\ndef find_match_score(a, b):\n    if a == 0 and b == 0:\n        return 'Impossible'\n    if a == b:\n        return 'Impossible'\n    if a > b:\n        a, b = b, a\n    max_sets = min(5, (a + 1) // 2)\n    best_score = 0\n    best_score_set = []\n    for score in range(1, max_sets + 1):\n        sets_a = score\n        sets_b = max_sets - score\n        if a >= 25 * sets_a:\n            if b >= 24 * sets_a + 2:\n                continue\n            for i in range(sets_a):\n                a -= 25\n                b -= 24\n            break\n        if a >= 15 * sets_a:\n            if b >= 14 * sets_a + 2:\n                continue\n            for i in range(sets_a):\n                a -= 15\n                b -= 14\n            break\n    else:\n        return 'Impossible'\n    if a == b:\n        a += 1\n        b += 1\n    score_a = a - (25 * sets_a + 15 * (sets_a - sets_b))\n    score_b = b - (24 * sets_a + 14 * (sets_a - sets_b))\n    if score_a < 0 or score_b < 0:\n        return 'Impossible'\n    if best_score < abs(sets_a - sets_b):\n        best_score = abs(sets_a - sets_b)\n        best_score_set = []\n    for i in range(sets_a):\n        best_score_set.append(f'{25}:{24}')\n    for i in range(sets_a, sets_a + sets_b):\n        best_score_set.append(f'{15}:{14}')\n    if score_a > 0:\n        best_score_set.append(f'{score_a}:{score_b}')\n    return f'{sets_a}:{sets_b}\\n{\" \".join(best_score_set)}'\n\ndef main():\n    m = int(input())\n    for _ in range(m):\n        a, b = map(int, input().split())\n        print(find_match_score(a, b))\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis program first tries to find the best match score by iterating over all possible numbers of sets won by \"Team A\". For each number of sets, it tries to find the points scored by \"Team A\" and their opponent in each set. If it finds a valid solution, it updates the best match score and the corresponding set scores. If it cannot find a valid solution, it returns \"Impossible\"."}, {"generated_text": "Here is a Python program that solves the problem:\n\n```python\nimport math\n\ndef calculate_match_score(a, b):\n    if a == 0 and b == 0:\n        return \"Impossible\"\n\n    if a == b:\n        return \"Impossible\"\n\n    sets_won_by_a = 0\n    sets_won_by_b = 0\n    total_a = a\n    total_b = b\n\n    for i in range(5):\n        if total_a >= 25 and total_b < 25:\n            sets_won_by_a += 1\n            total_b = 0\n        elif total_a < 25 and total_b >= 25:\n            sets_won_by_b += 1\n            total_a = 0\n        elif total_a >= 25 and total_b >= 25:\n            if abs(total_a - total_b) > 1:\n                if total_a > total_b:\n                    sets_won_by_a += 1\n                    total_b = 0\n                else:\n                    sets_won_by_b += 1\n                    total_a = 0\n            else:\n                if i < 4:\n                    return \"Impossible\"\n                else:\n                    if total_a > total_b:\n                        sets_won_by_a += 1\n                    else:\n                        sets_won_by_b += 1\n                    total_a = 0\n                    total_b = 0\n        elif total_a >= 15 and total_b < 15 and i == 4:\n            sets_won_by_a += 1\n            total_b = 0\n        elif total_a < 15 and total_b >= 15 and i == 4:\n            sets_won_by_b += 1\n            total_a = 0\n        else:\n            if i == 4:\n                return \"Impossible\"\n\n        total_a = max(0, total_a - 25)\n        total_b = max(0, total_b - 25)\n\n        if i < 4:\n            if total_a >= 24 and total_b < 24:\n                total_a -= 1\n                total_b += 1\n            elif total_a < 24 and total_b >= 24:\n                total_a += 1\n                total_b -= 1\n\n    if sets_won_by_a > sets_won_by_b:\n        return f\"{sets_won_by_a}:{sets_won_by_b}\"\n    else:\n        return f\"{sets_won_by_b}:{sets_won_by_a}\"\n\ndef calculate_set_scores(a, b):\n    sets_won_by_a = 0\n    sets_won_by_b = 0\n    total_a = a\n    total_b = b\n    set_scores = []\n\n    for i in range(5):\n        if total_a >= 25 and total_b < 25:\n            sets_won_by_a += 1\n            set_scores.append(\"25:0\")\n            total_b = 0\n        elif total_a < 25 and total_b >= 25:\n            sets_won_by_b += 1\n            set_scores.append(\"0:25\")\n            total_a = 0\n        elif total_a >= 25 and total_b >= 25:\n            if abs(total_a - total_b) > 1:\n                if total_a > total_b:\n                    sets_won_by_a += 1\n                    set_scores.append(f\"{total_a}:{total_b}\")\n                    total_b = 0\n                else:\n                    sets_won_by_b += 1\n                    set_scores.append(f\"{total_b}:{total_a}\")\n                    total_a = 0\n            else:\n                if i < 4:\n                    return \"Impossible\"\n                else:\n                    if total_a > total_b:\n                        sets_won_by_a += 1\n                    else:\n                        sets_won_by_b += 1\n                    set_scores.append(f\"{total_a}:{total_b}\")\n                    total_a = 0\n                    total_b = 0\n        elif total_a >= 15 and total_b < 15 and i == 4:\n            sets_won_by_a += 1\n            set_scores.append(\"25:0\")\n            total_b = 0\n        elif total_a < 15 and total_b >= 15 and i == 4:\n            sets_won_by_b += 1\n            set_scores.append(\"0:25\")\n            total_a = 0\n        else:\n            if i == 4:\n                return \"Impossible\"\n\n        total_a = max(0, total_a - 25)\n        total_b = max(0, total_b - 25)\n\n        if i < 4:\n            if total_a >= 24 and total_b < 24:\n                total_a -= 1\n                total_b += 1\n            elif total_a < 24 and total_b >= 24:\n                total_a += 1\n                total_b -= 1\n\n    return \"\\n\".join(set_scores)\n\nm = int(input())\n\nfor _ in range(m):\n    a, b = map(int, input().split())\n    match_score = calculate_match_score(a, b)\n    if match_score!= \"Impossible\":\n        print(match_score)\n        print(calculate_set_scores(a, b))\n    else:\n        print(match_score)\n```\nThis program uses two functions: `calculate_match_score` and `calculate_set_scores`. The `calculate_match_score` function calculates the best match score for a given match, and the `calculate_set_scores` function calculates the set scores for a given match. The main part of the program reads the input, calls these functions for each match, and prints the results."}, {"generated_text": "Here is a Python program that will solve the problem:\n```python\ndef check_score(a, b):\n    \"\"\"\n    Check if the given scores are possible for a match.\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    if a > 25 and b > 24:\n        return False\n    if a > 15 and b > 14:\n        return False\n    return True\n\ndef get_sets(a, b):\n    \"\"\"\n    Get the number of sets won by each team in a match.\n    \"\"\"\n    sets = [0, 0]\n    for i in range(1, 6):\n        if a >= 25 or (a > 24 and b - a >= 2):\n            sets[0] += 1\n            a -= 25 if a >= 25 else a\n        elif b >= 25 or (b > 24 and a - b >= 2):\n            sets[1] += 1\n            b -= 25 if b >= 25 else b\n        elif i < 5 and (a >= 15 or (a > 14 and b - a >= 2)):\n            sets[0] += 1\n            a -= 15 if a >= 15 else a\n        elif i < 5 and (b >= 15 or (b > 14 and a - b >= 2)):\n            sets[1] += 1\n            b -= 15 if b >= 15 else b\n    return sets\n\ndef get_set_scores(a, b):\n    \"\"\"\n    Get the scores of each set in a match.\n    \"\"\"\n    scores = []\n    a_prev = 0\n    b_prev = 0\n    for i in range(1, 6):\n        if a >= 25 or (a > 24 and b - a >= 2):\n            scores.append(str(a - a_prev) + ':' + str(b - b_prev))\n            a_prev = a\n            b_prev = b\n        elif b >= 25 or (b > 24 and a - b >= 2):\n            scores.append(str(b - b_prev) + ':' + str(a - a_prev))\n            a_prev = a\n            b_prev = b\n        elif i < 5 and (a >= 15 or (a > 14 and b - a >= 2)):\n            scores.append(str(a - a_prev) + ':' + str(b - b_prev))\n            a_prev = a\n            b_prev = b\n        elif i < 5 and (b >= 15 or (b > 14 and a - b >= 2)):\n            scores.append(str(b - b_prev) + ':' + str(a - a_prev))\n            a_prev = a\n            b_prev = b\n    return scores\n\ndef main():\n    m = int(input())\n    for _ in range(m):\n        a, b = map(int, input().split())\n        if not check_score(a, b):\n            print('Impossible')\n            continue\n        sets = get_sets(a, b)\n        scores = get_set_scores(a, b)\n        print(str(sets[0]) + ':' + str(sets[1]))\n        print(' '.join(scores))\n\nif __name__ == '__main__':\n    main()\n```\nThis program first checks if the given scores are possible for a match. If not, it prints 'Impossible' and moves on to the next match. If the scores are possible, it calculates the number of sets won by each team and the scores of each set, and prints the results in the required format."}]}