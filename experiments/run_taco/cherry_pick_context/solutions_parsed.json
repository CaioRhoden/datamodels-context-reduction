[
    {
        "task_id": 10237,
        "output": [
            "class Solution:\n\n\tdef findCornerPoints(self, L, points):\n\n\t\tx1, y1 = points[0]\n\t\tx2, y2 = points[1]\n\n\t\tA = (2*x1 - x2, 2*y1 - y2)\n\t\tB = (x2, 2*y1 - y2)\n\t\tC = (2*x1 - x2, y2)\n\t\tD = (x2, y2)\n\n\t\treturn [A, B, C, D]",
            "class Solution:\n\n    def findCornerPoints(self, L, points):\n\n        # Calculate the coordinates of the points A, B, C, and D\n        x1 = points[0][0] - (points[0][0] - points[1][0]) / 2\n        y1 = points[0][1] - (points[0][1] - points[1][1]) / 2\n        x4 = points[0][0] + (points[0][0] - points[1][0]) / 2\n        y4 = points[0][1] + (points[0][1] - points[1][1]) / 2\n\n        x2 = points[1][0] - (points[0][0] - points[1][0]) / 2\n        y2 = points[1][1] - (points[0][1] - points[1][1]) / 2\n        x3 = points[1][0] + (points[0][0] - points[1][0]) / 2\n        y3 = points[1][1] + (points[0][1] - points[1][1]) / 2\n\n        # Return the coordinates of the points A, B, C, and D in sorted order\n        return [int(x1), int(y1)], [int(x2), int(y2)], [int(x3), int(y3)], [int(x4), int(y4)]",
            "class Solution:\n    def findCornerPoints(self, L, points):\n        # Calculate the coordinates of points A, B, C, and D\n        A = (2*points[0][0] - points[1][0], 2*points[0][1] - points[1][1])\n        B = (2*points[1][0] - points[0][0], 2*points[1][1] - points[0][1])\n        C = (points[0][0] + points[1][0] - L, points[0][1] + points[1][1] - L)\n        D = (points[0][0] + points[1][0] + L, points[0][1] + points[1][1] + L)\n        \n        # Return the corner points in sorted order\n        return sorted([A, B, C, D])",
            "class Solution:\n\n\tdef findCornerPoints(self, L, points):\n\t\tx = (points[0][0] + points[1][0]) / 2\n\t\ty = (points[0][1] + points[1][1]) / 2\n\t\tA = [2*x - L/2, 2*y - L/2]\n\t\tB = [2*x - L/2, -2*y + L/2]\n\t\tC = [-2*y + L/2, 2*x - L/2]\n\t\tD = [-2*y + L/2, -2*x + L/2]\n\t\treturn sorted([round(x) for x in [A[0], B[0], C[0], D[0]]]) + sorted([round(x) for x in [A[1], B[1], C[1], D[1]]])",
            "class Solution:\n\n\tdef findCornerPoints(self, L, points):\n\t\tx1, y1 = points[0]\n\t\tx2, y2 = points[1]\n\t\ta = (x1 - L/2, y1)\n\t\tb = (x2, y2 - L/2)\n\t\tc = (x2, y2 + L/2)\n\t\td = (x1 + L/2, y1)\n\t\treturn sorted([a, b, c, d])",
            "class Solution:\n\n\tdef findCornerPoints(self, L, points):\n\t\tp = points[0]\n\t\tq = points[1]\n\t\t\n\t\t# Calculate the coordinates of the 4 points\n\t\tA = [p[0] - L/2, (p[1] + q[1])/2]\n\t\tB = [(p[0] + q[0])/2, q[1] - L/2]\n\t\tC = [(p[0] + q[0])/2, q[1] + L/2]\n\t\tD = [p[0] + L/2, (p[1] + q[1])/2]\n\t\t\n\t\t# Return the coordinates of the 4 points in sorted order\n\t\treturn sorted([A, B, C, D])",
            "class Solution:\n\n\tdef findCornerPoints(self, L, points):\n\t\t# Unpack the mid-points\n\t\tx1, y1 = points[0]\n\t\tx2, y2 = points[1]\n\t\t\n\t\t# Calculate the corner points\n\t\tx3, y3 = x1 - (x2 - x1), y1 - (y2 - y1)\n\t\tx4, y4 = x2 + (x1 - x2), y2 + (y1 - y2)\n\t\t\n\t\t# Sort the corner points\n\t\tcorner_points = sorted([x3, y3, x4, y4])\n\t\t\n\t\treturn [int(i) for i in corner_points]",
            "class Solution:\n\n\tdef findCornerPoints(self, L, points):\n\n\t\t# Calculate the center of the rectangle\n\t\tcenter_x = (points[0][0] + points[1][0]) / 2\n\t\tcenter_y = (points[0][1] + points[1][1]) / 2\n\n\t\t# Calculate the corner points\n\t\ta = [center_x - L / 2, center_y - L / 2]\n\t\tb = [center_x - L / 2, center_y + L / 2]\n\t\tc = [center_x + L / 2, center_y - L / 2]\n\t\td = [center_x + L / 2, center_y + L / 2]\n\n\t\t# Return the corner points in sorted order\n\t\treturn sorted([round(a[0], 5), round(a[1], 5)], \n\t\t              [round(b[0], 5), round(b[1], 5)], \n\t\t              [round(c[0], 5), round(c[1], 5)], \n\t\t              [round(d[0], 5), round(d[1], 5)])",
            "class Solution:\n\n    def findCornerPoints(self, L, points):\n        # find the center of the rectangle\n        center_x = (points[0][0] + points[1][0]) / 2\n        center_y = (points[0][1] + points[1][1]) / 2\n        \n        # find the coordinates of the 4 points A, B, C and D\n        A = [center_x - L / 2, center_y - L / 2]\n        B = [center_x + L / 2, center_y - L / 2]\n        C = [center_x + L / 2, center_y + L / 2]\n        D = [center_x - L / 2, center_y + L / 2]\n        \n        # return the coordinates of the 4 points in sorted order\n        return sorted([A, B, C, D], key=lambda x: (x[0], x[1]))",
            "class Solution:\n\n\tdef findCornerPoints(self, L, points):\n\n\t\t# Extract the x and y coordinates of the midpoints\n\t\tp_x, p_y = points[0]\n\t\tq_x, q_y = points[1]\n\n\t\t# Calculate the corner points\n\t\tA = [2*p_x - q_x, 2*p_y - q_y]\n\t\tB = [2*q_x - p_x, 2*q_y - p_y]\n\t\tC = [p_x + q_x - L, p_y + q_y - L]\n\t\tD = [p_x + q_x + L, p_y + q_y + L]\n\n\t\t# Sort the corner points and return them\n\t\treturn sorted([A, B, C, D])",
            "class Solution:\n    def findCornerPoints(self, L, points):\n        # Extract the coordinates of the midpoints\n        x1, y1 = points[0]\n        x2, y2 = points[1]\n\n        # Calculate the coordinates of the corners\n        x11, y11 = x1 - x2, y1 - y2\n        x12, y12 = x1 + x2, y1 + y2\n\n        # Calculate the coordinates of the corners\n        x1_1, y1_1 = x11 / 2, y11 / 2\n        x1_2, y1_2 = x12 / 2, y12 / 2\n\n        # Return the coordinates of the corners in sorted order\n        return [int(x1_1), int(y1_1)], [int(x1_2), int(y1_2)], [int(x1_2), int(y1_1)], [int(x1_1), int(y1_2)]",
            "class Solution:\n\n\tdef findCornerPoints(self, L, points):\n\t\t# Calculate the coordinates of the corners\n\t\tx1, y1 = points[0]\n\t\tx2, y2 = points[1]\n\t\tA = (2*x1 - x2, 2*y1 - y2)\n\t\tB = (2*x2 - x1, 2*y2 - y1)\n\t\tC = (x1 + x2, y1 + y2)\n\t\tD = (x1 - x2, y1 - y2)\n\n\t\t# Return the corner points in sorted order\n\t\treturn sorted([tuple(map(int, [round(i) for i in A])), tuple(map(int, [round(i) for i in B])), tuple(map(int, [round(i) for i in C])), tuple(map(int, [round(i) for i in D]))])",
            "class Solution:\n\n\tdef findCornerPoints(self, L, points):\n\t\tp = points[0]\n\t\tq = points[1]\n\t\tA = (2 * p[0] - q[0], 2 * p[1] - q[1])\n\t\tB = (q[0] - 2 * p[0], q[1] - 2 * p[1])\n\t\tC = (2 * q[0] - p[0], 2 * q[1] - p[1])\n\t\tD = (p[0] - 2 * q[0], p[1] - 2 * q[1])\n\t\treturn [tuple(int(i) for i in (A)), tuple(int(i) for i in (B)), tuple(int(i) for i in (C)), tuple(int(i) for i in (D))]",
            "class Solution:\n\n\tdef findCornerPoints(self, L, points):\n\n\t\t# Find the center point\n\t\tx1, y1 = points[0]\n\t\tx2, y2 = points[1]\n\t\tx_center = (x1 + x2) / 2\n\t\ty_center = (y1 + y2) / 2\n\n\t\t# Calculate the corner points\n\t\tx_a = x_center + (x2 - x1) / 2\n\t\ty_a = y_center - (y2 - y1) / 2\n\t\tx_b = x_center - (x2 - x1) / 2\n\t\ty_b = y_center - (y2 - y1) / 2\n\t\tx_c = x_center + (x2 - x1) / 2\n\t\ty_c = y_center + (y2 - y1) / 2\n\t\tx_d = x_center - (x2 - x1) / 2\n\t\ty_d = y_center + (y2 - y1) / 2\n\n\t\t# Sort the corner points and return them\n\t\treturn sorted([int(x_a), int(y_a), int(x_b), int(y_b), int(x_c), int(y_c), int(x_d), int(y_d)])",
            "class Solution:\n\n\tdef findCornerPoints(self, L, points):\n\n\t\t# Calculate the midpoint coordinates\n\t\tp = points[0]\n\t\tq = points[1]\n\n\t\t# Calculate the coordinates of the four corners\n\t\tA = [2 * p[0] - q[0], 2 * p[1] - q[1]]\n\t\tB = [2 * q[0] - p[0], 2 * q[1] - p[1]]\n\t\tC = [q[0], p[1]]\n\t\tD = [p[0], q[1]]\n\n\t\t# Return the corner points in sorted order\n\t\treturn sorted([A, B, C, D], key=lambda x: (x[0], x[1]))",
            "class Solution:\n\n    def findCornerPoints(self, L, points):\n        x1, y1 = points[0]\n        x2, y2 = points[1]\n        \n        x = (x1 + x2 - L) / 2\n        y = (y1 + y2 - L) / 2\n        \n        corner_A = [int(x), int(y)]\n        corner_B = [int(x), int(y + L)]\n        corner_C = [int(x + L), int(y + L)]\n        corner_D = [int(x + L), int(y)]\n        \n        return sorted(corner_A + corner_B + corner_C + corner_D)",
            "class Solution:\n\n\tdef findCornerPoints(self, L, points):\n\n\t\tp = points[0]\n\t\tq = points[1]\n\n\t\tA = (p[0] - L/2, p[1] - L/2)\n\t\tB = (q[0] - L/2, q[1] - L/2)\n\t\tC = (q[0] + L/2, q[1] + L/2)\n\t\tD = (p[0] + L/2, p[1] + L/2)\n\n\t\tcorners = sorted([A, B, C, D])\n\n\t\treturn [int(x) for x in corners]",
            "class Solution:\n\n\tdef findCornerPoints(self, L, points):\n\t\tp, q = points\n\t\tx = 2*p[0] - q[0]\n\t\ty = 2*p[1] - q[1]\n\t\tA = [x - L, y]\n\t\tB = [x - L, y + L]\n\t\tC = [x + L, y]\n\t\tD = [x + L, y + L]\n\t\treturn sorted([[int(i) for i in map(round, x)] for x in [A, B, C, D]])\nsolution = Solution()\nprint(solution.findCornerPoints(2, [[1,0],[1,2]])) # Output: [[0, 0], [0, 2], [2, 0], [2, 2]]\nprint(solution.findCornerPoints(2.8284, [[1,1], [-1,-1]])) # Output: [[-2, 0], [0, -2], [0, 2], [2, 0]]",
            "class Solution:\n\n\tdef findCornerPoints(self, L, points):\n\n\t\t# Calculate the coordinates of the midpoints of side AD and BC\n\t\tp, q = points\n\n\t\t# Calculate the coordinates of the corner points\n\t\tA = (p[0] - L/2, p[1] - L/2)\n\t\tB = (p[0] - L/2, q[1] + L/2)\n\t\tC = (q[0] + L/2, p[1] - L/2)\n\t\tD = (q[0] + L/2, q[1] + L/2)\n\n\t\t# Return the corner points in sorted order\n\t\treturn sorted([A, B, C, D], key=lambda x: (x[0], x[1]))",
            "class Solution:\n\n\tdef findCornerPoints(self, L, points):\n\n\t\t# Unpack the coordinates of the midpoints of the sides\n\t\tx1, y1 = points[0]\n\t\tx2, y2 = points[1]\n\n\t\t# Calculate the coordinates of the four corners of the rectangle\n\t\tx3, y3 = x1 - (x2 - x1), y1 - (y2 - y1)\n\t\tx4, y4 = x2 - (x1 - x2), y2 - (y1 - y2)\n\t\tx5, y5 = x1 + (x2 - x1), y1 + (y2 - y1)\n\t\tx6, y6 = x2 + (x1 - x2), y2 + (y1 - y2)\n\n\t\t# Return the coordinates of the four corners of the rectangle in sorted order\n\t\treturn sorted([[x3, y3], [x4, y4], [x5, y5], [x6, y6]], key=lambda x: (x[0], x[1]))"
        ]
    }
]