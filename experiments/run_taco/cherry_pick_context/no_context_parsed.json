{"task_id": 10237, "output": ["class Solution:\n\n    def findCornerPoints(self, L, points):\n        # Unpack the midpoints\n        p, q = points\n\n        # Calculate the x and y differences between the midpoints\n        dx = q[0] - p[0]\n        dy = q[1] - p[1]\n\n        # Calculate the corner points\n        A = (p[0] - dx, p[1] - dy)\n        B = (p[0] + dx, p[1] - dy)\n        C = (p[0] + dx, p[1] + dy)\n        D = (p[0] - dx, p[1] + dy)\n\n        # Return the corner points in sorted order\n        return [tuple(int(x) for x in (A, B, C, D))]\nsolution = Solution()\nprint(solution.findCornerPoints(2, [[1, 0], [1, 2]]))  # Output: [(0, 0), (0, 2), (2, 0), (2, 2)]\nprint(solution.findCornerPoints(2.8284, [[1, 1], [-1, -1]]))  # Output: [(-2, 0), (0, -2), (0, 2), (2, 0)]", "import math\n\nclass Solution:\n    def findCornerPoints(self, L, points):\n        p = points[0]\n        q = points[1]\n\n        # Calculate the coordinates of the 4 points A, B, C, and D\n        A = (p[0] - L / 2, p[1] - L / 2)\n        B = (q[0] + L / 2, q[1] - L / 2)\n        C = (q[0] - L / 2, q[1] + L / 2)\n        D = (p[0] + L / 2, p[1] + L / 2)\n\n        # Return the coordinates of the 4 points A, B, C, and D in sorted order\n        return [tuple(map(int, sorted([A, B, C, D], key=lambda x: (x[0], x[1]))))]", "class Solution:\n\n\tdef findCornerPoints(self, L, points):\n\t\t# Calculate the center of the rectangle\n\t\tmidpoint_x = (points[0][0] + points[1][0]) / 2\n\t\tmidpoint_y = (points[0][1] + points[1][1]) / 2\n\n\t\t# Calculate the coordinates of the corners\n\t\tcorner_points = []\n\t\tcorner_points.append([midpoint_x - L / 2, midpoint_y - L / 2])  # Bottom left\n\t\tcorner_points.append([midpoint_x + L / 2, midpoint_y - L / 2])  # Bottom right\n\t\tcorner_points.append([midpoint_x + L / 2, midpoint_y + L / 2])  # Top right\n\t\tcorner_points.append([midpoint_x - L / 2, midpoint_y + L / 2])  # Top left\n\n\t\t# Return the coordinates of the corners in sorted order\n\t\treturn sorted(corner_points, key=lambda x: (x[0], x[1]))\nsolution = Solution()\nprint(solution.findCornerPoints(2, [[1,0],[1,2]]))  # Output: [[0, 0], [0, 2], [2, 0], [2, 2]]\nprint(solution.findCornerPoints(2.8284, [[1,1], [-1,-1]]))  # Output: [[-2.0, 0.0], [0.0, -2.0], [0.0, 2.0], [2.0, 0.0]]", "import math\n\nclass Solution:\n\n    def findCornerPoints(self, L, points):\n        # Calculate the midpoints of the sides AD and BC\n        mid_x = (points[0][0] + points[1][0]) / 2\n        mid_y = (points[0][1] + points[1][1]) / 2\n\n        # Calculate the coordinates of the corners\n        A_x = mid_x - (points[1][1] - points[0][1]) / 2\n        A_y = mid_y - (points[1][0] - points[0][0]) / 2\n        B_x = mid_x + (points[1][1] - points[0][1]) / 2\n        B_y = mid_y - (points[1][0] - points[0][0]) / 2\n        C_x = mid_x + (points[1][1] - points[0][1]) / 2\n        C_y = mid_y + (points[1][0] - points[0][0]) / 2\n        D_x = mid_x - (points[1][1] - points[0][1]) / 2\n        D_y = mid_y + (points[1][0] - points[0][0]) / 2\n\n        # Return the coordinates of the corners as a list\n        return [[int(A_x), int(A_y)], [int(B_x), int(B_y)], [int(C_x), int(C_y)], [int(D_x), int(D_y)]]", "import math\n\nclass Solution:\n    def findCornerPoints(self, L, points):\n        # Calculate the coordinates of the center of the rectangle\n        center_x = (points[0][0] + points[1][0]) / 2\n        center_y = (points[0][1] + points[1][1]) / 2\n        \n        # Calculate the length of the diagonal\n        diagonal_length = math.sqrt(L**2 + L**2)\n        \n        # Calculate the coordinates of the corners\n        A = (center_x - L/2, center_y - L/2)\n        B = (center_x - L/2, center_y + L/2)\n        C = (center_x + L/2, center_y - L/2)\n        D = (center_x + L/2, center_y + L/2)\n        \n        # Return the coordinates of the corners in sorted order\n        return sorted([A, B, C, D])", "class Solution:\n\n    def findCornerPoints(self, L, points):\n        # Calculate the midpoint coordinates\n        p = points[0]\n        q = points[1]\n        mid_x = (p[0] + q[0]) / 2\n        mid_y = (p[1] + q[1]) / 2\n\n        # Calculate the corner points\n        A = [mid_x - L / 2, mid_y - L / 2]\n        B = [mid_x - L / 2, mid_y + L / 2]\n        C = [mid_x + L / 2, mid_y + L / 2]\n        D = [mid_x + L / 2, mid_y - L / 2]\n\n        # Return the corner points in sorted order\n        return sorted([A, B, C, D], key=lambda x: (x[0], x[1]))", "import math\n\nclass Solution:\n\n    def findCornerPoints(self, L, points):\n\n        # Calculate the x and y coordinates of the midpoints\n        p_x, p_y = points[0]\n        q_x, q_y = points[1]\n\n        # Calculate the x and y coordinates of the corner points\n        a_x, a_y = (p_x - q_x), (p_y + q_y)\n        b_x, b_y = (p_x + q_x), (p_y + q_y)\n        c_x, c_y = (p_x + q_x), (p_y - q_y)\n        d_x, d_y = (p_x - q_x), (p_y - q_y)\n\n        # Return the corner points as a list of tuples\n        return [math.floor(a_x), math.floor(a_y)], [math.floor(b_x), math.floor(b_y)], [math.floor(c_x), math.floor(c_y)], [math.floor(d_x), math.floor(d_y)]\nimport math\n\nclass Solution:\n\n    def findCornerPoints(self, L, points):\n\n        # Calculate the x and y coordinates of the midpoints\n        p_x, p_y = points[0]\n        q_x, q_y = points[1]\n\n        # Calculate the x and y coordinates of the corner points\n        a_x, a_y = (p_x - q_x), (p_y + q_y)\n        b_x, b_y = (p_x + q_x), (p_y + q_y)\n        c_x, c_y = (p_x + q_x), (p_y - q_y)\n        d_x, d_y = (p_x - q_x), (p_y - q_y)\n\n        # Return the corner points as a list of tuples in sorted order\n        return sorted([[math.floor(a_x), math.floor(a_y)], [math.floor(b_x), math.floor(b_y)], [math.floor(c_x), math.floor(c_y)], [math.floor(d_x), math.floor(d_y)]])", "import math\n\nclass Solution:\n\n    def findCornerPoints(self, L, points):\n        # Calculate the midpoint coordinates\n        p = points[0]\n        q = points[1]\n\n        # Calculate the coordinates of the other points\n        Ax = 2 * q[0] - p[0]\n        Ay = 2 * p[1] - q[1]\n        Bx = 2 * p[0] - q[0]\n        By = 2 * q[1] - p[1]\n        Cx = 2 * q[0] - p[0]\n        Cy = 2 * p[1] - q[1]\n        Dx = 2 * p[0] - q[0]\n        Dy = 2 * q[1] - p[1]\n\n        # Return the coordinates of the corner points in sorted order\n        return [math.floor(Ax), math.floor(Ay)], [math.floor(Bx), math.floor(By)], [math.floor(Cx), math.floor(Cy)], [math.floor(Dx), math.floor(Dy)]\nimport math\n\nclass Solution:\n\n    def findCornerPoints(self, L, points):\n        # Calculate the midpoint coordinates\n        p = points[0]\n        q = points[1]\n\n        # Calculate the coordinates of the other points\n        Ax = 2 * q[0] - p[0]\n        Ay = 2 * p[1] - q[1]\n        Bx = 2 * p[0] - q[0]\n        By = 2 * q[1] - p[1]\n        Cx = 2 * q[0] - p[0]\n        Cy = 2 * p[1] - q[1]\n        Dx = 2 * p[0] - q[0]\n        Dy = 2 * q[1] - p[1]\n\n        # Return the coordinates of the corner points in sorted order\n        return [math.floor(Ax), math.floor(Ay)], [math.floor(Bx), math.floor(By)], [math.floor(Cx), math.floor(Cy)], [math.floor(Dx), math.floor(Dy)]\nimport math\n\nclass Solution:\n\n    def findCornerPoints(self, L, points):\n        # Calculate the midpoint coordinates\n        p = points[0]\n        q = points[1]\n\n        # Calculate the coordinates of the other points\n        Ax = 2 * q[0] - p[0]\n        Ay = 2 * p[1] - q[1]\n        Bx = 2 * p[0] - q[0]\n        By = 2 * q[1] - p[1]\n        Cx = 2 * q[0] - p[0]\n        Cy = 2 * p[1] - q[1]\n        Dx = 2 * p[0] - q[0]\n        Dy = 2 * q[1] - p[1]\n\n        # Return the coordinates of the corner points in sorted order\n        return [\n            [math.floor(Ax), math.floor(Ay)],\n            [math.floor(Bx), math.floor(By)],\n            [math.floor(Cx), math.floor(Cy)],\n            [math.floor(Dx), math.floor(Dy)]\n        ]", "import math\n\nclass Solution:\n    def findCornerPoints(self, L, points):\n        # Calculate the coordinates of the points A, B, C, and D\n        p = points[0]\n        q = points[1]\n\n        # Calculate the coordinates of the points A and D\n        a_x = q[0] - (p[0] - q[0])\n        a_y = p[1]\n        d_x = p[0]\n        d_y = q[1] - (p[1] - q[1])\n\n        # Calculate the coordinates of the points B and C\n        b_x = p[0]\n        b_y = q[1] - (p[1] - q[1])\n        c_x = q[0] - (p[0] - q[0])\n        c_y = p[1]\n\n        # Return the coordinates of the points A, B, C, and D in sorted order\n        return [math.floor(a_x), math.floor(a_y)], [math.floor(b_x), math.floor(b_y)], [math.floor(c_x), math.floor(c_y)], [math.floor(d_x), math.floor(d_y)]", "class Solution:\n\n    def findCornerPoints(self, L, points):\n        # Calculate the coordinates of the corner points\n        x1 = 2*points[0][0] - points[1][0]\n        y1 = 2*points[0][1] - points[1][1]\n        x2 = points[1][0] - points[0][0]\n        y2 = points[1][1] - points[0][1]\n        x3 = points[1][0] - points[0][0]\n        y3 = points[1][1] - points[0][1]\n        x4 = 2*points[1][0] - points[0][0]\n        y4 = 2*points[1][1] - points[0][1]\n\n        # Return the corner points in sorted order\n        return [ [int(x1), int(y1)], [int(x2), int(y2)], [int(x3), int(y3)], [int(x4), int(y4)] ]", "import math\n\nclass Solution:\n\n    def findCornerPoints(self, L, points):\n        # Unpack the coordinates of points p and q\n        px, py = points[0]\n        qx, qy = points[1]\n\n        # Calculate the coordinates of points A, B, C, and D\n        ax, ay = px - (qx - px) / 2, py - (qy - py) / 2\n        bx, by = px + (qx - px) / 2, py - (qy - py) / 2\n        cx, cy = px - (qx - px) / 2, py + (qy - py) / 2\n        dx, dy = px + (qx - px) / 2, py + (qy - py) / 2\n\n        # Return the coordinates of points A, B, C, and D\n        return [math.floor(ax), math.floor(ay)], [math.floor(bx), math.floor(by)], \\\n               [math.floor(cx), math.floor(cy)], [math.floor(dx), math.floor(dy)]\nimport math\n\nclass Solution:\n\n    def findCornerPoints(self, L, points):\n        # Unpack the coordinates of points p and q\n        px, py = points[0]\n        qx, qy = points[1]\n\n        # Calculate the coordinates of points A, B, C, and D\n        ax, ay = px - (qx - px) / 2, py - (qy - py) / 2\n        bx, by = px + (qx - px) / 2, py - (qy - py) / 2\n        cx, cy = px - (qx - px) / 2, py + (qy - py) / 2\n        dx, dy = px + (qx - px) / 2, py + (qy - py) / 2\n\n        # Return the coordinates of points A, B, C, and D in sorted order\n        return [math.floor(min(ax, bx, cx, dx)), math.floor(min(ay, by, cy, dy))], \\\n               [math.floor(min(ax, bx, cx, dx)), math.floor(max(ay, by, cy, dy))], \\\n               [math.floor(max(ax, bx, cx, dx)), math.floor(min(ay, by, cy, dy))], \\\n               [math.floor(max(ax, bx, cx, dx)), math.floor(max(ay, by, cy, dy))]", "class Solution:\n\n    def findCornerPoints(self, L, points):\n        # Calculate the center point\n        center_x = (points[0][0] + points[1][0]) / 2\n        center_y = (points[0][1] + points[1][1]) / 2\n\n        # Calculate the corner points\n        A = [center_x - L/2, center_y - L/2]\n        B = [center_x + L/2, center_y - L/2]\n        C = [center_x + L/2, center_y + L/2]\n        D = [center_x - L/2, center_y + L/2]\n\n        # Return the corner points in sorted order\n        return sorted([[int(A[0]), int(A[1])], [int(B[0]), int(B[1])], [int(C[0]), int(C[1])], [int(D[0]), int(D[1])]])", "class Solution:\n\n    def findCornerPoints(self, L, points):\n\n        # Calculate the x and y coordinates of the midpoints\n        px, py = points[0]\n        qx, qy = points[1]\n\n        # Calculate the coordinates of the corners\n        ax = qx + (px - qx) / 2\n        ay = py + (qy - py) / 2\n        bx = qx - (qx - px) / 2\n        by = py + (qy - py) / 2\n        cx = qx + (qx - px) / 2\n        cy = py - (py - qy) / 2\n        dx = qx - (qx - px) / 2\n        dy = py - (py - qy) / 2\n\n        # Return the coordinates of the corners in sorted order\n        return [[int(ax), int(ay)], [int(bx), int(by)], [int(cx), int(cy)], [int(dx), int(dy)]]", "class Solution:\n\n    def findCornerPoints(self, L, points):\n        # Unpack the points\n        p = points[0]\n        q = points[1]\n\n        # Calculate the coordinates of the points A, B, C and D\n        Ax = p[0] - (q[0] - p[0])\n        Ay = p[1] - (q[1] - p[1])\n\n        Bx = p[0] + (q[1] - p[1])\n        By = p[1] + (q[0] - p[0])\n\n        Cx = q[0] + (q[1] - p[1])\n        Cy = q[1] - (q[0] - p[0])\n\n        Dx = q[0] - (q[1] - p[1])\n        Dy = q[1] + (q[0] - p[0])\n\n        # Return the coordinates of the points A, B, C and D in sorted order\n        return [int(Ax), int(Ay)], [int(Bx), int(By)], [int(Cx), int(Cy)], [int(Dx), int(Dy)]", "class Solution:\n\n    def findCornerPoints(self, L, points):\n        # Calculate the coordinates of points A, B, C, and D\n        p_x, p_y = points[0]\n        q_x, q_y = points[1]\n        \n        # Calculate the coordinates of point A\n        a_x = 2 * p_x - q_x\n        a_y = 2 * p_y - q_y\n        \n        # Calculate the coordinates of point B\n        b_x = 2 * q_x - p_x\n        b_y = 2 * q_y - p_y\n        \n        # Calculate the coordinates of point C\n        c_x = 2 * p_x - q_x\n        c_y = 2 * q_y - p_y\n        \n        # Calculate the coordinates of point D\n        d_x = 2 * q_x - p_x\n        d_y = 2 * p_y - q_y\n        \n        # Return the coordinates of points A, B, C, and D in sorted order\n        return [[int(a_x), int(a_y)], [int(b_x), int(b_y)], [int(c_x), int(c_y)], [int(d_x), int(d_y)]]", "class Solution:\n\n    def findCornerPoints(self, L, points):\n        # Unpack the input points\n        p, q = points\n        \n        # Calculate the coordinates of the corners\n        x1, y1 = p[0] - L / 2, p[1] - L / 2\n        x2, y2 = p[0] + L / 2, p[1] + L / 2\n        x3, y3 = q[0] - L / 2, q[1] - L / 2\n        x4, y4 = q[0] + L / 2, q[1] + L / 2\n        \n        # Return the corner points in sorted order\n        return [int(x1), int(y1)], [int(x2), int(y2)], [int(x3), int(y3)], [int(x4), int(y4)]\nclass Solution:\n\n    def findCornerPoints(self, L, points):\n        # Unpack the input points\n        p, q = points\n        \n        # Calculate the coordinates of the corners\n        x1, y1 = p[0] - L / 2, p[1] - L / 2\n        x2, y2 = p[0] + L / 2, p[1] + L / 2\n        x3, y3 = q[0] - L / 2, q[1] - L / 2\n        x4, y4 = q[0] + L / 2, q[1] + L / 2\n        \n        # Return the corner points in sorted order\n        return [[int(x1), int(y1)], [int(x2), int(y2)], [int(x3), int(y3)], [int(x4), int(y4)]]", "class Solution:\n\n    def findCornerPoints(self, L, points):\n        # Unpack the points\n        p, q = points\n        \n        # Calculate the coordinates of A, B, C, and D\n        A = (p[0] - q[0], p[1] + q[1])\n        B = (p[0] + q[0], p[1] + q[1])\n        C = (p[0] + q[0], p[1] - q[1])\n        D = (p[0] - q[0], p[1] - q[1])\n        \n        # Return the coordinates as a list in sorted order\n        return sorted([A, B, C, D], key=lambda x: (x[0], x[1]))\nsolution = Solution()\nL = 2\npoints = [[1, 0], [1, 2]]\nprint(solution.findCornerPoints(L, points))  # Output: [[0, 0], [0, 2], [2, 0], [2, 2]]\n\nL = 2.8284\npoints = [[1, 1], [-1, -1]]\nprint(solution.findCornerPoints(L, points))  # Output: [[-2, 0], [0, -2], [0, 2], [2, 0]]", "class Solution:\n\n    def findCornerPoints(self, L, points):\n\n        # Extract the x and y coordinates of the midpoints\n        p_x, p_y = points[0]\n        q_x, q_y = points[1]\n\n        # Calculate the coordinates of the corner points\n        a = (2 * p_x - q_x, 2 * p_y - q_y)\n        b = (2 * p_x - q_x, 2 * q_y - p_y)\n        c = (2 * q_x - p_x, 2 * q_y - p_y)\n        d = (2 * q_x - p_x, 2 * p_y - q_y)\n\n        # Return the coordinates of the corner points in sorted order\n        return [a, b, c, d]\nsolution = Solution()\nL = 2\npoints = [(1, 0), (1, 2)]\nprint(solution.findCornerPoints(L, points))  # Output: [(0, 0), (0, 2), (2, 0), (2, 2)]", "import math\n\nclass Solution:\n\n    def findCornerPoints(self, L, points):\n        # Unpack the midpoints\n        p, q = points\n\n        # Calculate the coordinates of the corner points\n        x1, y1 = p[0] - (q[0] - p[0]) / 2, p[1] - (q[1] - p[1]) / 2\n        x2, y2 = p[0] + (q[0] - p[0]) / 2, p[1] - (q[1] - p[1]) / 2\n        x3, y3 = p[0] + (q[0] - p[0]) / 2, p[1] + (q[1] - p[1]) / 2\n        x4, y4 = p[0] - (q[0] - p[0]) / 2, p[1] + (q[1] - p[1]) / 2\n\n        # Return the corner points in sorted order\n        return [math.floor(x1), math.floor(y1)], [math.floor(x2), math.floor(y2)], [math.floor(x3), math.floor(y3)], [math.floor(x4), math.floor(y4)]", "class Solution:\n\n    def findCornerPoints(self, L, points):\n        # Calculate the midpoint coordinates\n        mid_x1, mid_y1 = points[0]\n        mid_x2, mid_y2 = points[1]\n\n        # Calculate the x and y coordinates of the corner points\n        x1, y1 = mid_x1 - L / 2, mid_y1 - L / 2\n        x2, y2 = mid_x1 + L / 2, mid_y1 - L / 2\n        x3, y3 = mid_x2 - L / 2, mid_y2 + L / 2\n        x4, y4 = mid_x2 + L / 2, mid_y2 + L / 2\n\n        # Return the corner points in sorted order\n        return sorted([[int(x1), int(y1)], [int(x2), int(y2)], [int(x3), int(y3)], [int(x4), int(y4)]])"]}