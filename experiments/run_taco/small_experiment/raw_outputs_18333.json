{"id": 18333, "input": "Limak is going to participate in a contest on the last day of the 2016. The contest will start at 20:00 and will last four hours, exactly until midnight. There will be n problems, sorted by difficulty, i.e. problem 1 is the easiest and problem n is the hardest. Limak knows it will take him 5\u00b7i minutes to solve the i-th problem.\n\nLimak's friends organize a New Year's Eve party and Limak wants to be there at midnight or earlier. He needs k minutes to get there from his house, where he will participate in the contest first.\n\nHow many problems can Limak solve if he wants to make it to the party?\n\n\n-----Input-----\n\nThe only line of the input contains two integers n and k (1 \u2264 n \u2264 10, 1 \u2264 k \u2264 240)\u00a0\u2014 the number of the problems in the contest and the number of minutes Limak needs to get to the party from his house.\n\n\n-----Output-----\n\nPrint one integer, denoting the maximum possible number of problems Limak can solve so that he could get to the party at midnight or earlier.\n\n\n-----Examples-----\nInput\n3 222\n\nOutput\n2\n\nInput\n4 190\n\nOutput\n4\n\nInput\n7 1\n\nOutput\n7\n\n\n\n-----Note-----\n\nIn the first sample, there are 3 problems and Limak needs 222 minutes to get to the party. The three problems require 5, 10 and 15 minutes respectively. Limak can spend 5 + 10 = 15 minutes to solve first two problems. Then, at 20:15 he can leave his house to get to the party at 23:57 (after 222 minutes). In this scenario Limak would solve 2 problems. He doesn't have enough time to solve 3 problems so the answer is 2.\n\nIn the second sample, Limak can solve all 4 problems in 5 + 10 + 15 + 20 = 50 minutes. At 20:50 he will leave the house and go to the party. He will get there exactly at midnight.\n\nIn the third sample, Limak needs only 1 minute to get to the party. He has enough time to solve all 7 problems.\n", "difficulty": "EASY", "generations": [{"generated_text": "Here is a Python program that solves the problem:\n\n```python\ndef max_problems(n, k):\n    \"\"\"\n    Calculate the maximum number of problems Limak can solve\n    to make it to the party at midnight or earlier.\n\n    Args:\n    n (int): The number of problems in the contest.\n    k (int): The number of minutes Limak needs to get to the party.\n\n    Returns:\n    int: The maximum number of problems Limak can solve.\n    \"\"\"\n    # Calculate the total time available (in minutes) until midnight\n    total_time = 60 * 4 - k\n\n    # Initialize the maximum number of problems solved\n    max_solved = 0\n\n    # Iterate over each problem\n    for i in range(1, n + 1):\n        # Calculate the time required to solve the current problem\n        time_required = 5 * i\n\n        # Check if there is enough time to solve the current problem\n        if time_required <= total_time:\n            # Update the maximum number of problems solved\n            max_solved = i\n            # Update the remaining time\n            total_time -= time_required\n        else:\n            # If there is not enough time to solve the current problem,\n            # break the loop because the time required will only increase\n            break\n\n    return max_solved\n\n\n# Read the input from the user\nn, k = map(int, input().split())\n\n# Calculate and print the maximum number of problems solved\nprint(max_problems(n, k))\n```\n\nThis program defines a function `max_problems` that takes the number of problems `n` and the time required to get to the party `k` as input. It calculates the maximum number of problems Limak can solve to make it to the party at midnight or earlier.\n\nThe program iterates over each problem, calculates the time required to solve the current problem, and checks if there is enough time to solve the problem. If there is enough time, it updates the maximum number of problems solved and the remaining time. If there is not enough time, it breaks the loop because the time required will only increase.\n\nFinally, the program reads the input from the user, calculates the maximum number of problems solved, and prints the result."}, {"generated_text": "Here's a Python program that solves the problem:\n\n```python\ndef max_problems(n, k):\n    \"\"\"\n    Calculate the maximum number of problems Limak can solve to make it to the party.\n\n    Args:\n    n (int): The number of problems in the contest.\n    k (int): The number of minutes Limak needs to get to the party from his house.\n\n    Returns:\n    int: The maximum possible number of problems Limak can solve.\n    \"\"\"\n    # Calculate the total time available (4 hours = 240 minutes)\n    total_time = 240 + k\n    \n    # Initialize the maximum number of problems that can be solved\n    max_problems = 0\n    \n    # Iterate over each problem\n    for i in range(1, n + 1):\n        # Calculate the time required to solve the current problem\n        time_required = 5 * i\n        \n        # Check if there's enough time to solve the current problem\n        if total_time - time_required >= 0:\n            # Update the maximum number of problems that can be solved\n            max_problems = i\n            # Subtract the time required to solve the current problem from the total time\n            total_time -= time_required\n        else:\n            # If there's not enough time, break the loop\n            break\n    \n    return max_problems\n\n# Read the input\nn, k = map(int, input().split())\n\n# Calculate and print the result\nprint(max_problems(n, k))\n```\n\nThis program works by iterating over each problem and checking if there's enough time to solve it. If there's enough time, it updates the maximum number of problems that can be solved and subtracts the time required to solve the current problem from the total time. If there's not enough time, it breaks the loop and returns the maximum number of problems that can be solved."}, {"generated_text": "Here is a Python program that solves the problem:\n\n```python\ndef max_problems(n, k):\n    \"\"\"\n    Calculate the maximum number of problems Limak can solve to make it to the party.\n\n    Parameters:\n    n (int): The number of problems in the contest.\n    k (int): The number of minutes Limak needs to get to the party from his house.\n\n    Returns:\n    int: The maximum possible number of problems Limak can solve.\n    \"\"\"\n    # Calculate the total time available (4 hours = 240 minutes) minus the time to get to the party\n    total_time = 240 - k\n    \n    # Initialize the number of problems solved\n    problems_solved = 0\n    \n    # Iterate over each problem\n    for i in range(1, n + 1):\n        # Calculate the time to solve the current problem\n        time_to_solve = 5 * i\n        \n        # Check if there is enough time to solve the current problem\n        if time_to_solve <= total_time:\n            # Add the problem to the list of solved problems\n            problems_solved += 1\n        else:\n            # If there is not enough time, break the loop\n            break\n    \n    # Return the maximum number of problems Limak can solve\n    return problems_solved\n\n# Read the input\nn, k = map(int, input().split())\n\n# Calculate and print the result\nprint(max_problems(n, k))\n```\n\nThis program defines a function `max_problems(n, k)` that calculates the maximum number of problems Limak can solve given the number of problems `n` and the time to get to the party `k`. It then reads the input, calls the function, and prints the result.\n\nYou can run this program and input the values of `n` and `k` to get the output."}, {"generated_text": "Here's a Python program that solves the problem:\n\n```python\ndef max_problems(n, k):\n    \"\"\"\n    Calculate the maximum number of problems Limak can solve to make it to the party.\n\n    Args:\n    n (int): The number of problems in the contest.\n    k (int): The number of minutes Limak needs to get to the party from his house.\n\n    Returns:\n    int: The maximum number of problems Limak can solve.\n    \"\"\"\n    # Calculate the total time available to solve problems\n    total_time = 240 - k\n\n    # Initialize the maximum number of problems that can be solved\n    max_problems = 0\n\n    # Iterate over the possible number of problems\n    for i in range(1, n + 1):\n        # Calculate the time required to solve the current problem\n        time_required = 5 * i\n\n        # Check if the time required to solve the current problem exceeds the total time available\n        if time_required > total_time:\n            # If it does, break the loop\n            break\n\n        # Update the maximum number of problems that can be solved\n        max_problems = i\n\n    # Return the maximum number of problems that can be solved\n    return max_problems\n\n\n# Read the input from the user\nn, k = map(int, input().split())\n\n# Calculate and print the maximum number of problems that can be solved\nprint(max_problems(n, k))\n```\n\nThis program defines a function `max_problems` that takes the number of problems `n` and the time required to get to the party `k` as input, and returns the maximum number of problems that can be solved. The function iterates over the possible number of problems, calculates the time required to solve each problem, and updates the maximum number of problems that can be solved accordingly. Finally, the program reads the input from the user, calls the `max_problems` function, and prints the result."}, {"generated_text": "Here's a Python program to solve the problem:\n\n```python\ndef max_problems(n, k):\n    \"\"\"\n    Calculate the maximum number of problems Limak can solve.\n\n    Args:\n    n (int): The number of problems in the contest.\n    k (int): The number of minutes Limak needs to get to the party from his house.\n\n    Returns:\n    int: The maximum possible number of problems Limak can solve.\n    \"\"\"\n    # Calculate the total time available to solve problems\n    total_time = 60 * 4 - k  # 4 hours in minutes\n\n    # Initialize the maximum number of problems that can be solved\n    max_problems = 0\n\n    # Iterate over each problem\n    for i in range(1, n + 1):\n        # Calculate the time required to solve the current problem\n        time_required = 5 * i\n\n        # Check if there's enough time to solve the current problem\n        if total_time >= time_required:\n            # Update the maximum number of problems that can be solved\n            max_problems = i\n            # Update the remaining time\n            total_time -= time_required\n        else:\n            # If there's not enough time, break the loop\n            break\n\n    return max_problems\n\n\n# Test the function with examples\nprint(max_problems(3, 222))  # Output: 2\nprint(max_problems(4, 190))  # Output: 4\nprint(max_problems(7, 1))    # Output: 7\n```\n\nThis program defines a function `max_problems(n, k)` that calculates the maximum number of problems Limak can solve. It iterates over each problem, calculates the time required to solve it, and checks if there's enough time to solve the problem. If there's enough time, it updates the maximum number of problems that can be solved and the remaining time. If there's not enough time, it breaks the loop. The function returns the maximum number of problems that can be solved."}, {"generated_text": "Here's a Python program to solve the problem:\n\n```python\ndef solve_problems(n, k):\n    \"\"\"\n    Calculate the maximum number of problems Limak can solve.\n\n    Args:\n    n (int): The number of problems in the contest.\n    k (int): The number of minutes Limak needs to get to the party from his house.\n\n    Returns:\n    int: The maximum possible number of problems Limak can solve.\n    \"\"\"\n    # Calculate the total time available for solving problems\n    total_time = 60 * 4 - k  # 4 hours minus the time needed to get to the party\n\n    # Initialize the number of problems solved\n    problems_solved = 0\n\n    # Iterate over each problem\n    for i in range(1, n + 1):\n        # Calculate the time needed to solve the current problem\n        time_needed = 5 * i\n\n        # Check if there is enough time to solve the current problem\n        if total_time >= time_needed:\n            # Update the number of problems solved\n            problems_solved = i\n            # Update the remaining time\n            total_time -= time_needed\n        else:\n            # If there is not enough time to solve the current problem, break the loop\n            break\n\n    return problems_solved\n\n\n# Read the input from the user\nn, k = map(int, input().split())\n\n# Print the result\nprint(solve_problems(n, k))\n```\n\nThis program works by first calculating the total time available for solving problems. It then iterates over each problem, calculating the time needed to solve the current problem and checking if there is enough time to solve it. If there is enough time, it updates the number of problems solved and the remaining time. If there is not enough time to solve the current problem, it breaks the loop and returns the number of problems solved."}, {"generated_text": "Here is a Python program that solves the problem:\n\n```python\ndef max_problems(n, k):\n    \"\"\"\n    Calculate the maximum number of problems Limak can solve.\n\n    Args:\n    n (int): The number of problems in the contest.\n    k (int): The number of minutes Limak needs to get to the party.\n\n    Returns:\n    int: The maximum possible number of problems Limak can solve.\n    \"\"\"\n    # Calculate the total time available to solve problems\n    total_time = 60 * 4 - k  # 4 hours minus the time to get to the party\n\n    # Initialize the number of problems solved\n    problems_solved = 0\n\n    # Iterate over each problem\n    for i in range(1, n + 1):\n        # Calculate the time required to solve the current problem\n        time_required = 5 * i\n\n        # Check if there is enough time to solve the current problem\n        if time_required <= total_time:\n            # Add the current problem to the number of problems solved\n            problems_solved += 1\n            # Update the total time available\n            total_time -= time_required\n        else:\n            # If there is not enough time to solve the current problem, break the loop\n            break\n\n    return problems_solved\n\n\n# Read the input from the user\nn, k = map(int, input().split())\n\n# Calculate and print the result\nresult = max_problems(n, k)\nprint(result)\n```\n\nThis program defines a function `max_problems(n, k)` that calculates the maximum number of problems Limak can solve given the number of problems `n` and the time required to get to the party `k`. The function iterates over each problem, calculates the time required to solve it, and checks if there is enough time to solve the problem. If there is enough time, the problem is added to the number of problems solved, and the total time available is updated. The function returns the maximum number of problems Limak can solve.\n\nThe program then reads the input from the user, calls the `max_problems(n, k)` function, and prints the result."}, {"generated_text": "Here's a Python program that will solve the problem:\n\n```python\ndef max_problems(n, k):\n    \"\"\"\n    Calculate the maximum number of problems Limak can solve.\n\n    Args:\n        n (int): The number of problems in the contest.\n        k (int): The number of minutes Limak needs to get to the party from his house.\n\n    Returns:\n        int: The maximum possible number of problems Limak can solve.\n    \"\"\"\n    # Calculate the total time available for solving problems\n    total_time = 60 * 4 - k\n\n    # Initialize the maximum number of problems that can be solved\n    max_problems = 0\n\n    # Iterate over each problem\n    for i in range(1, n + 1):\n        # Calculate the time required to solve the current problem\n        time_required = 5 * i\n\n        # Check if the time required to solve the current problem is within the total time available\n        if time_required <= total_time:\n            # Update the maximum number of problems that can be solved\n            max_problems = i\n            # Update the remaining time available\n            total_time -= time_required\n        else:\n            # If the time required to solve the current problem exceeds the total time available, break the loop\n            break\n\n    return max_problems\n\n\n# Read input from the user\nn, k = map(int, input().split())\n\n# Calculate and print the maximum number of problems that can be solved\nprint(max_problems(n, k))\n```\n\nThis program defines a function `max_problems` that takes the number of problems `n` and the time required to get to the party `k` as input. It calculates the maximum number of problems that can be solved by iterating over each problem and checking if the time required to solve the current problem is within the total time available. The function returns the maximum number of problems that can be solved.\n\nThe program then reads input from the user, calls the `max_problems` function with the input values, and prints the result."}, {"generated_text": "Here's a Python program that solves the problem:\n\n```python\ndef max_problems(n, k):\n    \"\"\"\n    Calculate the maximum number of problems Limak can solve to make it to the party on time.\n\n    Args:\n    n (int): The number of problems in the contest.\n    k (int): The number of minutes Limak needs to get to the party from his house.\n\n    Returns:\n    int: The maximum possible number of problems Limak can solve.\n    \"\"\"\n    # Calculate the total time available (in minutes) from 20:00 to midnight\n    total_time = 60 * 4\n\n    # Calculate the time Limak needs to spend on problems to solve as many as possible\n    time_for_problems = total_time - k\n\n    # Initialize the number of problems solved to 0\n    problems_solved = 0\n\n    # Iterate over the number of problems\n    for i in range(1, n + 1):\n        # Calculate the time needed to solve the current problem\n        time_needed = 5 * i\n\n        # Check if there is enough time to solve the current problem\n        if time_needed <= time_for_problems:\n            # Update the time available for problems\n            time_for_problems -= time_needed\n            # Increment the number of problems solved\n            problems_solved += 1\n        else:\n            # If there is not enough time, break the loop\n            break\n\n    # Return the maximum number of problems that can be solved\n    return problems_solved\n\n# Read the input\nn, k = map(int, input().split())\n\n# Print the result\nprint(max_problems(n, k))\n```\n\nThis program works by first calculating the total time available from 20:00 to midnight. It then calculates the time Limak needs to spend on problems to solve as many as possible. It iterates over the number of problems, calculating the time needed to solve each problem and checking if there is enough time to solve it. If there is enough time, it updates the time available for problems and increments the number of problems solved. If there is not enough time, it breaks the loop and returns the maximum number of problems that can be solved."}, {"generated_text": "Here's a Python program to solve the problem:\n\n```python\ndef limak_problems(n, k):\n    \"\"\"\n    Calculate the maximum number of problems Limak can solve to get to the party on time.\n\n    Args:\n        n (int): The number of problems in the contest.\n        k (int): The number of minutes Limak needs to get to the party from his house.\n\n    Returns:\n        int: The maximum number of problems Limak can solve.\n    \"\"\"\n    # Calculate the total time available for solving problems\n    total_time = 60 * 4 - k\n    \n    # Initialize the number of problems solved to 0\n    problems_solved = 0\n    \n    # Initialize the total time spent solving problems to 0\n    time_spent = 0\n    \n    # Iterate over the problems\n    for i in range(1, n + 1):\n        # Calculate the time it takes to solve the current problem\n        time_to_solve = 5 * i\n        \n        # Check if there's enough time to solve the current problem\n        if time_spent + time_to_solve <= total_time:\n            # Add the time it takes to solve the current problem to the total time spent\n            time_spent += time_to_solve\n            \n            # Increment the number of problems solved\n            problems_solved += 1\n        else:\n            # If there's not enough time to solve the current problem, break the loop\n            break\n    \n    # Return the maximum number of problems Limak can solve\n    return problems_solved\n\n# Get the input from the user\nn, k = map(int, input().split())\n\n# Print the result\nprint(limak_problems(n, k))\n```\n\nThis program works by iterating over the problems and calculating the time it takes to solve each one. If there's enough time to solve the current problem, it adds the time it takes to solve the problem to the total time spent and increments the number of problems solved. If there's not enough time to solve the current problem, it breaks the loop and returns the maximum number of problems Limak can solve."}, {"generated_text": "Here's a Python program that solves the problem:\n\n```python\ndef max_problems(n, k):\n    \"\"\"\n    Calculate the maximum number of problems Limak can solve.\n\n    Args:\n    n (int): The number of problems.\n    k (int): The time it takes to get to the party from Limak's house.\n\n    Returns:\n    int: The maximum number of problems Limak can solve.\n    \"\"\"\n    # Calculate the total time available\n    total_time = 60 * 4 - k  # 4 hours is 240 minutes, subtract k to get the available time\n\n    # Initialize the number of problems solved\n    problems_solved = 0\n\n    # Iterate over the problems\n    for i in range(1, n + 1):\n        # Calculate the time it takes to solve the current problem\n        time_to_solve = 5 * i\n\n        # Check if there is enough time to solve the current problem\n        if total_time >= time_to_solve:\n            # If there is enough time, increment the number of problems solved\n            problems_solved += 1\n            # Subtract the time it took to solve the current problem from the total time\n            total_time -= time_to_solve\n        else:\n            # If there is not enough time, break the loop\n            break\n\n    return problems_solved\n\n\n# Read the input\nn, k = map(int, input().split())\n\n# Print the result\nprint(max_problems(n, k))\n```\n\nThis program defines a function `max_problems(n, k)` that calculates the maximum number of problems Limak can solve. It then reads the input, calls the function with the input values, and prints the result. The function works by iterating over the problems, calculating the time it takes to solve each one, and checking if there is enough time to solve it. If there is enough time, it increments the number of problems solved and subtracts the time it took to solve the problem from the total time. If there is not enough time, it breaks the loop and returns the number of problems solved."}, {"generated_text": "Here is a Python program that solves the problem:\n\n```python\ndef max_problems(n, k):\n    \"\"\"\n    Calculate the maximum number of problems Limak can solve.\n\n    Args:\n    n (int): The number of problems in the contest.\n    k (int): The number of minutes Limak needs to get to the party from his house.\n\n    Returns:\n    int: The maximum possible number of problems Limak can solve.\n    \"\"\"\n    # Calculate the total time available to solve problems\n    total_time = 60 * 4 - k  # 4 hours in minutes\n\n    # Calculate the maximum number of problems that can be solved\n    max_problems = 0\n    while total_time >= 5 * (max_problems + 1):\n        max_problems += 1\n\n    return max_problems\n\n# Get the input from the user\nn, k = map(int, input().split())\n\n# Calculate and print the result\nresult = max_problems(n, k)\nprint(result)\n```\n\nThis program works by first calculating the total time available to solve problems, which is the time from 20:00 to midnight minus the time it takes to get to the party. It then calculates the maximum number of problems that can be solved in this time by repeatedly adding 1 to the number of problems and checking if the total time is still greater than or equal to the time it takes to solve the next problem. The result is then printed to the console."}, {"generated_text": "Here's a Python program that solves the problem:\n\n```python\ndef solve_problems(n, k):\n    # Calculate the total time available\n    total_time = 60 * 4 - k  # 4 hours minus the time it takes to get to the party\n\n    # Initialize the maximum number of problems that can be solved\n    max_problems = 0\n\n    # Iterate over the number of problems\n    for i in range(1, n + 1):\n        # Calculate the time it takes to solve the current problem\n        time_to_solve = 5 * i\n\n        # Check if there's enough time to solve the current problem\n        if total_time - time_to_solve >= 0:\n            # Update the maximum number of problems that can be solved\n            max_problems = i\n            # Update the remaining time\n            total_time -= time_to_solve\n        else:\n            # If there's not enough time to solve the current problem, break the loop\n            break\n\n    return max_problems\n\n\n# Read the input\nn, k = map(int, input().split())\n\n# Print the result\nprint(solve_problems(n, k))\n```\n\nThis program calculates the maximum number of problems that Limak can solve by iterating over the number of problems and checking if there's enough time to solve each problem. If there's enough time, it updates the maximum number of problems that can be solved and subtracts the time it takes to solve the current problem from the remaining time. If there's not enough time to solve the current problem, it breaks the loop and returns the maximum number of problems that can be solved."}, {"generated_text": "Here is a Python program that solves the problem:\n\n```python\ndef max_problems(n, k):\n    \"\"\"\n    Calculate the maximum number of problems Limak can solve.\n\n    Args:\n    n (int): The number of problems in the contest.\n    k (int): The number of minutes Limak needs to get to the party from his house.\n\n    Returns:\n    int: The maximum possible number of problems Limak can solve.\n    \"\"\"\n    total_time = 240 + k  # Total time available (midnight to party)\n    total_time_in_minutes = total_time * 60  # Convert hours to minutes\n\n    # Calculate the total time required to solve all problems\n    total_time_required = 0\n    for i in range(1, n + 1):\n        total_time_required += 5 * i\n\n    # Calculate the maximum number of problems that can be solved\n    max_problems = 0\n    while total_time_in_minutes >= total_time_required:\n        max_problems += 1\n        total_time_in_minutes -= 5 * (max_problems)\n        total_time_required -= 5 * max_problems\n\n    return max_problems\n\n# Read input from user\nn, k = map(int, input().split())\n\n# Calculate and print the result\nresult = max_problems(n, k)\nprint(result)\n```\n\nThis program first calculates the total time available to Limak, which is the time from midnight to the party. It then calculates the total time required to solve all problems. The maximum number of problems that can be solved is then calculated by subtracting the time required to solve each problem from the total time available, until there is not enough time to solve any more problems. The result is then printed to the console."}, {"generated_text": "Here's a Python program to solve the problem:\n\n```python\ndef max_problems(n, k):\n    \"\"\"\n    Calculate the maximum number of problems Limak can solve.\n\n    Args:\n    n (int): The number of problems in the contest.\n    k (int): The number of minutes Limak needs to get to the party from his house.\n\n    Returns:\n    int: The maximum possible number of problems Limak can solve.\n    \"\"\"\n    # Calculate the total time available\n    total_time = 60 * 4 - k  # 4 hours in minutes\n\n    # Initialize the number of problems solved\n    problems_solved = 0\n\n    # Iterate over the problems\n    for i in range(1, n + 1):\n        # Calculate the time required to solve the current problem\n        time_required = 5 * i\n\n        # Check if there is enough time to solve the current problem\n        if time_required <= total_time:\n            # Add the problem to the list of problems solved\n            problems_solved += 1\n            # Update the remaining time\n            total_time -= time_required\n        else:\n            # If there is not enough time, break the loop\n            break\n\n    return problems_solved\n\n# Read the input\nn, k = map(int, input().split())\n\n# Print the result\nprint(max_problems(n, k))\n```\n\nThis program works by iterating over the problems and calculating the time required to solve each one. It keeps track of the number of problems solved and the remaining time. If there is not enough time to solve the current problem, it breaks the loop and returns the number of problems solved."}, {"generated_text": "Here's a Python program that solves the problem:\n\n```python\ndef limak_problems(n, k):\n    \"\"\"\n    Calculate the maximum number of problems Limak can solve.\n\n    Args:\n    n (int): The number of problems in the contest.\n    k (int): The number of minutes Limak needs to get to the party from his house.\n\n    Returns:\n    int: The maximum number of problems Limak can solve.\n    \"\"\"\n    # Calculate the total time available (23:59 - 20:00 = 3 hours 59 minutes = 239 minutes)\n    total_time = 239\n\n    # Add the time needed to get to the party\n    total_time -= k\n\n    # Initialize the number of problems solved\n    problems_solved = 0\n\n    # Iterate over the problems\n    for i in range(1, n + 1):\n        # Calculate the time needed to solve the current problem\n        time_needed = 5 * i\n\n        # Check if there is enough time to solve the current problem\n        if time_needed <= total_time:\n            # Add the current problem to the list of solved problems\n            problems_solved += 1\n            # Subtract the time needed to solve the current problem from the total time\n            total_time -= time_needed\n        else:\n            # If there is not enough time to solve the current problem, break the loop\n            break\n\n    return problems_solved\n\n# Test the function with the provided examples\nprint(limak_problems(3, 222))  # Output: 2\nprint(limak_problems(4, 190))  # Output: 4\nprint(limak_problems(7, 1))    # Output: 7\n```\n\nThis program defines a function `limak_problems` that takes two arguments: `n` (the number of problems) and `k` (the time needed to get to the party). It calculates the maximum number of problems Limak can solve by iterating over the problems and checking if there is enough time to solve each one. The function returns the maximum number of problems that can be solved. The program then tests the function with the provided examples."}, {"generated_text": "Here is a Python program that solves the problem:\n\n```python\ndef max_problems(n, k):\n    \"\"\"\n    Calculate the maximum number of problems Limak can solve.\n\n    Args:\n        n (int): The number of problems in the contest.\n        k (int): The number of minutes Limak needs to get to the party from his house.\n\n    Returns:\n        int: The maximum number of problems Limak can solve.\n    \"\"\"\n    # Calculate the total time available to solve problems\n    total_time = 60 * 4 - k  # 4 hours = 240 minutes, subtract k minutes to get to midnight\n\n    # Initialize the count of problems solved\n    problems_solved = 0\n\n    # Iterate over each problem\n    for i in range(1, n + 1):\n        # Calculate the time required to solve the current problem\n        time_required = 5 * i\n\n        # Check if there is enough time to solve the current problem\n        if time_required <= total_time:\n            # Add the current problem to the count of problems solved\n            problems_solved += 1\n            # Update the total time available\n            total_time -= time_required\n        else:\n            # If there is not enough time to solve the current problem, break the loop\n            break\n\n    return problems_solved\n\n\n# Read the input from the user\nn, k = map(int, input().split())\n\n# Calculate and print the maximum number of problems Limak can solve\nprint(max_problems(n, k))\n```\n\nThis program first calculates the total time available to solve problems, which is 4 hours (240 minutes) minus the time it takes to get to the party. It then iterates over each problem, calculating the time required to solve the current problem and checking if there is enough time to solve it. If there is enough time, the program adds the current problem to the count of problems solved and updates the total time available. If there is not enough time to solve the current problem, the program breaks the loop and returns the count of problems solved."}, {"generated_text": "Here is a Python program to solve the problem:\n\n```python\ndef max_problems(n, k):\n    \"\"\"\n    Calculate the maximum number of problems Limak can solve to make it to the party on time.\n\n    Args:\n    n (int): The number of problems in the contest.\n    k (int): The number of minutes Limak needs to get to the party from his house.\n\n    Returns:\n    int: The maximum possible number of problems Limak can solve.\n    \"\"\"\n    # Calculate the total time available for solving problems\n    total_time = 60 * 4 - k\n    \n    # Initialize the maximum number of problems that can be solved\n    max_problems = 0\n    \n    # Iterate over the number of problems\n    for i in range(1, n + 1):\n        # Calculate the time required to solve the current problem\n        time_required = 5 * i\n        \n        # Check if the time required to solve the current problem is within the total available time\n        if time_required <= total_time:\n            # Update the maximum number of problems that can be solved\n            max_problems = i\n            # Update the remaining time\n            total_time -= time_required\n        else:\n            # If the time required to solve the current problem exceeds the total available time, break the loop\n            break\n    \n    return max_problems\n\n# Get the input values\nn, k = map(int, input().split())\n\n# Calculate and print the maximum number of problems that can be solved\nprint(max_problems(n, k))\n```\n\nThis program takes the number of problems `n` and the time required to get to the party `k` as input, calculates the maximum number of problems that can be solved to make it to the party on time, and prints the result."}, {"generated_text": "Here is a Python program that solves the problem:\n\n```python\ndef max_problems(n, k):\n    \"\"\"\n    Calculate the maximum number of problems Limak can solve.\n\n    Parameters:\n    n (int): The number of problems.\n    k (int): The time Limak needs to get to the party from his house.\n\n    Returns:\n    int: The maximum number of problems Limak can solve.\n    \"\"\"\n    max_time = 240 - k  # Maximum time available to solve problems\n    time_per_problem = 5  # Time it takes to solve each problem\n    return min(n, max_time // time_per_problem)  # Return the minimum of the number of problems and the maximum time available divided by the time per problem\n\n\n# Get the input from the user\nn, k = map(int, input().split())\n\n# Calculate and print the result\nresult = max_problems(n, k)\nprint(result)\n```\n\nThis program defines a function `max_problems` that takes the number of problems `n` and the time Limak needs to get to the party `k` as input. It calculates the maximum time available to solve problems by subtracting `k` from 240 (the total time available until midnight). It then divides this time by the time it takes to solve each problem (`time_per_problem`) and returns the minimum of this value and the number of problems `n`. This ensures that Limak does not try to solve more problems than he has time for.\n\nThe program then gets the input from the user, calls the `max_problems` function with this input, and prints the result."}, {"generated_text": "Here is a Python program that solves the problem:\n\n```python\ndef max_problems(n, k):\n    \"\"\"\n    Calculate the maximum number of problems Limak can solve to make it to the party.\n\n    Parameters:\n    n (int): The number of problems in the contest.\n    k (int): The number of minutes Limak needs to get to the party from his house.\n\n    Returns:\n    int: The maximum possible number of problems Limak can solve.\n    \"\"\"\n    # The contest lasts for 240 minutes (from 20:00 to 00:00)\n    contest_duration = 240\n    # The time Limak needs to get to the party\n    party_time = k\n\n    # Calculate the maximum number of problems Limak can solve\n    max_solved = min(n, (party_time - 1) // 5 + 1)\n\n    return max_solved\n\n\n# Read input from the user\nn, k = map(int, input().split())\n\n# Calculate and print the result\nresult = max_problems(n, k)\nprint(result)\n```\n\nThis program first calculates the maximum number of problems Limak can solve by dividing the time he has to get to the party by the time it takes to solve each problem. It then returns the minimum of this value and the total number of problems, as Limak cannot solve more problems than there are."}]}