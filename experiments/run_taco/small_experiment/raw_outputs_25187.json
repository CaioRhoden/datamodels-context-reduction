{"id": 25187, "input": "Given a function that takes a binary string. The task is to return the longest size of contiguous substring containing only \u20181\u2019.\nInput:\nThe first line of input contains an integer T denoting the no of test cases.Then T test cases follow. Each test case contains a string S.\nOutput:\nFor each test case return the maximum length of required sub string.\nConstraints: \n1<=T<=100\n1<=|string length|<=10^{4}\nExample:\nInput:\n2\n110\n11101110\nOutput:\n2\n3\n#User function Template for python3\n\n\n\ndef maxlength(s):\n\n    \n\n    #add code here", "difficulty": "EASY", "generations": [{"generated_text": "Here is a Python program that solves the problem using a simple iterative approach.\n\n```python\ndef maxlength(s):\n    \"\"\"\n    This function takes a binary string as input and returns the longest size of contiguous substring containing only '1'.\n\n    Args:\n        s (str): A binary string containing '0's and '1's.\n\n    Returns:\n        int: The maximum length of contiguous substring containing only '1'.\n    \"\"\"\n    \n    # Initialize the maximum length and current length to 0\n    max_length = 0\n    current_length = 0\n    \n    # Iterate over each character in the string\n    for char in s:\n        # If the character is '1', increment the current length\n        if char == '1':\n            current_length += 1\n        # If the character is '0', reset the current length to 0\n        else:\n            current_length = 0\n        \n        # Update the maximum length if the current length is greater\n        max_length = max(max_length, current_length)\n    \n    # Return the maximum length\n    return max_length\n\n# Test cases\nfor _ in range(int(input())):\n    s = input()\n    print(maxlength(s))\n```\n\nThis program defines a function `maxlength` that takes a binary string `s` as input and returns the longest size of contiguous substring containing only '1'. It uses a simple iterative approach to keep track of the maximum length and the current length of contiguous '1's. The maximum length is updated whenever the current length is greater. The program then reads the number of test cases and the input strings, and prints the maximum length for each string.\n\nFor example, given the input:\n\n```\n2\n110\n11101110\n```\n\nThe program will output:\n\n```\n2\n3\n```"}, {"generated_text": "Here's a Python program that solves the problem using a simple iterative approach.\n\n```python\ndef maxlength(s):\n    \"\"\"\n    This function takes a binary string as input and returns the length of the longest contiguous substring containing only '1'.\n\n    Parameters:\n    s (str): A binary string containing only '0' and '1'.\n\n    Returns:\n    int: The length of the longest contiguous substring containing only '1'.\n    \"\"\"\n    max_length = 0  # Initialize the maximum length to 0\n    current_length = 0  # Initialize the current length to 0\n\n    for char in s:  # Iterate over each character in the string\n        if char == '1':  # If the character is '1'\n            current_length += 1  # Increment the current length\n            max_length = max(max_length, current_length)  # Update the maximum length if necessary\n        else:\n            current_length = 0  # Reset the current length if the character is '0'\n\n    return max_length  # Return the maximum length\n\n# User function Template for python3\nt = int(input())  # Read the number of test cases\nfor _ in range(t):\n    s = input()  # Read the binary string for each test case\n    print(maxlength(s))  # Print the maximum length for each test case\n```\n\nThis program works by iterating over each character in the input string. If the character is '1', it increments the current length and updates the maximum length if necessary. If the character is '0', it resets the current length. Finally, it returns the maximum length found.\n\nThis solution has a time complexity of O(n), where n is the length of the input string, and a space complexity of O(1), since it only uses a constant amount of space to store the maximum length and the current length."}, {"generated_text": "Here is a Python program that solves the problem:\n\n```python\ndef maxlength(s):\n    \"\"\"\n    This function takes a binary string as input and returns the longest size of contiguous substring containing only '1'.\n\n    Args:\n        s (str): A binary string.\n\n    Returns:\n        int: The longest size of contiguous substring containing only '1'.\n    \"\"\"\n    max_length = 0  # Initialize max_length to 0\n    current_length = 0  # Initialize current_length to 0\n\n    for char in s:  # Iterate over each character in the string\n        if char == '1':  # If the character is '1'\n            current_length += 1  # Increment current_length by 1\n            max_length = max(max_length, current_length)  # Update max_length if current_length is greater\n        else:\n            current_length = 0  # Reset current_length to 0 when a '0' is encountered\n\n    return max_length  # Return the maximum length of contiguous substring containing only '1'\n\n# Test the function\nt = int(input())  # Read the number of test cases\nfor _ in range(t):\n    s = input()  # Read the binary string\n    print(maxlength(s))  # Print the result\n```\n\nThis program works by iterating over each character in the input string. If the character is '1', it increments the current length and updates the maximum length if necessary. If the character is '0', it resets the current length to 0. Finally, it returns the maximum length of contiguous substring containing only '1'."}, {"generated_text": "Here is the Python program that solves the problem:\n\n```python\ndef maxlength(s):\n    \"\"\"\n    This function returns the maximum length of contiguous substring containing only '1'.\n\n    Args:\n        s (str): A binary string.\n\n    Returns:\n        int: The maximum length of contiguous substring containing only '1'.\n    \"\"\"\n    max_length = 0\n    current_length = 0\n\n    # Iterate over each character in the string\n    for char in s:\n        # If the character is '1', increment the current length\n        if char == '1':\n            current_length += 1\n            # Update the maximum length if the current length is greater\n            max_length = max(max_length, current_length)\n        # If the character is '0', reset the current length\n        else:\n            current_length = 0\n\n    return max_length\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    # Read the binary string\n    s = input()\n    # Print the maximum length of contiguous substring containing only '1'\n    print(maxlength(s))\n```\n\nIn this program, we initialize two variables, `max_length` and `current_length`, to keep track of the maximum length of contiguous substring containing only '1' and the current length of such substring, respectively. We then iterate over each character in the input string. If the character is '1', we increment the `current_length` and update `max_length` if `current_length` is greater. If the character is '0', we reset `current_length` to 0. Finally, we print the maximum length of contiguous substring containing only '1' for each test case."}, {"generated_text": "Here's the Python program to solve the problem:\n\n```python\ndef maxlength(s):\n    \"\"\"\n    This function takes a binary string as input and returns the longest size of contiguous substring containing only '1'.\n\n    Parameters:\n    s (str): A binary string.\n\n    Returns:\n    int: The longest size of contiguous substring containing only '1'.\n    \"\"\"\n    max_len = 0  # Initialize the maximum length of contiguous substring\n    current_len = 0  # Initialize the current length of contiguous substring\n\n    for char in s:  # Iterate over each character in the string\n        if char == '1':  # If the character is '1'\n            current_len += 1  # Increase the current length of contiguous substring\n            max_len = max(max_len, current_len)  # Update the maximum length\n        else:\n            current_len = 0  # Reset the current length of contiguous substring\n\n    return max_len  # Return the maximum length of contiguous substring\n\n# User function Template for python3\nif __name__ == \"__main__\":\n    t = int(input())  # Read the number of test cases\n\n    for _ in range(t):\n        s = input()  # Read the binary string\n        print(maxlength(s))  # Print the maximum length of contiguous substring\n```\n\nThis program works by iterating over each character in the binary string. If the character is '1', it increases the current length of contiguous substring and updates the maximum length if necessary. If the character is '0', it resets the current length of contiguous substring. Finally, it returns the maximum length of contiguous substring.\n\nFor example, if the input is \"110\", the program will output 2 because the longest contiguous substring containing only '1' is \"11\". If the input is \"11101110\", the program will output 3 because the longest contiguous substring containing only '1' is \"111\"."}, {"generated_text": "Here's a Python program that uses a simple iterative approach to solve the problem.\n\n```python\ndef maxlength(s):\n    \"\"\"\n    This function takes a binary string as input and returns the length of the longest contiguous substring containing only '1'.\n\n    Parameters:\n    s (str): A binary string.\n\n    Returns:\n    int: The length of the longest contiguous substring containing only '1'.\n    \"\"\"\n    max_len = 0  # Initialize max_len to 0\n    curr_len = 0  # Initialize curr_len to 0\n\n    for char in s:  # Iterate over each character in the string\n        if char == '1':  # If the character is '1'\n            curr_len += 1  # Increment curr_len by 1\n            max_len = max(max_len, curr_len)  # Update max_len if curr_len is greater\n        else:\n            curr_len = 0  # Reset curr_len to 0 if the character is not '1'\n\n    return max_len  # Return the maximum length\n\n# User function Template for python3\nfor _ in range(int(input())):\n    s = input()\n    print(maxlength(s))\n```\n\nThis program works by iterating over each character in the input string. If the character is '1', it increments the current length (`curr_len`) by 1 and updates the maximum length (`max_len`) if `curr_len` is greater. If the character is not '1', it resets `curr_len` to 0. Finally, it returns the maximum length.\n\nFor example, given the input string \"11101110\", the program will output 3 because the longest contiguous substring containing only '1' is \"111\"."}, {"generated_text": "Here is a Python program that uses a simple iterative approach to solve the problem. This program iterates over the binary string and keeps track of the current length of contiguous '1's and the maximum length encountered so far.\n\n```python\ndef maxlength(s):\n    \"\"\"\n    This function returns the longest size of contiguous substring containing only '1'.\n\n    Args:\n    s (str): A binary string.\n\n    Returns:\n    int: The maximum length of contiguous '1's in the string.\n    \"\"\"\n    max_len = 0  # Initialize max_len to 0\n    curr_len = 0  # Initialize curr_len to 0\n\n    for char in s:  # Iterate over each character in the string\n        if char == '1':  # If the character is '1'\n            curr_len += 1  # Increment curr_len by 1\n            max_len = max(max_len, curr_len)  # Update max_len if curr_len is greater\n        else:\n            curr_len = 0  # Reset curr_len to 0 if the character is '0'\n\n    return max_len  # Return the maximum length of contiguous '1's\n\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    # Read the binary string\n    s = input()\n\n    # Calculate and print the maximum length of contiguous '1's\n    print(maxlength(s))\n```\n\nThis program defines a function `maxlength` that takes a binary string `s` as input and returns the maximum length of contiguous '1's in the string. It then reads the number of test cases `t` and processes each test case by reading the binary string and printing the maximum length of contiguous '1's.\n\nYou can run this program with the provided example inputs to see the output.\n\nExample usage:\n\n```\n2\n110\n11101110\n```\n\nOutput:\n\n```\n2\n3\n```"}, {"generated_text": "Here is a Python program that solves the problem using the concept of dynamic programming.\n\n```python\ndef maxlength(s):\n    \"\"\"\n    This function takes a binary string as input and returns the maximum length of contiguous substring containing only '1'.\n\n    Parameters:\n    s (str): A binary string.\n\n    Returns:\n    int: The maximum length of contiguous substring containing only '1'.\n    \"\"\"\n    max_length = 0  # Initialize the maximum length to 0\n    current_length = 0  # Initialize the current length to 0\n\n    for char in s:  # Iterate over each character in the string\n        if char == '1':  # If the character is '1'\n            current_length += 1  # Increment the current length\n            max_length = max(max_length, current_length)  # Update the maximum length\n        else:\n            current_length = 0  # Reset the current length to 0\n\n    return max_length  # Return the maximum length\n\n\n# Driver code\nif __name__ == \"__main__\":\n    t = int(input())  # Read the number of test cases\n\n    for _ in range(t):\n        s = input()  # Read the binary string\n        print(maxlength(s))  # Print the maximum length\n```\n\n**Explanation:**\n\n*   We initialize two variables: `max_length` to store the maximum length of contiguous substring containing only '1' and `current_length` to store the current length of contiguous substring containing only '1'.\n*   We iterate over each character in the string. If the character is '1', we increment the `current_length` and update the `max_length` if the `current_length` is greater than the `max_length`.\n*   If the character is '0', we reset the `current_length` to 0.\n*   Finally, we return the `max_length` as the result.\n\n**Example Use Cases:**\n\n*   Input: `110`\n    Output: `2`\n*   Input: `11101110`\n    Output: `3`\n\nThis program has a time complexity of O(n), where n is the length of the input string, and a space complexity of O(1), as it only uses a constant amount of space to store the maximum length and the current length."}, {"generated_text": "Here is a Python program that solves the problem using the `max` function with a generator expression to find the maximum length of contiguous '1's in a binary string.\n\n```python\ndef maxlength(s):\n    \"\"\"\n    This function returns the maximum length of contiguous '1's in a binary string.\n\n    Parameters:\n    s (str): A binary string.\n\n    Returns:\n    int: The maximum length of contiguous '1's.\n    \"\"\"\n    \n    # Initialize the maximum length and current length to 0\n    max_length = 0\n    current_length = 0\n    \n    # Iterate over each character in the string\n    for char in s:\n        # If the character is '1', increment the current length\n        if char == '1':\n            current_length += 1\n        # If the character is '0', reset the current length\n        else:\n            current_length = 0\n        \n        # Update the maximum length if the current length is greater\n        max_length = max(max_length, current_length)\n    \n    # Return the maximum length\n    return max_length\n\n# Test the function\nfor _ in range(int(input())):\n    s = input()\n    print(maxlength(s))\n```\n\nThis program works by iterating over each character in the input string. If the character is '1', it increments the current length of contiguous '1's. If the character is '0', it resets the current length to 0. It keeps track of the maximum length seen so far and returns it at the end. The time complexity of this program is O(n), where n is the length of the input string."}, {"generated_text": "Here's a Python solution for the problem. This solution uses a simple approach by iterating over the binary string and keeping track of the maximum length of contiguous '1's.\n\n```python\ndef maxlength(s):\n    \"\"\"\n    Returns the longest size of contiguous substring containing only '1'.\n\n    Args:\n        s (str): A binary string.\n\n    Returns:\n        int: The maximum length of contiguous '1's.\n    \"\"\"\n    max_len = 0\n    curr_len = 0\n\n    # Iterate over the binary string\n    for char in s:\n        # If the current character is '1', increment the current length\n        if char == '1':\n            curr_len += 1\n        # If the current character is '0', reset the current length\n        else:\n            curr_len = 0\n\n        # Update the maximum length\n        max_len = max(max_len, curr_len)\n\n    return max_len\n\n# Test the function\nfor _ in range(int(input())):\n    s = input()\n    print(maxlength(s))\n```\n\nIn this code:\n\n1. We initialize two variables, `max_len` and `curr_len`, to keep track of the maximum length and the current length of contiguous '1's, respectively.\n2. We iterate over the binary string `s`.\n3. If we encounter a '1', we increment the current length `curr_len`.\n4. If we encounter a '0', we reset the current length `curr_len` to 0.\n5. We update the maximum length `max_len` if the current length `curr_len` is greater.\n6. Finally, we return the maximum length `max_len`.\n\nThis solution has a time complexity of O(n), where n is the length of the binary string, and a space complexity of O(1), as we only use a constant amount of space to store the variables."}, {"generated_text": "Here's a Python solution using a simple iterative approach:\n\n```python\ndef maxlength(s):\n    \"\"\"\n    This function takes a binary string as input and returns the maximum length of contiguous substring containing only '1'.\n\n    Args:\n    s (str): A binary string.\n\n    Returns:\n    int: The maximum length of contiguous substring containing only '1'.\n    \"\"\"\n    \n    # Initialize the maximum length and current length to 0\n    max_len = 0\n    curr_len = 0\n    \n    # Iterate over each character in the string\n    for char in s:\n        # If the character is '1', increment the current length\n        if char == '1':\n            curr_len += 1\n        # If the character is '0', reset the current length to 0\n        else:\n            curr_len = 0\n        \n        # Update the maximum length if the current length is greater\n        max_len = max(max_len, curr_len)\n    \n    # Return the maximum length\n    return max_len\n\n# Test the function\nt = int(input())\nfor _ in range(t):\n    s = input()\n    print(maxlength(s))\n```\n\nThis program defines a function `maxlength` that takes a binary string `s` as input and returns the maximum length of contiguous substring containing only '1'. It uses two variables `max_len` and `curr_len` to keep track of the maximum length and the current length of contiguous '1's respectively. It iterates over each character in the string, updating `curr_len` and `max_len` accordingly. Finally, it returns `max_len`. The program then tests the function with the given test cases."}, {"generated_text": "Here is a Python program that solves the problem:\n\n```python\ndef maxlength(s):\n    \"\"\"\n    This function takes a binary string as input and returns the longest size of contiguous substring containing only '1'.\n\n    Parameters:\n    s (str): A binary string containing only '0' and '1'.\n\n    Returns:\n    int: The length of the longest contiguous substring containing only '1'.\n    \"\"\"\n    max_len = 0  # Initialize the maximum length to 0\n    current_len = 0  # Initialize the current length to 0\n    \n    for char in s:  # Iterate over each character in the string\n        if char == '1':  # If the character is '1'\n            current_len += 1  # Increment the current length\n            max_len = max(max_len, current_len)  # Update the maximum length if necessary\n        else:  # If the character is '0'\n            current_len = 0  # Reset the current length to 0\n    \n    return max_len  # Return the maximum length\n\n# Test the function\nt = int(input())  # Read the number of test cases\nfor _ in range(t):\n    s = input()  # Read the binary string for each test case\n    print(maxlength(s))  # Print the result for each test case\n```\n\nThis program uses a simple iterative approach to find the longest contiguous substring of '1's in the input binary string. It keeps track of the current length of the substring and the maximum length seen so far. Whenever it encounters a '1', it increments the current length and updates the maximum length if necessary. Whenever it encounters a '0', it resets the current length to 0. Finally, it returns the maximum length."}, {"generated_text": "Here is a Python solution for the problem using a simple iterative approach:\n\n```python\ndef maxlength(s):\n    \"\"\"\n    Returns the maximum length of contiguous substring containing only '1'.\n\n    Args:\n    s (str): A binary string.\n\n    Returns:\n    int: The maximum length of contiguous substring containing only '1'.\n    \"\"\"\n    max_length = 0\n    current_length = 0\n\n    for char in s:\n        if char == '1':\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 0\n\n    return max_length\n\n# User function Template for python3\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        s = input()\n        print(maxlength(s))\n```\n\nIn this code:\n\n1. We initialize two variables: `max_length` to keep track of the maximum length of contiguous substring containing only '1', and `current_length` to keep track of the current length of contiguous substring containing only '1'.\n\n2. We iterate over the input string `s`. If the current character is '1', we increment `current_length` and update `max_length` if `current_length` is greater than `max_length`.\n\n3. If the current character is '0', we reset `current_length` to 0 because a '0' breaks the contiguous substring.\n\n4. Finally, we return `max_length`, which is the maximum length of contiguous substring containing only '1'.\n\nThis solution has a time complexity of O(n), where n is the length of the input string, and a space complexity of O(1), excluding the space required for the input and output."}, {"generated_text": "Here's the Python solution for the problem. This program uses a simple approach to find the maximum length of contiguous '1's in a binary string.\n\n```python\ndef maxlength(s):\n    \"\"\"\n    This function takes a binary string as input and returns the maximum length of contiguous '1's.\n\n    Parameters:\n    s (str): The input binary string.\n\n    Returns:\n    int: The maximum length of contiguous '1's.\n    \"\"\"\n    max_length = 0  # Initialize the maximum length to 0\n    current_length = 0  # Initialize the current length to 0\n\n    # Iterate over each character in the string\n    for char in s:\n        # If the character is '1', increment the current length\n        if char == '1':\n            current_length += 1\n        # If the character is '0', reset the current length to 0\n        else:\n            current_length = 0\n        # Update the maximum length if the current length is greater\n        max_length = max(max_length, current_length)\n\n    return max_length\n\n\n# Test the function\nt = int(input())  # Read the number of test cases\nfor _ in range(t):\n    s = input()  # Read the binary string\n    print(maxlength(s))  # Print the maximum length of contiguous '1's\n```\n\nThis program works by iterating over each character in the input string. If the character is '1', it increments the current length. If the character is '0', it resets the current length to 0. It keeps track of the maximum length seen so far and returns it at the end."}, {"generated_text": "Here's a Python program that solves the problem:\n\n```python\ndef maxlength(s):\n    \"\"\"\n    This function takes a binary string as input and returns the longest size of contiguous substring containing only '1'.\n    \n    Parameters:\n    s (str): A binary string containing '0's and '1's.\n    \n    Returns:\n    int: The maximum length of contiguous substring containing only '1'.\n    \"\"\"\n    \n    # Initialize the maximum length and current length to 0\n    max_len = 0\n    curr_len = 0\n    \n    # Iterate over each character in the string\n    for char in s:\n        # If the character is '1', increment the current length\n        if char == '1':\n            curr_len += 1\n        # If the character is '0', reset the current length\n        else:\n            curr_len = 0\n        \n        # Update the maximum length if the current length is greater\n        max_len = max(max_len, curr_len)\n    \n    # Return the maximum length\n    return max_len\n\n# User function Template for python3\ndef main():\n    # Read the number of test cases\n    t = int(input())\n    \n    # Iterate over each test case\n    for _ in range(t):\n        # Read the binary string\n        s = input()\n        \n        # Print the maximum length\n        print(maxlength(s))\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis program defines a function `maxlength` that takes a binary string as input and returns the longest size of contiguous substring containing only '1'. It uses a simple iterative approach to keep track of the maximum length and the current length of contiguous '1's. The `main` function reads the number of test cases and iterates over each test case, reading the binary string and printing the maximum length.\n\nYou can save this code to a file (e.g., `max_length.py`) and run it using Python (e.g., `python max_length.py`) to test it with the example inputs."}, {"generated_text": "Here is the Python program that solves the problem:\n\n```python\ndef maxlength(s):\n    \"\"\"\n    This function takes a binary string as input and returns the longest size of contiguous substring containing only \u20181\u2019.\n\n    Args:\n        s (str): A binary string containing '0's and '1's.\n\n    Returns:\n        int: The maximum length of contiguous substring containing only '1'.\n    \"\"\"\n\n    # Initialize the maximum length and current length to 0\n    max_length = 0\n    current_length = 0\n\n    # Iterate over the string\n    for char in s:\n        # If the character is '1', increment the current length\n        if char == '1':\n            current_length += 1\n            # Update the maximum length if the current length is greater\n            max_length = max(max_length, current_length)\n        # If the character is '0', reset the current length\n        else:\n            current_length = 0\n\n    # Return the maximum length\n    return max_length\n\n\n# Read the number of test cases\nt = int(input())\n\n# Read and process each test case\nfor _ in range(t):\n    # Read the binary string\n    s = input()\n    # Print the maximum length of contiguous substring containing only '1'\n    print(maxlength(s))\n```\n\nIn this code, we iterate over the binary string and keep track of the current length of contiguous '1's. Whenever we encounter a '1', we increment the current length. Whenever we encounter a '0', we reset the current length to 0. We update the maximum length whenever the current length is greater. Finally, we return the maximum length.\n\nThis solution has a time complexity of O(n), where n is the length of the input string, and a space complexity of O(1), since we only use a constant amount of space to store the maximum length and current length."}, {"generated_text": "Here is a Python program that solves the problem:\n\n```python\ndef maxlength(s):\n    \"\"\"\n    This function takes a binary string as input and returns the longest size of contiguous substring containing only '1'.\n\n    Args:\n        s (str): A binary string.\n\n    Returns:\n        int: The longest size of contiguous substring containing only '1'.\n    \"\"\"\n    max_len = 0  # Initialize the maximum length to 0\n    curr_len = 0  # Initialize the current length to 0\n\n    for char in s:  # Iterate over each character in the string\n        if char == '1':  # If the character is '1'\n            curr_len += 1  # Increment the current length\n            max_len = max(max_len, curr_len)  # Update the maximum length if necessary\n        else:\n            curr_len = 0  # Reset the current length to 0 if the character is '0'\n\n    return max_len  # Return the maximum length\n\n# User function Template for python3\ndef solve():\n    t = int(input())  # Read the number of test cases\n    for _ in range(t):  # Iterate over each test case\n        s = input()  # Read the binary string\n        print(maxlength(s))  # Print the maximum length\n\nsolve()\n```\n\nIn this program, we define a function `maxlength` that takes a binary string as input and returns the longest size of contiguous substring containing only '1'. We initialize two variables, `max_len` and `curr_len`, to keep track of the maximum length and the current length of the contiguous substring, respectively. We then iterate over each character in the string. If the character is '1', we increment the current length and update the maximum length if necessary. If the character is '0', we reset the current length to 0. Finally, we return the maximum length.\n\nIn the `solve` function, we read the number of test cases and iterate over each test case. We read the binary string and print the maximum length by calling the `maxlength` function."}, {"generated_text": "Here's a Python program that solves the problem:\n\n```python\ndef maxlength(s):\n    \"\"\"\n    This function takes a binary string as input and returns the longest size of contiguous substring containing only '1'.\n\n    Args:\n        s (str): A binary string.\n\n    Returns:\n        int: The maximum length of required sub string.\n    \"\"\"\n    max_length = 0  # Initialize max_length to 0\n    current_length = 0  # Initialize current_length to 0\n\n    for char in s:  # Iterate over each character in the string\n        if char == '1':  # If the character is '1'\n            current_length += 1  # Increment current_length by 1\n            max_length = max(max_length, current_length)  # Update max_length if current_length is greater\n        else:\n            current_length = 0  # Reset current_length to 0 when a '0' is encountered\n\n    return max_length  # Return the maximum length\n\n\n# User function Template for python3\ndef main():\n    t = int(input())  # Read the number of test cases\n    for _ in range(t):\n        s = input()  # Read the binary string\n        print(maxlength(s))  # Print the maximum length\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis program works by iterating over each character in the binary string. When a '1' is encountered, it increments the current length and updates the maximum length if necessary. When a '0' is encountered, it resets the current length to 0. The maximum length is then returned.\n\nExample usage:\n```\nInput:\n2\n110\n11101110\nOutput:\n2\n3\n```\nThis program meets the given constraints and follows the specified format. It is well-structured, readable, and concise. The `maxlength` function is the core of the program and is designed to be reusable. The `main` function is used to handle the input and output."}, {"generated_text": "Here is a Python program to solve the problem:\n\n```python\ndef maxlength(s):\n    \"\"\"\n    Returns the longest size of contiguous substring containing only '1'.\n\n    Args:\n    s (str): A binary string.\n\n    Returns:\n    int: The maximum length of required substring.\n    \"\"\"\n    max_len = 0\n    current_len = 0\n    \n    # Iterate over each character in the string\n    for char in s:\n        # If the character is '1', increment the current length\n        if char == '1':\n            current_len += 1\n            # Update the maximum length if the current length is greater\n            max_len = max(max_len, current_len)\n        # If the character is '0', reset the current length\n        else:\n            current_len = 0\n    \n    return max_len\n\n# User function Template for python3\nfor _ in range(int(input())):\n    s = input()\n    print(maxlength(s))\n```\n\nExplanation:\n\n*   We initialize two variables, `max_len` and `current_len`, to keep track of the maximum length and the current length of contiguous '1's, respectively.\n*   We iterate over each character in the string. If the character is '1', we increment the `current_len`. If the `current_len` is greater than the `max_len`, we update the `max_len`.\n*   If the character is '0', we reset the `current_len` to 0 because a '0' breaks the contiguous sequence of '1's.\n*   Finally, we return the `max_len` after iterating over the entire string.\n\nThis program has a time complexity of O(n), where n is the length of the input string, because we make a single pass over the string. The space complexity is O(1), excluding the input string, because we only use a constant amount of space to store the variables."}, {"generated_text": "Here is a Python solution for the given problem:\n\n```python\ndef maxlength(s):\n    \"\"\"\n    This function takes a binary string as input and returns the length of the longest contiguous substring containing only '1'.\n\n    Args:\n        s (str): A binary string containing only '0' and '1'.\n\n    Returns:\n        int: The length of the longest contiguous substring containing only '1'.\n    \"\"\"\n    max_length = 0\n    current_length = 0\n\n    # Iterate over each character in the string\n    for char in s:\n        # If the character is '1', increment the current length\n        if char == '1':\n            current_length += 1\n        # If the character is '0', reset the current length\n        else:\n            current_length = 0\n        # Update the maximum length if the current length is greater\n        max_length = max(max_length, current_length)\n\n    return max_length\n\n# Test the function\nt = int(input())\n\nfor _ in range(t):\n    s = input()\n    print(maxlength(s))\n```\n\nThis solution works by iterating over each character in the input string. If the character is '1', it increments the current length of the contiguous substring. If the character is '0', it resets the current length to 0. It keeps track of the maximum length seen so far and returns it at the end. This solution has a time complexity of O(n), where n is the length of the input string."}]}