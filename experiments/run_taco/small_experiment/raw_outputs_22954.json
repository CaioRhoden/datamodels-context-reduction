{"id": 22954, "input": "You are given an array $a$ that contains $n$ integers. You can choose any proper subsegment $a_l, a_{l + 1}, \\ldots, a_r$ of this array, meaning you can choose any two integers $1 \\le l \\le r \\le n$, where $r - l + 1 < n$. We define the beauty of a given subsegment as the value of the following expression:\n\n$$\\max(a_{1}, a_{2}, \\ldots, a_{l-1}, a_{r+1}, a_{r+2}, \\ldots, a_{n}) - \\min(a_{1}, a_{2}, \\ldots, a_{l-1}, a_{r+1}, a_{r+2}, \\ldots, a_{n}) + \\max(a_{l}, \\ldots, a_{r}) - \\min(a_{l}, \\ldots, a_{r}).$$\n\nPlease find the maximum beauty among all proper subsegments.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\leq t \\leq 1000$) \u2014 the number of test cases. Then follow the descriptions of each test case.\n\nThe first line of each test case contains a single integer $n$ $(4 \\leq n \\leq 10^5)$ \u2014 the length of the array.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_{i} \\leq 10^9$) \u2014 the elements of the given array.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n\n-----Output-----\n\nFor each testcase print a single integer \u2014 the maximum beauty of a proper subsegment.\n\n\n-----Examples-----\n\nInput\n4\n8\n1 2 2 3 1 5 6 1\n5\n1 2 3 100 200\n4\n3 3 3 3\n6\n7 8 3 1 1 8\nOutput\n9\n297\n0\n14\n\n\n-----Note-----\n\nIn the first test case, the optimal segment is $l = 7$, $r = 8$. The beauty of this segment equals to $(6 - 1) + (5 - 1) = 9$.\n\nIn the second test case, the optimal segment is $l = 2$, $r = 4$. The beauty of this segment equals $(100 - 2) + (200 - 1) = 297$.\n", "difficulty": "EASY", "generations": [{"generated_text": "Here is a Python program that solves the problem:\n\n```python\ndef max_beauty():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        a.sort()\n        print(a[n-1] + a[n-2] - a[0] - a[1])\n\nmax_beauty()\n```\n\nThis program works by first sorting the array in ascending order. The maximum beauty of a subsegment will be achieved when we choose the maximum and second maximum values from the unselected elements and the minimum and second minimum values from the unselected elements. Therefore, the maximum beauty will be the sum of the maximum and second maximum values minus the sum of the minimum and second minimum values. This is exactly what the program does: it calculates the sum of the maximum and second maximum values and the sum of the minimum and second minimum values, and then prints the difference between these two sums."}, {"generated_text": "Here is a Python program that solves the problem:\n\n```python\ndef max_beauty():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        a.sort()\n        print(a[-1] + a[-2] - a[0] - a[1])\n\nmax_beauty()\n```\n\nThis program works as follows:\n\n1. It first reads the number of test cases `t`.\n2. For each test case, it reads the length of the array `n` and the array elements `a`.\n3. It sorts the array `a` in ascending order.\n4. The maximum beauty is then calculated as the sum of the two largest elements and the two smallest elements, which is `a[-1] + a[-2] - a[0] - a[1]`.\n5. The result is then printed.\n\nThis program runs in O(n log n) time due to the sorting operation, where n is the length of the array."}, {"generated_text": "Here is a Python program to solve the problem:\n\n```python\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    a.sort()\n    max_beauty = (a[n-1] - a[0]) + (a[n-2] - a[1])\n\n    print(max_beauty)\n```\n\nThis program works as follows:\n\n1. It reads the number of test cases and iterates over each test case.\n2. For each test case, it reads the length of the array and the elements of the array.\n3. It sorts the array in ascending order.\n4. The maximum beauty is calculated by subtracting the minimum of the first two elements from the maximum of the last two elements, and adding the result to the difference between the maximum of the last two elements and the minimum of the first two elements.\n5. The maximum beauty is printed for each test case.\n\nThis solution has a time complexity of O(n log n) due to the sorting step, where n is the length of the array."}, {"generated_text": "Here is a Python program that solves the problem:\n\n```python\n# Read the number of test cases\nt = int(input())\n\nfor _ in range(t):\n    # Read the length of the array\n    n = int(input())\n\n    # Read the array elements\n    a = list(map(int, input().split()))\n\n    # Sort the array in ascending order\n    a.sort()\n\n    # Calculate the maximum beauty\n    max_beauty = a[n-1] + a[n-2] - a[0] - a[1]\n\n    # Print the maximum beauty\n    print(max_beauty)\n```\n\nThis program works as follows:\n\n1.  It first reads the number of test cases.\n2.  For each test case, it reads the length of the array and the array elements.\n3.  It sorts the array in ascending order.\n4.  It calculates the maximum beauty by adding the two largest elements and subtracting the two smallest elements.\n5.  Finally, it prints the maximum beauty.\n\nThis solution has a time complexity of O(n log n) due to the sorting operation, where n is the length of the array. However, since the array is already sorted in the problem statement, we can simply calculate the maximum beauty by accessing the first and last elements, and the second last and second first elements, which has a time complexity of O(1)."}, {"generated_text": "Here is a Python solution for the given problem:\n\n```python\n# Read the number of test cases\nfor _ in range(int(input())):\n\n    # Read the length of the array\n    n = int(input())\n\n    # Read the array elements\n    a = list(map(int, input().split()))\n\n    # Sort the array in ascending order\n    a.sort()\n\n    # The maximum beauty is the difference between the sum of the two largest elements\n    # and the sum of the two smallest elements\n    max_beauty = a[-1] + a[-2] - a[0] - a[1]\n\n    # Print the maximum beauty\n    print(max_beauty)\n```\n\nThis program works as follows:\n\n1. It reads the number of test cases.\n2. For each test case, it reads the length of the array and the array elements.\n3. It sorts the array in ascending order.\n4. It calculates the maximum beauty by summing the two largest elements and subtracting the sum of the two smallest elements.\n5. It prints the maximum beauty.\n\nThis solution has a time complexity of O(n log n) due to the sorting operation, where n is the length of the array. The subsequent operations have a time complexity of O(1), so they do not affect the overall time complexity."}, {"generated_text": "Here's a Python program to solve the problem:\n\n```python\ndef max_beauty():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        a.sort()\n        print(a[-1] + a[-2] - a[0] - a[1])\n\nmax_beauty()\n```\n\nThis program works as follows:\n\n1. It first reads the number of test cases `t`.\n2. For each test case, it reads the length of the array `n` and the array elements `a`.\n3. It sorts the array `a` in ascending order.\n4. It calculates the maximum beauty by adding the two maximum elements and subtracting the two minimum elements of the array.\n5. It prints the maximum beauty for each test case.\n\nThis solution has a time complexity of O(n log n) due to the sorting operation, where n is the length of the array."}, {"generated_text": "Here is a Python program that solves the problem:\n\n```python\ndef max_beauty():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        a.sort()\n        print(a[n-1] + a[n-2] - a[0] - a[1])\n\nmax_beauty()\n```\n\nThis program works by first sorting the array in ascending order. Then, it calculates the maximum beauty by adding the two largest numbers and subtracting the two smallest numbers in the array.\n\nHere's a step-by-step explanation of how the program works:\n\n1. The `max_beauty` function is defined to take no arguments.\n2. The number of test cases `t` is read from the input.\n3. For each test case, the length of the array `n` is read from the input.\n4. The array `a` is read from the input and converted to a list of integers using the `map` function.\n5. The array `a` is sorted in ascending order using the `sort` method.\n6. The maximum beauty is calculated by adding the two largest numbers (`a[n-1]` and `a[n-2]`) and subtracting the two smallest numbers (`a[0]` and `a[1]`) in the array.\n7. The maximum beauty is printed to the output.\n\nThis program has a time complexity of O(n log n) due to the sorting operation, where n is the length of the array. The space complexity is O(n) for storing the array."}, {"generated_text": "Here is a Python solution for the given problem:\n\n```python\nimport sys\n\ndef max_beauty():\n    # Read the number of test cases\n    t = int(input())\n\n    for _ in range(t):\n        # Read the length of the array\n        n = int(input())\n\n        # Read the array elements\n        a = list(map(int, input().split()))\n\n        # Sort the array in ascending order\n        a.sort()\n\n        # Calculate the maximum beauty\n        max_beauty = (a[-1] - a[0]) + (a[-2] - a[1])\n\n        print(max_beauty)\n\nif __name__ == \"__main__\":\n    max_beauty()\n```\n\nThis code works as follows:\n\n1.  It reads the number of test cases `t` from the input.\n2.  For each test case, it reads the length of the array `n` and the array elements.\n3.  It sorts the array in ascending order.\n4.  It calculates the maximum beauty by subtracting the smallest elements from the largest elements, once for the whole array and once for the subarray excluding the smallest and largest elements.\n5.  Finally, it prints the maximum beauty for each test case.\n\nThis solution has a time complexity of O(n log n) due to the sorting operation, where n is the length of the array. The space complexity is O(n) for storing the sorted array."}, {"generated_text": "Here is a Python program that solves the given problem:\n\n```python\ndef max_beauty():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        a.sort()\n        print(a[-1] + a[-2] - a[0] - a[1])\n\nmax_beauty()\n```\n\nThis program works by first sorting the input array `a` in ascending order. Then, it calculates the maximum beauty of a proper subsegment as the sum of the maximum and second maximum elements minus the sum of the minimum and second minimum elements. This is because the maximum beauty of a proper subsegment is always achieved by choosing the two largest and two smallest elements in the subsegment. The program repeats this process for each test case."}, {"generated_text": "Here is a Python program that solves the problem:\n\n```python\nimport sys\n\ndef calculate_beauty(arr):\n    \"\"\"\n    Calculate the maximum beauty of a proper subsegment.\n\n    The maximum beauty is calculated as the sum of the differences between the maximum and minimum values in two parts of the array.\n\n    Args:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum beauty of a proper subsegment.\n    \"\"\"\n    max_val = max(arr)\n    min_val = min(arr)\n    max_sub = max(arr[1:-1])\n    min_sub = min(arr[1:-1])\n    return (max_val - min_val) + (max_sub - min_sub)\n\ndef main():\n    \"\"\"\n    Read input and calculate the maximum beauty for each test case.\n    \"\"\"\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        beauty = calculate_beauty(arr)\n        print(beauty)\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis program defines a function `calculate_beauty` that calculates the maximum beauty of a proper subsegment for a given array. The function uses the fact that the maximum beauty is the sum of the differences between the maximum and minimum values in two parts of the array.\n\nThe `main` function reads the input and calls `calculate_beauty` for each test case. The result is printed to the console.\n\nThis program assumes that the input is well-formed and does not contain any errors. It uses the `sys` module to read input from the console and print output to the console."}, {"generated_text": "Here is a Python program that solves the problem:\n\n```python\ndef max_beauty():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        a.sort()\n        print(a[-1] + a[-2] - a[0] - a[1])\n\nmax_beauty()\n```\n\nThis program first reads the number of test cases `t`. For each test case, it reads the length of the array `n` and the array elements `a`. The array elements are sorted in ascending order. The maximum beauty is then calculated as the sum of the maximum and second maximum elements minus the sum of the minimum and second minimum elements. This is because the maximum beauty of a proper subsegment is achieved when the subsegment contains the maximum and second maximum elements, and excludes the minimum and second minimum elements. The result is printed for each test case.\n\nFor example, for the first test case, the sorted array is `[1, 1, 2, 2, 3, 5, 6, 1]`. The maximum and second maximum elements are `6` and `5`, and the minimum and second minimum elements are `1` and `1`. Therefore, the maximum beauty is `(6 - 1) + (5 - 1) = 9`."}, {"generated_text": "Here is a Python program that will solve the problem.\n\n```python\n# Get the number of test cases\nt = int(input())\n\nfor _ in range(t):\n    # Get the length of the array\n    n = int(input())\n\n    # Get the array elements\n    a = list(map(int, input().split()))\n\n    # Sort the array\n    a.sort()\n\n    # Calculate the maximum beauty\n    max_beauty = a[n-1] - a[0] + a[n-2] - a[1]\n\n    # Print the result\n    print(max_beauty)\n```\n\nThis program first reads the number of test cases. Then, for each test case, it reads the length of the array and the array elements. It sorts the array and calculates the maximum beauty by subtracting the minimum elements from the maximum elements. The result is then printed.\n\nThis program runs in O(n log n) time due to the sorting step, where n is the length of the array. The space complexity is O(n) for storing the array."}, {"generated_text": "Here's a Python program to solve the problem:\n\n```python\ndef max_beauty():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        a.sort()\n        print(a[n-1] + a[n-2] - a[0] - a[1])\n\nif __name__ == \"__main__\":\n    max_beauty()\n```\n\nThis program works as follows:\n\n1.  It first reads the number of test cases `t`.\n2.  For each test case, it reads the length of the array `n` and the array elements `a`.\n3.  It sorts the array elements in ascending order.\n4.  The maximum beauty of a proper subsegment is the sum of the maximum and second maximum elements minus the sum of the minimum and second minimum elements.\n5.  It prints the maximum beauty for each test case.\n\nThe time complexity of this program is O(n log n) due to the sorting operation, where n is the length of the array. The space complexity is O(n) for storing the array elements."}, {"generated_text": "Here's a Python program that solves the problem:\n\n```python\nimport sys\n\ndef max_beauty():\n    t = int(sys.stdin.readline())\n\n    for _ in range(t):\n        n = int(sys.stdin.readline())\n        a = list(map(int, sys.stdin.readline().split()))\n\n        # Sort the array\n        a.sort()\n\n        # The maximum beauty will be the sum of the differences between the second and first largest elements and the second and first smallest elements\n        max_beauty = (a[n-1] - a[0]) + (a[n-2] - a[1])\n\n        print(max_beauty)\n\nif __name__ == \"__main__\":\n    max_beauty()\n```\n\nThis program works by first reading the number of test cases. For each test case, it reads the length of the array and the array itself. It then sorts the array, and calculates the maximum beauty by summing the differences between the second and first largest elements and the second and first smallest elements. This is because these differences will always be part of the maximum beauty, and any other differences will be less than or equal to these differences. The program then prints the maximum beauty."}, {"generated_text": "Here is a Python program that solves the problem.\n\n```python\ndef max_beauty():\n    t = int(input())\n\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n\n        a.sort()\n\n        print(a[n-1] + a[n-2] - a[0] - a[1])\n\nmax_beauty()\n```\n\nThis program works by first sorting the input array in ascending order. The maximum beauty of a subsegment will be achieved when the maximum numbers are as far apart as possible and the minimum numbers are as far apart as possible. This is because the maximum beauty is the sum of the difference between the maximum and minimum numbers in two subarrays. \n\nSince the array is sorted, the maximum numbers are at the end of the array and the minimum numbers are at the beginning. Therefore, the maximum beauty will be the sum of the difference between the last two numbers and the difference between the first two numbers. \n\nThis program reads the number of test cases, then for each test case, it reads the length of the array and the array elements, sorts the array, and prints the maximum beauty. \n\nYou can run this program with the provided test cases to see that it produces the correct output."}, {"generated_text": "Here is a Python program that solves the problem:\n\n```python\ndef find_max_beauty():\n    # Read the number of test cases\n    t = int(input())\n\n    # Process each test case\n    for _ in range(t):\n        # Read the length of the array\n        n = int(input())\n\n        # Read the array\n        a = list(map(int, input().split()))\n\n        # Sort the array\n        a.sort()\n\n        # The maximum beauty is the difference between the sum of the two largest elements and the sum of the two smallest elements\n        max_beauty = a[n-1] + a[n-2] - a[0] - a[1]\n\n        # Print the maximum beauty\n        print(max_beauty)\n\n# Call the function\nfind_max_beauty()\n```\n\nThis program works by first sorting the array in ascending order. Then, it calculates the maximum beauty by subtracting the sum of the two smallest elements from the sum of the two largest elements. This is because the maximum beauty is achieved when the two largest elements and the two smallest elements are chosen from the array. The program then prints the maximum beauty for each test case.\n\nFor example, for the first test case, the array is sorted as `[1, 1, 2, 2, 3, 5, 6, 1]`. The maximum beauty is then `6 + 5 - 1 - 1 = 9`. For the second test case, the array is sorted as `[1, 2, 3, 100, 200]`. The maximum beauty is then `200 + 100 - 2 - 1 = 297`."}, {"generated_text": "Here's a Python program to solve the problem:\n\n```python\ndef max_beauty():\n    # Read the number of test cases\n    t = int(input())\n\n    # Loop over each test case\n    for _ in range(t):\n        # Read the length of the array\n        n = int(input())\n\n        # Read the array elements\n        a = list(map(int, input().split()))\n\n        # Sort the array in ascending order\n        a.sort()\n\n        # The maximum beauty is the difference between the sum of the two largest elements and the sum of the two smallest elements\n        max_b = a[-1] + a[-2] - a[0] - a[1]\n\n        # Print the maximum beauty\n        print(max_b)\n\n# Call the function\nmax_beauty()\n```\n\nThis program works by first reading the number of test cases. Then, for each test case, it reads the length of the array and the array elements. It sorts the array in ascending order and calculates the maximum beauty as the difference between the sum of the two largest elements and the sum of the two smallest elements. Finally, it prints the maximum beauty.\n\nThe time complexity of this program is O(n log n) due to the sorting operation, where n is the length of the array. The space complexity is O(n) for storing the array."}, {"generated_text": "Here is a Python program that solves the problem:\n\n```python\n# Read the number of test cases\nt = int(input())\n\nfor _ in range(t):\n    # Read the length of the array\n    n = int(input())\n\n    # Read the array elements\n    a = list(map(int, input().split()))\n\n    # Sort the array\n    a.sort()\n\n    # Calculate the maximum beauty\n    max_beauty = (a[n-1] - a[0]) + (a[n-2] - a[1])\n\n    # Print the result\n    print(max_beauty)\n```\n\nThis program works as follows:\n\n1.  It reads the number of test cases `t`.\n2.  For each test case, it reads the length of the array `n` and the array elements.\n3.  It sorts the array in ascending order.\n4.  It calculates the maximum beauty by subtracting the minimum element from the maximum element in the first half of the array and adding the result to the difference between the maximum element and the minimum element in the second half of the array.\n5.  Finally, it prints the maximum beauty.\n\nThis solution has a time complexity of O(n log n) due to the sorting step, where n is the length of the array."}, {"generated_text": "Here's a Python program that solves the problem:\n\n```python\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    print(a[n-1] + a[n-2] - a[0] - a[1])\n```\n\nExplanation:\n\n*   We use a loop to read the number of test cases.\n*   For each test case, we read the length of the array `n` and the array elements `a`.\n*   We sort the array `a` in ascending order.\n*   The maximum beauty of a proper subsegment is the sum of the maximum and second-maximum elements minus the sum of the minimum and second-minimum elements.\n*   We print the result for each test case.\n\nThis solution works because the maximum beauty of a proper subsegment is achieved when we choose the maximum and second-maximum elements from the sorted array, and the minimum and second-minimum elements from the sorted array."}, {"generated_text": "Here is a Python program that solves the problem:\n\n```python\ndef max_beauty():\n    t = int(input())  # Number of test cases\n    for _ in range(t):\n        n = int(input())  # Length of the array\n        a = list(map(int, input().split()))  # Array of integers\n\n        a.sort()  # Sort the array in ascending order\n        max_beauty = a[n-1] + a[n-2] - a[0] - a[1]  # Maximum beauty is the sum of the two largest numbers minus the sum of the two smallest numbers\n\n        print(max_beauty)  # Print the maximum beauty\n\n\nif __name__ == \"__main__\":\n    max_beauty()\n```\n\nThis program works as follows:\n\n1.  It reads the number of test cases `t`.\n2.  For each test case, it reads the length `n` of the array and the array `a` of integers.\n3.  It sorts the array `a` in ascending order.\n4.  It calculates the maximum beauty by summing the two largest numbers and subtracting the sum of the two smallest numbers.\n5.  It prints the maximum beauty for each test case.\n\nThis solution has a time complexity of O(n log n) due to the sorting operation, where n is the length of the array. However, since the problem guarantees that n is at most 10^5, this is still efficient."}]}