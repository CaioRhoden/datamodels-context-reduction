{"id": 4666, "input": "On a chessboard with a width of $n$ and a height of $n$, rows are numbered from bottom to top from $1$ to $n$, columns are numbered from left to right from $1$ to $n$. Therefore, for each cell of the chessboard, you can assign the coordinates $(r,c)$, where $r$ is the number of the row, and $c$ is the number of the column.\n\nThe white king has been sitting in a cell with $(1,1)$ coordinates for a thousand years, while the black king has been sitting in a cell with $(n,n)$ coordinates. They would have sat like that further, but suddenly a beautiful coin fell on the cell with coordinates $(x,y)$...\n\nEach of the monarchs wanted to get it, so they decided to arrange a race according to slightly changed chess rules:\n\nAs in chess, the white king makes the first move, the black king makes the second one, the white king makes the third one, and so on. However, in this problem, kings can stand in adjacent cells or even in the same cell at the same time.\n\nThe player who reaches the coin first will win, that is to say, the player who reaches the cell with the coordinates $(x,y)$ first will win.\n\nLet's recall that the king is such a chess piece that can move one cell in all directions, that is, if the king is in the $(a,b)$ cell, then in one move he can move from $(a,b)$ to the cells $(a + 1,b)$, $(a - 1,b)$, $(a,b + 1)$, $(a,b - 1)$, $(a + 1,b - 1)$, $(a + 1,b + 1)$, $(a - 1,b - 1)$, or $(a - 1,b + 1)$. Going outside of the field is prohibited.\n\nDetermine the color of the king, who will reach the cell with the coordinates $(x,y)$ first, if the white king moves first.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($2 \\le n \\le 10^{18}$)\u00a0\u2014 the length of the side of the chess field.\n\nThe second line contains two integers $x$ and $y$ ($1 \\le x,y \\le n$)\u00a0\u2014 coordinates of the cell, where the coin fell.\n\n\n-----Output-----\n\nIn a single line print the answer \"White\" (without quotes), if the white king will win, or \"Black\" (without quotes), if the black king will win.\n\nYou can print each letter in any case (upper or lower).\n\n\n-----Examples-----\nInput\n4\n2 3\n\nOutput\nWhite\nInput\n5\n3 5\n\nOutput\nBlack\nInput\n2\n2 2\n\nOutput\nBlack\n\n\n-----Note-----\n\nAn example of the race from the first sample where both the white king and the black king move optimally: The white king moves from the cell $(1,1)$ into the cell $(2,2)$. The black king moves form the cell $(4,4)$ into the cell $(3,3)$. The white king moves from the cell $(2,2)$ into the cell $(2,3)$. This is cell containing the coin, so the white king wins. [Image] \n\nAn example of the race from the second sample where both the white king and the black king move optimally: The white king moves from the cell $(1,1)$ into the cell $(2,2)$. The black king moves form the cell $(5,5)$ into the cell $(4,4)$. The white king moves from the cell $(2,2)$ into the cell $(3,3)$. The black king moves from the cell $(4,4)$ into the cell $(3,5)$. This is the cell, where the coin fell, so the black king wins. [Image] \n\nIn the third example, the coin fell in the starting cell of the black king, so the black king immediately wins. [Image]\n", "difficulty": "EASY", "generations": [{"generated_text": "Here's a Python program that determines the color of the king who will reach the cell with the given coordinates first.\n\n```python\ndef get_winner(n, x, y):\n    # Calculate the minimum number of moves required by the white king to reach the coin\n    white_min_moves = max(n - x, n - y, x - 1, y - 1)\n    \n    # Calculate the minimum number of moves required by the black king to reach the coin\n    black_min_moves = max(n - (n - x), n -"}, {"generated_text": "Here's a Python solution for the problem:\n\n```python\nimport math\n\ndef calculate_distance(x, y):\n    return (x - 1) + (n - y)\n\ndef check_white_win(x, y):\n    return calculate_distance(x, y) <= calculate_distance(n - x + 1, n - y + 1)\n\nn = int(input())\nx, y = map(int, input().split())\n\nif check_white_win(x, y):\n    print(\"White\")\nelse:\n    print(\"Black\")\n```\n\nThis solution works by"}, {"generated_text": "Here's a Python program to solve the problem:\n\n```python\ndef solve():\n    n = int(input())\n    x, y = map(int, input().split())\n\n    # If the coin is in the starting cell of the white king, white king wins\n    if x == 1 and y == 1:\n        return \"White\"\n\n    # If the coin is in the starting cell of the black king, black king wins\n    if x == n and y == n:\n        return \"Black\"\n\n    # If the coin is on"}, {"generated_text": "Here is a Python program that solves the problem:\n\n```python\ndef solve(n, x, y):\n    # The distance between the starting points of the two kings\n    dx = n - 1\n    dy = n - 1\n\n    # The distance between the target point and the starting point of the white king\n    dx_target = x - 1\n    dy_target = y - 1\n\n    # The distance between the target point and the starting point of the black king\n    dx_target_black = n - x\n"}, {"generated_text": "Here is a Python program to solve the problem. The program uses a simple mathematical approach to determine the color of the king who will reach the cell with the coordinates (x, y) first.\n\n```python\ndef determine_winner(n, x, y):\n    \"\"\"\n    Determine the color of the king who will reach the cell with the coordinates (x, y) first.\n    \n    Parameters:\n    n (int): The length of the side of the chess field.\n    x (int): The x-coordinate of the cell where the coin fell.\n   "}, {"generated_text": "Here's a Python program that determines the color of the king who will reach the cell with the coordinates (x, y) first.\n\n```python\nimport math\n\ndef solve(n, x, y):\n    # Calculate the minimum number of moves required by the white king\n    min_white = max(n - x, n - y, x, y)\n    \n    # Calculate the minimum number of moves required by the black king\n    min_black = max(n - (n - x), n - (n - y), n - x, n"}, {"generated_text": "To solve this problem, we can use a simple observation. The white king and the black king will always move towards the cell with coordinates (x, y) from their respective starting positions. The key observation is that the white king will always move in a way that tries to minimize the maximum difference between x and y, while the black king will always move in a way that tries to maximize this difference.\n\nHere is a Python program that implements this observation:\n\n```python\nimport math\n\ndef solve():\n    n = int(input())\n    x, y ="}, {"generated_text": "Here is a Python program to solve the problem:\n\n```python\nimport math\n\ndef calculate_distance(x, y, n):\n    return max(x, y) + max(n - x, n - y)\n\ndef solve(n, x, y):\n    distance_to_coin = calculate_distance(x, y, n)\n    if distance_to_coin % 2 == 0:\n        return \"White\"\n    else:\n        return \"Black\"\n\nn = int(input())\nx, y = map(int, input().split())\n\nresult = solve(n, x,"}, {"generated_text": "Here's a Python program to solve the problem:\n\n```python\nimport math\n\ndef find_winner(n, x, y):\n    # Calculate the minimum number of moves required for the white king to reach the coin\n    white_moves = max(x - 1, y - 1) + max(n - x, n - y)\n    \n    # Calculate the minimum number of moves required for the black king to reach the coin\n    black_moves = max(n - x, n - y) + max(x - 1, y - 1"}, {"generated_text": "To solve this problem, we need to calculate the minimum number of moves required for each king to reach the coin. The king with the minimum number of moves will win.\n\nHere is a Python program that calculates the minimum number of moves:\n\n```python\nimport math\n\ndef min_moves(n, x, y):\n    # Calculate the minimum number of moves for the white king\n    white_moves = max(x - 1, y - 1) + max(n - x, n - y)\n\n    # Calculate the minimum number of moves for the black"}, {"generated_text": "Here is a Python program to solve the problem.\n\n```python\nimport math\n\ndef solve():\n    n = int(input())\n    x, y = map(int, input().split())\n\n    dx = max(x, n - x + 1)\n    dy = max(n - y + 1, y)\n\n    if dx <= dy:\n        print(\"White\")\n    else:\n        print(\"Black\")\n\nif __name__ == \"__main__\":\n    solve()\n```\n\nThis program works by calculating the minimum number of moves it would take for the white"}, {"generated_text": "Here's a Python program to solve the problem:\n\n```python\nimport math\n\ndef solve():\n    n = int(input())\n    x, y = map(int, input().split())\n\n    # Calculate the minimum number of moves for the white king to reach the coin\n    white_min_moves = max(n - x, n - y, x - 1, y - 1)\n\n    # Calculate the minimum number of moves for the black king to reach the coin\n    black_min_moves = max(n - x, n - y, x -"}, {"generated_text": "Here's a Python program that solves the problem:\n\n```python\nimport math\n\ndef solve(n, x, y):\n    # Calculate the minimum number of moves required for the white king to reach the coin\n    white_moves = max(x - 1, y - 1) + max(n - x, n - y)\n\n    # Calculate the minimum number of moves required for the black king to reach the coin\n    black_moves = max(n - x, n - y) + max(x - 1, y - 1)\n\n   "}, {"generated_text": "Here is a Python solution for the problem.\n\n```python\nimport math\n\ndef solve():\n    n = int(input())\n    x, y = map(int, input().split())\n\n    dx = abs(x - 1)\n    dy = abs(y - n)\n\n    if dx == dy:\n        print(\"White\")\n    elif dx > dy:\n        print(\"Black\")\n    else:\n        if n - dx < dy:\n            print(\"White\")\n        else:\n            print(\"Black\")\n\nsolve()\n```\n\nThis solution works by calculating the Manhattan distance"}, {"generated_text": "Here is a Python program to solve the problem:\n\n```python\nimport math\n\ndef solve(n, x, y):\n    # Calculate the minimum number of moves required for the white king to reach the coin\n    min_white_moves = max(n - x, n - y) + min(x, y)\n    \n    # Calculate the minimum number of moves required for the black king to reach the coin\n    min_black_moves = max(n - (n - x), n - (n - y)) + max(x, y)\n    \n    # If"}, {"generated_text": "Here is a Python program that solves the problem using the concept of Manhattan distance.\n\n```python\ndef winner(n, x, y):\n    # Calculate the Manhattan distance from (1, 1) to (x, y)\n    dist = x + y - 2\n\n    # If the Manhattan distance is even, the black king will win\n    if dist % 2 == 0:\n        return \"Black\"\n    else:\n        return \"White\"\n\n# Read input\nn = int(input())\nx, y = map(int, input"}, {"generated_text": "Here is a Python program that determines the color of the king who will reach the cell with the coordinates (x, y) first:\n\n```python\ndef solve(n, x, y):\n    dx = x - 1\n    dy = n - y\n    if dx > dy:\n        return \"White\"\n    elif dx < dy:\n        return \"Black\"\n    else:\n        return \"White\" if x < y else \"Black\"\n\nn = int(input())\nx, y = map(int, input().split())\nprint(solve(n"}, {"generated_text": "To solve this problem, we can use a simple approach based on the fact that the white king will win if the cell with the coin is reachable by the white king before the black king.\n\nHere is a Python program that solves the problem:\n\n```python\nimport math\n\ndef solve():\n    n = int(input())\n    x, y = map(int, input().split())\n    dx = x + y - 1\n    dy = n - x + n - y\n    if dx <= dy:\n        print(\"White\")\n    else:\n       "}, {"generated_text": "Here's a Python program that solves the problem.\n\n```python\nimport sys\n\ndef solve(n, x, y):\n    # If the coin is in the starting cell of the white king, the white king wins\n    if x == 1 and y == 1:\n        return \"White\"\n\n    # If the coin is in the starting cell of the black king, the black king wins\n    if x == n and y == n:\n        return \"Black\"\n\n    # The white king moves first, so the black king will move first"}, {"generated_text": "To solve this problem, we can use a simple mathematical approach. The key idea is that the white king will win if the minimum of the differences between the x-coordinates and the y-coordinates of the white king and the black king is even, and the maximum of the differences between the x-coordinates and the y-coordinates of the white king and the black king is odd.\n\nHere is a Python program that implements this idea:\n\n```python\ndef solve(n, x, y):\n    # Calculate the differences between the x-coordinates and the y"}]}