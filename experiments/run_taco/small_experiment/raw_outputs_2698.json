{"id": 2698, "input": "You are given a positive integer X. Your task is to tell whether there exist two positive integers a and b (a > 0, b > 0) such that\n\n2\\cdot a + 2\\cdot b + a\\cdot b = X\n\nIf there exist positive integers a and b satisfying the above condition print YES, otherwise print NO. \n\n------ Input Format ------ \n\n- The first line of input will contain a single integer T, denoting the number of test cases.\n- Each test case consists of single line containing a positive integer X.\n\n------ Output Format ------ \n\nFor each test case, output on a new line YES or NO.\n\nYou may print each character of the string in either uppercase or lowercase (for example, the strings yes, YES, Yes, and yeS will all be treated as identical).\n\n------ Constraints ------ \n\n$1 \u2264 T \u2264 100$\n$1 \u2264 X \u2264 10^{9}$\n\n----- Sample Input 1 ------ \n4\n2\n5\n6\n12\n\n----- Sample Output 1 ------ \nNO\nYES\nNO\nYES\n\n----- explanation 1 ------ \nTest case $1$: There do not exist any positive integers $a$ and $b$ such that $2\\cdot a + 2\\cdot b + a\\cdot b = 2$.\n\nTest case $2$: Let $a=1$ and $b=1$, then $2\\cdot a+2\\cdot b+a\\cdot b=5$.\n\nTest case $3$: There do not exist any positive integers $a$ and $b$ such that $2\\cdot a + 2\\cdot b + a\\cdot b = 6$.\n\nTest case $4$: Let $a=2$ and $b=2$, then $2\\cdot a+2\\cdot b+a\\cdot b=12$.\n", "difficulty": "EASY", "generations": [{"generated_text": "Here's a Python program that solves the given problem:\n\n```python\nimport math\n\ndef check(a, b, x):\n    return 2*a + 2*b + a*b == x\n\ndef solve(x):\n    for a in range(1, int(math.sqrt(x)) + 1):\n        b = (x - 2*a) / (a + 2)\n        if b > 0 and b.is_integer() and check(a, int(b), x):\n            return \"YES\"\n    return \"NO\"\n\nt = int(input())\nfor _ in range(t):\n    x = int(input())\n    print(solve(x))\n```\n\nThis program works by iterating over all possible values of `a` and calculating `b` using the equation `2*a + 2*b + a*b = x`. If `b` is a positive integer, it checks whether the given values of `a` and `b` satisfy the equation. If it finds a pair of `a` and `b` that satisfies the equation, it returns \"YES\". If it doesn't find any such pair after checking all possible values of `a`, it returns \"NO\".\n\nThis program runs in O(sqrt(x)) time, which is efficient enough to handle the given constraints."}, {"generated_text": "Here is a Python program that solves the problem:\n\n```python\ndef check(a, b, x):\n    return 2*a + 2*b + a*b == x\n\ndef solve(x):\n    for a in range(1, int(x ** 0.5) + 1):\n        if x % 2 == 0 and x // 2 >= a:\n            b = x // 2 - a\n            if check(a, b, x):\n                return \"YES\"\n        elif x % 2!= 0 and (x - a) // (a + 2) >= a:\n            b = (x - a) // (a + 2)\n            if check(a, b, x):\n                return \"YES\"\n    return \"NO\"\n\nt = int(input())\nfor _ in range(t):\n    x = int(input())\n    print(solve(x))\n```\n\nThis program uses a brute force approach to check all possible values of `a` and `b` to see if they satisfy the given condition. \n\nFor even values of `x`, it checks all values of `a` from 1 to the square root of `x` and calculates the corresponding value of `b` as `(x - 2*a) / 2`. \n\nFor odd values of `x`, it checks all values of `a` from 1 to the square root of `(x - a)` and calculates the corresponding value of `b` as `(x - a) / (a + 2)`. \n\nIf it finds any values of `a` and `b` that satisfy the condition, it returns \"YES\". Otherwise, it returns \"NO\". \n\nThis program runs in O(sqrt(x)) time for even values of `x` and O(sqrt(x - a)) time for odd values of `x`, where `a` is the value of `a` that satisfies the condition. The overall time complexity is O(T * sqrt(x)), where `T` is the number of test cases."}, {"generated_text": "Here's a Python program to solve the problem:\n\n```python\ndef check(X):\n    for a in range(1, X):\n        b = (X - 2*a) / (a + 2)\n        if b > 0 and b.is_integer():\n            return \"YES\"\n    return \"NO\"\n\nT = int(input())\nfor _ in range(T):\n    X = int(input())\n    print(check(X))\n```\n\nExplanation:\n\n*   We define a function `check(X)` that takes an integer `X` as input and returns \"YES\" if there exist positive integers `a` and `b` such that the given equation holds, and \"NO\" otherwise.\n*   We iterate over all possible values of `a` from 1 to `X-1`.\n*   For each value of `a`, we calculate the corresponding value of `b` using the equation `b = (X - 2*a) / (a + 2)`.\n*   We check if `b` is positive and an integer. If both conditions are met, we return \"YES\".\n*   If we have checked all possible values of `a` and haven't found a suitable pair of `a` and `b`, we return \"NO\".\n*   In the main part of the program, we read the number of test cases `T` and the input values `X` for each test case. We then call the `check(X)` function for each test case and print the result.\n\nThis program runs in O(n) time, where n is the maximum possible value of `X`. The space complexity is O(1) as we only use a constant amount of space to store the variables."}, {"generated_text": "Here is a Python program to solve the problem:\n\n```python\ndef check_condition(x):\n    \"\"\"\n    Checks if there exist two positive integers a and b such that \n    2 * a + 2 * b + a * b = X.\n\n    Args:\n        x (int): The input number.\n\n    Returns:\n        str: 'YES' if the condition is satisfied, 'NO' otherwise.\n    \"\"\"\n    for a in range(1, x):\n        b = (x - 2 * a) / (a + 2)\n        if b > 0 and b.is_integer():\n            return 'YES'\n    return 'NO'\n\n\ndef main():\n    t = int(input())  # Number of test cases\n\n    for _ in range(t):\n        x = int(input())  # Input number for the current test case\n        result = check_condition(x)\n        print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis program defines a function `check_condition(x)` that checks if there exist two positive integers `a` and `b` such that `2 * a + 2 * b + a * b = x`. It iterates over all possible values of `a` and calculates the corresponding value of `b` using the equation `b = (x - 2 * a) / (a + 2)`. If `b` is a positive integer, it returns 'YES'. If it doesn't find any such `a` and `b` after checking all possible values, it returns 'NO'.\n\nThe `main()` function reads the number of test cases `t` and the input numbers for each test case. It calls the `check_condition(x)` function for each test case and prints the result.\n\nThis program should work correctly for the given constraints and input format."}, {"generated_text": "Here is a Python program that solves the problem:\n\n```python\ndef check(X):\n    for a in range(1, X // 2 + 1):\n        b = (X - 2 * a) / a\n        if b > 0 and b.is_integer():\n            return \"YES\"\n    return \"NO\"\n\nT = int(input())\nfor _ in range(T):\n    X = int(input())\n    print(check(X))\n```\n\nThis program works by iterating over all possible values of `a` from 1 to `X/2` (since `b` must be positive), and for each `a`, it calculates `b` using the equation `b = (X - 2 * a) / a`. If `b` is positive and an integer, it returns \"YES\", otherwise it continues to the next `a`. If no such `a` and `b` are found after checking all possibilities, it returns \"NO\".\n\nYou can run this program with the sample input to see the output."}, {"generated_text": "Here is a Python program that solves the problem:\n\n```python\ndef solve(X):\n    # Check if X can be written as 2 * (a + 1) + (a + 1) * a for some a\n    a = (X + 2) ** 0.5 - 1\n    return a == int(a)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        X = int(input())\n        print(\"YES\" if solve(X) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis program defines a function `solve(X)` that checks whether `X` can be written as `2 * (a + 1) + (a + 1) * a` for some `a`. It does this by checking if `a` is an integer, where `a` is defined as `(X + 2) ** 0.5 - 1`. If `a` is an integer, then `X` can be written in the desired form.\n\nThe `main()` function reads the number of test cases `t` from the input, and then for each test case, it reads the value of `X` and prints \"YES\" if `X` can be written in the desired form, and \"NO\" otherwise.\n\nThis program uses the fact that `2 * a + 2 * b + a * b = X` is equivalent to `2 * (a + 1) + (a + 1) * a = X`. Therefore, we can check if `X` can be written in the desired form by checking if `a` is an integer, where `a` is defined as `(X + 2) ** 0.5 - 1`."}, {"generated_text": "Here's a Python program to solve the problem:\n\n```python\ndef check(a, b, x):\n    return 2 * a + 2 * b + a * b == x\n\ndef solve(x):\n    for a in range(1, x // 2 + 1):\n        if x % 2 == 0 and a % 2 == 0:\n            b = x // 2 - a\n        else:\n            b = (x - 2 * a) // (a + 1)\n            if (x - 2 * a) % (a + 1)!= 0:\n                continue\n        if check(a, b, x):\n            return \"YES\"\n    return \"NO\"\n\nt = int(input())\nfor _ in range(t):\n    x = int(input())\n    print(solve(x))\n```\n\nThis program works by iterating over all possible values of `a` and calculating the corresponding value of `b` such that `2 * a + 2 * b + a * b == x`. If such a pair is found, the program returns \"YES\", otherwise it returns \"NO\".\n\nThe program uses the fact that `b` can be calculated as `(x - 2 * a) // (a + 1)`, which is derived from the equation `2 * a + 2 * b + a * b == x`. This equation can be rewritten as `b * (a + 1) = x - 2 * a`, which implies that `b = (x - 2 * a) // (a + 1)`.\n\nThe program also checks if `x` is even and `a` is even, in which case it calculates `b` as `x // 2 - a`. This is because if `x` is even and `a` is even, then `b` must also be even, and the equation `2 * a + 2 * b + a * b == x` can be rewritten as `b = (x - 2 * a) // 2`, which is equivalent to `b = x // 2 - a`.\n\nThe time complexity of the program is O(n), where n is the input number `x`. This is because the program iterates over all possible values of `a` up to `x // 2 + 1`, which is the maximum possible value of `a`."}, {"generated_text": "Here is a Python program to solve the problem:\n\n```python\ndef check_existence(x):\n    \"\"\"\n    Check if there exist two positive integers a and b such that\n    2 * a + 2 * b + a * b = x.\n\n    Args:\n        x (int): The given positive integer.\n\n    Returns:\n        bool: True if such a and b exist, False otherwise.\n    \"\"\"\n    # If x is odd, there cannot be any solution\n    if x % 2!= 0:\n        return False\n\n    # Check all possible values of a\n    for a in range(1, x):\n        # Calculate b\n        b = (x - 2 * a) / (a + 2)\n        # Check if b is a positive integer\n        if b > 0 and b == int(b):\n            return True\n\n    return False\n\n\ndef main():\n    # Read the number of test cases\n    t = int(input())\n\n    # Process each test case\n    for _ in range(t):\n        x = int(input())\n        if check_existence(x):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis program defines a function `check_existence` to check if there exist two positive integers `a` and `b` such that `2 * a + 2 * b + a * b = x`. It then uses this function in the `main` function to process each test case.\n\nThe `check_existence` function first checks if `x` is odd. If it is, there cannot be any solution, so it returns `False`. Otherwise, it checks all possible values of `a` from 1 to `x - 1`. For each `a`, it calculates `b` using the equation `b = (x - 2 * a) / (a + 2)`. If `b` is a positive integer, it returns `True`. If it has checked all possible values of `a` and not found a solution, it returns `False`.\n\nThe `main` function reads the number of test cases, processes each test case, and prints \"YES\" or \"NO\" depending on whether a solution exists."}, {"generated_text": "Here is a Python program to solve the problem:\n\n```python\ndef check(a, b, x):\n    return 2*a + 2*b + a*b == x\n\ndef solve():\n    t = int(input())\n    for _ in range(t):\n        x = int(input())\n        for a in range(1, x):\n            b = (x - 2*a) / (a + 1)\n            if b > 0 and b.is_integer():\n                print(\"YES\")\n                break\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    solve()\n```\n\nThis program works as follows:\n\n1. The `check` function checks whether the equation `2*a + 2*b + a*b` equals `x` for given values of `a` and `b`.\n\n2. The `solve` function reads the number of test cases `t` and then iterates over each test case.\n\n3. For each test case, it iterates over all possible values of `a` from 1 to `x`. For each `a`, it calculates the corresponding value of `b` using the formula `(x - 2*a) / (a + 1)`.\n\n4. If `b` is positive and an integer, it means that there exist positive integers `a` and `b` satisfying the equation, so it prints \"YES\" and breaks the loop.\n\n5. If no such `a` and `b` are found after checking all possible values of `a`, it means that there do not exist positive integers `a` and `b` satisfying the equation, so it prints \"NO\"."}, {"generated_text": "Here's a Python program that solves the given problem:\n\n```python\ndef check(a, b, x):\n    \"\"\"\n    Checks if the given values of a and b satisfy the equation.\n    \n    Parameters:\n    a (int): The first positive integer.\n    b (int): The second positive integer.\n    x (int): The given positive integer.\n    \n    Returns:\n    bool: True if the equation is satisfied, False otherwise.\n    \"\"\"\n    return 2 * a + 2 * b + a * b == x\n\ndef solve(x):\n    \"\"\"\n    Solves the problem by checking all possible values of a and b.\n    \n    Parameters:\n    x (int): The given positive integer.\n    \n    Returns:\n    str: 'YES' if a solution exists, 'NO' otherwise.\n    \"\"\"\n    for a in range(1, x):\n        b = (x - 2 * a) / (a + 2)\n        if b > 0 and b.is_integer():\n            return 'YES'\n    return 'NO'\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        x = int(input())\n        print(solve(x))\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis program defines a function `check(a, b, x)` that checks if the given values of `a` and `b` satisfy the equation. It then defines a function `solve(x)` that checks all possible values of `a` and `b` to see if a solution exists. Finally, it defines a `main()` function that reads the input and calls `solve(x)` for each test case."}, {"generated_text": "Here's a Python program that solves the problem.\n\n```python\ndef check_condition(x):\n    \"\"\"\n    Checks if there exist two positive integers a and b such that\n    2 * a + 2 * b + a * b = x\n\n    Args:\n        x (int): The input number\n\n    Returns:\n        str: \"YES\" if the condition is satisfied, \"NO\" otherwise\n    \"\"\"\n    for a in range(1, x):\n        b = (x - 2 * a) / (a + 2)\n        if b > 0 and b.is_integer() and b == int(b):\n            return \"YES\"\n    return \"NO\"\n\ndef main():\n    \"\"\"\n    Reads the number of test cases and the input numbers, and prints the results\n    \"\"\"\n    t = int(input())  # Read the number of test cases\n    for _ in range(t):\n        x = int(input())  # Read the input number\n        print(check_condition(x))\n\nif __name__ == \"__main__\":\n    main()\n```\n\nHere's an explanation of the code:\n\nThe function `check_condition(x)` checks if there exist two positive integers `a` and `b` such that `2 * a + 2 * b + a * b = x`. It does this by iterating over all possible values of `a` and checking if the corresponding value of `b` is a positive integer.\n\nIn the `main()` function, we read the number of test cases and the input numbers, and print the results.\n\nThis code should solve the problem for all test cases."}, {"generated_text": "Here's a Python program that solves the problem:\n\n```python\nimport math\n\ndef solve(X):\n    # Calculate the discriminant\n    D = X + 4\n    # Check if the discriminant is a perfect square\n    sqrt_D = math.sqrt(D)\n    if sqrt_D == int(sqrt_D):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Read the number of test cases\nT = int(input())\n\n# Process each test case\nfor _ in range(T):\n    # Read the input for the current test case\n    X = int(input())\n    # Print the result\n    print(solve(X))\n```\n\nThis program works by calculating the discriminant of the quadratic equation that is derived from the given condition. If the discriminant is a perfect square, then there exist positive integers `a` and `b` that satisfy the given condition. Otherwise, there do not exist such positive integers.\n\nThe time complexity of this program is O(1), as it only involves a constant number of operations. The space complexity is also O(1), as it only uses a constant amount of space to store the input and output."}, {"generated_text": "Here's a Python program that solves the problem:\n\n```python\ndef check(a, b, x):\n    return 2 * a + 2 * b + a * b == x\n\ndef solve(x):\n    for a in range(1, int(x**0.5) + 1):\n        b = (x - 2 * a) / (a + 2)\n        if b > 0 and b.is_integer():\n            return \"YES\"\n    return \"NO\"\n\nt = int(input())\nfor _ in range(t):\n    x = int(input())\n    print(solve(x))\n```\n\nThis program works by iterating over all possible values of `a` and calculating the corresponding value of `b` using the formula `(x - 2 * a) / (a + 2)`. If `b` is a positive integer, the function returns \"YES\". If no such `a` and `b` are found after checking all possible values of `a`, the function returns \"NO\".\n\nNote that the loop only needs to iterate up to `sqrt(x)`, because if `a` is greater than `sqrt(x)`, then `b` would be less than 0, which is not a valid solution."}, {"generated_text": "Here is a Python program to solve the problem:\n\n```python\ndef check_condition(x):\n    # Check if x is odd\n    if x % 2 == 1:\n        return \"NO\"\n\n    # Initialize a and b\n    a = 1\n    b = (x - 2) / (a + 1)\n\n    # Check if b is a positive integer\n    if b > 0 and b == int(b):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    x = int(input())\n    result = check_condition(x)\n    print(result)\n```\n\nThis program works as follows:\n\n1.  It defines a function `check_condition(x)` that takes an integer `x` as input and returns \"YES\" if there exist positive integers `a` and `b` such that `2 * a + 2 * b + a * b = x`, and \"NO\" otherwise.\n2.  The function first checks if `x` is odd. If it is, there cannot exist positive integers `a` and `b` such that `2 * a + 2 * b + a * b = x`, so the function returns \"NO\".\n3.  If `x` is even, the function initializes `a` to 1 and calculates `b` using the formula `(x - 2) / (a + 1)`.\n4.  The function checks if `b` is a positive integer by comparing it to its integer value. If `b` is a positive integer, the function returns \"YES\". Otherwise, it returns \"NO\".\n5.  The program reads the number of test cases `t` from the input.\n6.  For each test case, the program calls the `check_condition(x)` function with the input `x` and prints the result.\n\nYou can run this program with the sample input to get the expected output."}, {"generated_text": "Here is a Python program that solves the problem:\n\n```python\ndef check_X(X):\n    \"\"\"\n    Check if there exist two positive integers a and b such that\n    2*a + 2*b + a*b = X\n    \"\"\"\n    for a in range(1, X):\n        b = (X - 2*a) / (a + 1)\n        if b.is_integer() and b > 0:\n            return \"YES\"\n    return \"NO\"\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        X = int(input())\n        print(check_X(X))\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis program defines a function `check_X` that takes an integer `X` as input and returns \"YES\" if there exist two positive integers `a` and `b` such that `2*a + 2*b + a*b = X`, and \"NO\" otherwise.\n\nIn the `check_X` function, we iterate over all possible values of `a` from 1 to `X-1`. For each `a`, we calculate `b` using the formula `b = (X - 2*a) / (a + 1)`. If `b` is an integer and `b > 0`, we return \"YES\".\n\nIn the `main` function, we read the number of test cases `T` from the input, and then iterate over each test case. For each test case, we read the value of `X` from the input and call the `check_X` function to check if there exist two positive integers `a` and `b` such that `2*a + 2*b + a*b = X`. We then print the result.\n\nThis program runs in O(n) time, where n is the value of X, because we iterate over all possible values of a from 1 to X-1. The space complexity is O(1), because we only use a constant amount of space to store the variables a, b, and X."}, {"generated_text": "Here is a Python program to solve the problem:\n\n```python\ndef solve(X):\n    for a in range(1, int(X ** 0.5) + 1):\n        b = (X - 2 * a) / (a + 2)\n        if b > 0 and b == int(b):\n            return \"YES\"\n    return \"NO\"\n\nT = int(input())\nfor _ in range(T):\n    X = int(input())\n    print(solve(X))\n```\n\nThis program works by iterating over all possible values of `a` and calculating the corresponding value of `b`. If `b` is a positive integer, the function returns \"YES\". If no such pair `(a, b)` is found after checking all possible values of `a`, the function returns \"NO\".\n\nNote that we only need to check values of `a` up to the square root of `X`, because if `a` is larger than the square root of `X`, then `b` would be negative."}, {"generated_text": "Here's a Python program to solve the problem:\n\n```python\ndef check(a, b, x):\n    \"\"\"Check if the equation 2*a + 2*b + a*b = x has positive integer solutions\"\"\"\n    return (2*a + 2*b + a*b) == x\n\ndef solve(x):\n    \"\"\"Check if there exist positive integers a and b such that 2*a + 2*b + a*b = x\"\"\"\n    for a in range(1, x+1):\n        for b in range(1, x+1):\n            if check(a, b, x):\n                return \"YES\"\n    return \"NO\"\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        x = int(input())\n        print(solve(x))\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis program defines a function `check(a, b, x)` to check if the equation `2*a + 2*b + a*b = x` has positive integer solutions for given values of `a` and `b`. The function `solve(x)` iterates over all possible values of `a` and `b` to find a solution for the given value of `x`. If a solution is found, it returns \"YES\", otherwise it returns \"NO\". The `main()` function reads the number of test cases `t` and the values of `x` for each test case, and prints the result of `solve(x)` for each test case.\n\nHowever, this solution may not be efficient for large values of `x` because it has a time complexity of O(x^2). We can improve the solution by observing that the equation `2*a + 2*b + a*b = x` can be rewritten as `(a+1)*(b+1) = x+2`. This means that `x+2` must be a product of two positive integers `a+1` and `b+1`. We can use a more efficient algorithm to find the prime factorization of `x+2` and check if it can be expressed as a product of two positive integers.\n\nHere is the improved solution:\n\n```python\nimport math\n\ndef prime_factors(n):\n    \"\"\"Find the prime factors of n\"\"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef solve(x):\n    \"\"\"Check if there exist positive integers a and b such that 2*a + 2*b + a*b = x\"\"\"\n    factors = prime_factors(x+2)\n    for i in range(len(factors)):\n        for j in range"}, {"generated_text": "Here's a Python program to solve the problem:\n\n```python\nimport math\n\ndef check(a, b, x):\n    return 2 * a + 2 * b + a * b == x\n\ndef solve(x):\n    for a in range(1, int(math.sqrt(x)) + 1):\n        b = (x - 2 * a) / (a + 2)\n        if b.is_integer() and b > 0:\n            return \"YES\"\n    return \"NO\"\n\nt = int(input())\nfor _ in range(t):\n    x = int(input())\n    print(solve(x))\n```\n\nExplanation of the code:\n\n- The `check` function checks whether the equation `2 * a + 2 * b + a * b == x` is true for given values of `a` and `b`.\n- The `solve` function tries all possible values of `a` from 1 to the square root of `x` (since `a` and `b` are positive integers, `a` cannot be greater than the square root of `x`). For each value of `a`, it calculates `b` using the equation `b = (x - 2 * a) / (a + 2)`. If `b` is a positive integer, it returns \"YES\". If it tries all values of `a` and doesn't find a solution, it returns \"NO\".\n- The main part of the code reads the number of test cases `t` and then for each test case, it reads the value of `x` and prints the result of the `solve` function."}, {"generated_text": "Here is a Python program that solves the given problem.\n\n```python\ndef check_X(X):\n    # If X is odd, we can't find any a and b such that 2*a + 2*b + a*b is odd.\n    if X % 2!= 0:\n        return \"NO\"\n\n    # We want to find a and b such that a*b + 2*a + 2*b = X\n    # We can rewrite this as (a+2)*(b+2) = X + 8\n    # So, we want to find a divisor of X + 8 such that one of them is at least 3.\n    for i in range(3, int((X + 8) ** 0.5) + 1):\n        if (X + 8) % i == 0:\n            if i >= 3:\n                return \"YES\"\n            else:\n                return \"NO\"\n    # If we can't find any divisor, then X + 8 is prime and the only divisor is 1 and X + 8.\n    return \"NO\"\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        X = int(input())\n        print(check_X(X))\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis program works by first checking if X is odd. If it is, then we can't find any a and b such that 2*a + 2*b + a*b is odd, so we return \"NO\".\n\nIf X is even, we can rewrite the equation as (a+2)*(b+2) = X + 8. We then want to find a divisor of X + 8 such that one of them is at least 3. If we find such a divisor, we return \"YES\". If we can't find any divisor, then X + 8 is prime and the only divisor is 1 and X + 8, so we return \"NO\".\n\nThis program has a time complexity of O(sqrt(X)) and a space complexity of O(1)."}, {"generated_text": "Here's a Python program that solves the problem:\n\n```python\nimport math\n\ndef check_existence(x):\n    for a in range(1, int(math.sqrt(x)) + 1):\n        b = (x - 2 * a) / (a + 2)\n        if b > 0 and b.is_integer():\n            return \"YES\"\n    return \"NO\"\n\nt = int(input())\nfor _ in range(t):\n    x = int(input())\n    print(check_existence(x))\n```\n\nThis program works by iterating over all possible values of `a` from 1 to the square root of `x`. For each value of `a`, it calculates the corresponding value of `b` using the formula `(x - 2 * a) / (a + 2)`. If `b` is a positive integer, it returns \"YES\". If it has checked all possible values of `a` without finding a positive integer `b`, it returns \"NO\".\n\nNote that the loop only needs to go up to the square root of `x` because `a` and `b` are positive integers, and the product `a * b` is at most `x`. Therefore, `a + b` must be at least the square root of `x` to satisfy the equation `2 * a + 2 * b + a * b = x`."}]}