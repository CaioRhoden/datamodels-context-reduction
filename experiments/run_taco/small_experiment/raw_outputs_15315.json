{"id": 15315, "input": "Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array.\n\nExample 1:\n\n\nInput: [3,0,1]\nOutput: 2\n\n\nExample 2:\n\n\nInput: [9,6,4,2,3,5,7,0,1]\nOutput: 8\n\n\nNote:\nYour algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?\nclass Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        ", "difficulty": "EASY", "generations": [{"generated_text": "Here's a Python solution that uses the mathematical property of the sum of an arithmetic series to find the missing number in linear time complexity and constant extra space complexity.\n\n```python\nfrom typing import List\n\nclass Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        n = len(nums)\n        total_sum = n * (n + 1) // 2\n        actual_sum = sum(nums)\n        return total_sum - actual_sum\n```\n\nExplanation:\n\n1. We calculate the total sum of numbers from 0 to n (inclusive) using the formula for the sum of an arithmetic series: `n * (n + 1) / 2`.\n2. We calculate the actual sum of the numbers in the input array using the built-in `sum` function.\n3. The missing number is the difference between the total sum and the actual sum.\n\nThis solution has a time complexity of O(n) because we need to iterate over the input array to calculate the actual sum, and a space complexity of O(1) because we only use a constant amount of space to store the total sum and the actual sum.\n\nExample use cases:\n\n```python\nsolution = Solution()\n\nprint(solution.missingNumber([3, 0, 1]))  # Output: 2\nprint(solution.missingNumber([9, 6, 4, 2, 3, 5, 7, 0, 1]))  # Output: 8\n```"}, {"generated_text": "Here's a Python program to solve the problem. This program uses the mathematical formula for the sum of an arithmetic series to find the missing number.\n\n```python\nfrom typing import List\n\nclass Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an array containing n distinct numbers taken from 0, 1, 2,..., n, \n        find the one that is missing from the array.\n\n        Args:\n            nums (List[int]): A list of distinct numbers.\n\n        Returns:\n            int: The missing number in the list.\n        \"\"\"\n        \n        # Calculate the sum of the arithmetic series from 0 to n (n+1) using the formula n*(n+1)//2\n        n = len(nums)\n        total_sum = n * (n + 1) // 2\n        \n        # Calculate the sum of the numbers in the list\n        actual_sum = sum(nums)\n        \n        # The missing number is the difference between the total sum and the actual sum\n        missing_number = total_sum - actual_sum\n        \n        return missing_number\n\n# Example usage:\nsolution = Solution()\n\n# Example 1:\nprint(solution.missingNumber([3, 0, 1]))  # Output: 2\n\n# Example 2:\nprint(solution.missingNumber([9, 6, 4, 2, 3, 5, 7, 0, 1]))  # Output: 8\n```\n\nThis solution has a linear runtime complexity (O(n)) because it involves a single pass through the list to calculate the sum of its elements. The space complexity is constant (O(1)) because it only uses a fixed amount of space to store the variables."}, {"generated_text": "Here is a Python solution for the problem:\n\n```python\nfrom typing import List\n\nclass Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        \"\"\"\n        Given an array containing n distinct numbers taken from 0, 1, 2,..., n, \n        find the one that is missing from the array.\n\n        Args:\n        nums (List[int]): A list of distinct numbers.\n\n        Returns:\n        int: The missing number in the array.\n        \"\"\"\n        n = len(nums)\n        total_sum = n * (n + 1) // 2  # Calculate the sum of numbers from 0 to n\n        actual_sum = sum(nums)  # Calculate the sum of numbers in the array\n        return total_sum - actual_sum  # The missing number is the difference between the two sums\n```\n\nThis solution uses the mathematical property that the sum of numbers from 0 to n is equal to n * (n + 1) / 2. It calculates this sum and then subtracts the sum of the numbers in the array to find the missing number.\n\nThis solution has a linear runtime complexity of O(n) because it involves a single pass through the array to calculate the sum of its elements. It also has a constant extra space complexity of O(1) because it only uses a constant amount of space to store the sums and the length of the array.\n\nExample usage:\n\n```python\nsolution = Solution()\nprint(solution.missingNumber([3, 0, 1]))  # Output: 2\nprint(solution.missingNumber([9, 6, 4, 2, 3, 5, 7, 0, 1]))  # Output: 8\n```"}, {"generated_text": "Here's a Python solution that uses the mathematical property of the sum of an arithmetic series to solve the problem in linear time complexity and constant space complexity.\n\n```python\nfrom typing import List\n\nclass Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        # Calculate the sum of the first n natural numbers using Gauss' formula\n        n = len(nums)\n        expected_sum = n * (n + 1) // 2\n        \n        # Calculate the actual sum of the numbers in the array\n        actual_sum = sum(nums)\n        \n        # The missing number is the difference between the expected sum and the actual sum\n        return expected_sum - actual_sum\n```\n\nThis solution works by first calculating the expected sum of the numbers from 0 to n using Gauss' formula, which is n * (n + 1) / 2. It then calculates the actual sum of the numbers in the array using the built-in sum function. The missing number is then the difference between the expected sum and the actual sum.\n\nThis solution runs in O(n) time complexity because the sum function and the calculation of the expected sum both run in linear time. It also uses constant space complexity because it only uses a few extra variables to store the expected sum and the actual sum.\n\nExample usage:\n\n```python\nsolution = Solution()\nprint(solution.missingNumber([3,0,1]))  # Output: 2\nprint(solution.missingNumber([9,6,4,2,3,5,7,0,1]))  # Output: 8\n```"}, {"generated_text": "Here's a Python solution that uses the mathematical property of the sum of an arithmetic series to find the missing number in linear time complexity and constant extra space complexity.\n\n```python\nfrom typing import List\n\nclass Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        # Calculate the sum of numbers from 0 to n using Gauss' formula\n        n = len(nums)\n        total_sum = n * (n + 1) // 2\n        \n        # Calculate the sum of the given array\n        array_sum = sum(nums)\n        \n        # The missing number is the difference between the total sum and the array sum\n        return total_sum - array_sum\n```\n\nHere's how it works:\n\n1. Calculate the total sum of numbers from 0 to n using Gauss' formula: `n * (n + 1) / 2`. This is an efficient way to calculate the sum of an arithmetic series.\n2. Calculate the sum of the given array using the built-in `sum` function.\n3. The missing number is the difference between the total sum and the array sum.\n\nThis solution runs in linear time complexity (O(n)) because the `sum` function iterates over the array once, and the rest of the operations are constant time. It uses constant extra space complexity because it only uses a few extra variables to store the sums.\n\nExample usage:\n\n```python\nsolution = Solution()\nprint(solution.missingNumber([3, 0, 1]))  # Output: 2\nprint(solution.missingNumber([9, 6, 4, 2, 3, 5, 7, 0, 1]))  # Output: 8\n```"}, {"generated_text": "Here is a Python solution using the mathematical formula for the sum of an arithmetic series to find the missing number in linear time complexity with constant extra space complexity.\n\n```python\nfrom typing import List\n\nclass Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        # Calculate the sum of the arithmetic series from 0 to n\n        n = len(nums)\n        expected_sum = n * (n + 1) // 2\n        \n        # Calculate the actual sum of the numbers in the array\n        actual_sum = sum(nums)\n        \n        # The missing number is the difference between the expected sum and the actual sum\n        return expected_sum - actual_sum\n```\n\nThis solution works by using the formula for the sum of an arithmetic series to calculate the expected sum of the numbers from 0 to n. It then calculates the actual sum of the numbers in the array using the built-in `sum` function. The missing number is the difference between the expected sum and the actual sum.\n\nThis solution has a time complexity of O(n) because it needs to iterate over the array to calculate the actual sum, and a space complexity of O(1) because it only uses a constant amount of extra space to store the expected sum and the actual sum.\n\nExample usage:\n\n```python\nsolution = Solution()\nprint(solution.missingNumber([3, 0, 1]))  # Output: 2\nprint(solution.missingNumber([9, 6, 4, 2, 3, 5, 7, 0, 1]))  # Output: 8\n```"}, {"generated_text": "Here's a Python solution using the mathematical formula for the sum of an arithmetic series to find the missing number. This solution runs in linear time complexity (O(n)) and constant extra space complexity (O(1)).\n\n```python\nfrom typing import List\n\nclass Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        n = len(nums)\n        total_sum = n * (n + 1) // 2\n        actual_sum = sum(nums)\n        return total_sum - actual_sum\n```\n\nExplanation:\n\n1. Calculate the total sum of numbers from 0 to n using the formula `n * (n + 1) // 2`.\n2. Calculate the actual sum of the numbers in the input array.\n3. The missing number is the difference between the total sum and the actual sum.\n\nThis solution works because the total sum of numbers from 0 to n is equal to the sum of the numbers in the array plus the missing number. By subtracting the actual sum from the total sum, we get the missing number.\n\nExample usage:\n\n```python\nsolution = Solution()\nprint(solution.missingNumber([3, 0, 1]))  # Output: 2\nprint(solution.missingNumber([9, 6, 4, 2, 3, 5, 7, 0, 1]))  # Output: 8\n```"}, {"generated_text": "Here's a Python solution for the problem using the XOR operation, which runs in linear time complexity (O(n)) and constant extra space complexity (O(1)).\n\n```python\nfrom typing import List\n\nclass Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        # XOR of all numbers from 0 to n\n        n = len(nums)\n        expected_xor = n\n        actual_xor = 0\n        \n        # XOR all numbers in the array\n        for num in nums:\n            actual_xor ^= num\n        \n        # XOR all numbers from 0 to n\n        for i in range(n + 1):\n            expected_xor ^= i\n        \n        # The missing number is the XOR of expected_xor and actual_xor\n        return expected_xor ^ actual_xor\n```\n\nHere's an explanation of the solution:\n\n*   We use the XOR operation to find the missing number because XOR has the following properties:\n    *   `a ^ a = 0` (any number XOR itself is 0)\n    *   `a ^ 0 = a` (any number XOR 0 is the number itself)\n    *   `a ^ b ^ a = b` (XOR is associative)\n*   We XOR all numbers from 0 to `n` to get the expected XOR result.\n*   We XOR all numbers in the array to get the actual XOR result.\n*   The missing number is the XOR of the expected XOR result and the actual XOR result.\n\nThis solution runs in linear time complexity (O(n)) because we iterate through the array and the range from 0 to `n` once each. It also runs in constant extra space complexity (O(1)) because we only use a constant amount of space to store the XOR results."}, {"generated_text": "Here's a Python solution that uses the mathematical formula for the sum of an arithmetic series to find the missing number in linear time complexity with constant extra space complexity.\n\n```python\nfrom typing import List\n\nclass Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        # Calculate the sum of numbers from 0 to n using the formula n*(n+1)//2\n        n = len(nums)\n        total_sum = n * (n + 1) // 2\n        \n        # Calculate the sum of the given numbers\n        given_sum = sum(nums)\n        \n        # The missing number is the difference between the total sum and the given sum\n        return total_sum - given_sum\n```\n\nHere's an explanation of the code:\n\n1.  We first calculate the total sum of numbers from 0 to n using the formula `n*(n+1)//2`. This formula is derived from the sum of an arithmetic series.\n2.  Then, we calculate the sum of the given numbers in the array using the built-in `sum` function.\n3.  Finally, we return the missing number, which is the difference between the total sum and the given sum.\n\nThis solution runs in linear time complexity because it involves a single pass through the array to calculate the sum of the given numbers, and it uses constant extra space complexity because it only uses a constant amount of space to store the total sum, given sum, and the missing number.\n\nExample usage:\n\n```python\nsolution = Solution()\nprint(solution.missingNumber([3, 0, 1]))  # Output: 2\nprint(solution.missingNumber([9, 6, 4, 2, 3, 5, 7, 0, 1]))  # Output: 8\n```\n\nThis solution is efficient, readable, and well-documented, making it suitable for production use."}, {"generated_text": "Here's a Python solution that uses the mathematical property of the sum of an arithmetic series to find the missing number in linear time complexity with constant extra space complexity.\n\n```python\nfrom typing import List\n\nclass Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        \"\"\"\n        Finds the missing number in an array containing n distinct numbers \n        taken from 0, 1, 2,..., n.\n\n        Args:\n            nums (List[int]): A list of distinct numbers.\n\n        Returns:\n            int: The missing number in the array.\n        \"\"\"\n        \n        # Calculate the sum of numbers from 0 to n (inclusive) using the formula n * (n + 1) / 2\n        n = len(nums)\n        total_sum = n * (n + 1) // 2\n        \n        # Calculate the sum of the numbers in the array\n        array_sum = sum(nums)\n        \n        # The missing number is the difference between the total sum and the array sum\n        return total_sum - array_sum\n```\n\nHere's an explanation of the code:\n\n1.  We first calculate the total sum of numbers from 0 to n (inclusive) using the formula `n * (n + 1) / 2`. This formula is derived from the sum of an arithmetic series.\n2.  We then calculate the sum of the numbers in the array using the built-in `sum` function.\n3.  Finally, we return the difference between the total sum and the array sum, which is the missing number.\n\nThis solution runs in linear time complexity (`O(n)`) because it involves a single pass through the array to calculate the sum, and it uses constant extra space complexity (`O(1)`) because it only uses a few variables to store the sums.\n\nExample usage:\n\n```python\nsolution = Solution()\nprint(solution.missingNumber([3, 0, 1]))  # Output: 2\nprint(solution.missingNumber([9, 6, 4, 2, 3, 5, 7, 0, 1]))  # Output: 8\n```"}, {"generated_text": "Here's a Python program that uses the mathematical formula for the sum of an arithmetic series to find the missing number in linear time complexity with constant extra space complexity.\n\n```python\nfrom typing import List\n\nclass Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        # Calculate the sum of the arithmetic series using the formula n*(n+1)//2\n        n = len(nums)\n        total_sum = n * (n + 1) // 2\n        \n        # Calculate the sum of the numbers in the array\n        array_sum = sum(nums)\n        \n        # The missing number is the difference between the total sum and the array sum\n        return total_sum - array_sum\n```\n\nHere's an explanation of how the code works:\n\n1. The `missingNumber` method takes an array of integers as input and calculates the total sum of the arithmetic series using the formula `n*(n+1)//2`, where `n` is the length of the array.\n2. The method then calculates the sum of the numbers in the array using the `sum` function.\n3. The missing number is the difference between the total sum and the array sum.\n4. The method returns the missing number.\n\nThis solution has a time complexity of O(n) because it uses the `sum` function to calculate the sum of the numbers in the array, which takes linear time. The space complexity is O(1) because it only uses a constant amount of extra space to store the total sum and the array sum.\n\nExample use cases:\n\n```python\nsolution = Solution()\n\n# Example 1:\nnums = [3, 0, 1]\nprint(solution.missingNumber(nums))  # Output: 2\n\n# Example 2:\nnums = [9, 6, 4, 2, 3, 5, 7, 0, 1]\nprint(solution.missingNumber(nums))  # Output: 8\n```"}, {"generated_text": "Here's a Python solution for the problem using the mathematical property of the sum of an arithmetic series:\n\n```python\nfrom typing import List\n\nclass Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        n = len(nums)\n        total_sum = n * (n + 1) // 2\n        actual_sum = sum(nums)\n        return total_sum - actual_sum\n```\n\nExplanation:\n\n*   The total sum of numbers from 0 to n can be calculated using the formula `n * (n + 1) / 2`.\n*   The actual sum of the numbers in the array can be calculated using the built-in `sum` function.\n*   The missing number is the difference between the total sum and the actual sum.\n\nThis solution has a linear runtime complexity of O(n) because it involves a single pass through the array to calculate the actual sum, and it has a constant extra space complexity of O(1) because it uses a constant amount of space to store the total sum and the actual sum.\n\nExample usage:\n\n```python\nsolution = Solution()\nprint(solution.missingNumber([3, 0, 1]))  # Output: 2\nprint(solution.missingNumber([9, 6, 4, 2, 3, 5, 7, 0, 1]))  # Output: 8\n```"}, {"generated_text": "Here's a Python program that solves the problem using the XOR operation, which has a linear runtime complexity and constant extra space complexity.\n\n```python\nfrom typing import List\n\nclass Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        # XOR all numbers from 0 to n\n        n = len(nums)\n        missing = n\n        for i in range(n):\n            missing ^= i\n            missing ^= nums[i]\n        \n        return missing\n```\n\nExplanation:\n\nThe XOR operation has the following properties:\n\n- `a ^ a = 0` (XORing a number with itself results in 0)\n- `a ^ 0 = a` (XORing a number with 0 results in the number itself)\n- `a ^ b ^ a = b` (XORing a number with another number and then XORing it with the first number again results in the second number)\n\nUsing these properties, we can XOR all numbers from 0 to `n` and all numbers in the input array. The result will be the missing number.\n\nHere's how it works:\n\n- We start by initializing `missing` to `n`, which is the total number of numbers from 0 to `n`.\n- We then iterate over the input array and XOR `missing` with each number in the array. This effectively removes the number from `missing`.\n- After the loop, `missing` will be the XOR of all numbers from 0 to `n` minus the numbers in the input array. This is equivalent to the missing number.\n- Finally, we return `missing`, which is the missing number.\n\nThis solution has a linear runtime complexity of O(n) and a constant extra space complexity of O(1), making it efficient for large input arrays."}, {"generated_text": "To solve this problem, we can use the mathematical formula for the sum of an arithmetic series. The sum of numbers from 0 to n is given by n*(n+1)//2. We can calculate this sum and then subtract the sum of the numbers in the array to find the missing number.\n\nHere is the Python code for the problem:\n\n```python\nfrom typing import List\n\nclass Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        n = len(nums)\n        total_sum = n * (n + 1) // 2\n        array_sum = sum(nums)\n        return total_sum - array_sum\n```\n\nThis solution runs in linear time complexity (O(n)) because we are using the built-in sum function which iterates over the array once. It also runs in constant space complexity (O(1)) because we are only using a constant amount of space to store the variables n, total_sum, and array_sum.\n\nExample usage:\n\n```python\nsolution = Solution()\nprint(solution.missingNumber([3, 0, 1]))  # Output: 2\nprint(solution.missingNumber([9, 6, 4, 2, 3, 5, 7, 0, 1]))  # Output: 8\n```\n\nThis solution is efficient and easy to understand, making it a good choice for this problem."}, {"generated_text": "We can solve this problem using the mathematical formula for the sum of an arithmetic series. The sum of the numbers from 0 to n is given by n*(n+1)//2. We can calculate this sum and then subtract the sum of the numbers in the given array to find the missing number.\n\nHere is the Python code for the problem:\n\n```python\nfrom typing import List\n\nclass Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        n = len(nums)\n        total_sum = n * (n + 1) // 2\n        array_sum = sum(nums)\n        return total_sum - array_sum\n```\n\nThis solution works in linear time complexity (O(n)) because we are using the built-in `sum` function to calculate the sum of the numbers in the array, which has a time complexity of O(n). We are also using the mathematical formula to calculate the total sum, which is a constant time operation.\n\nThis solution also works in constant extra space complexity because we are not using any extra space that scales with the input size. We are only using a constant amount of space to store the variables `n`, `total_sum`, and `array_sum`.\n\nThis solution is also very efficient because it only requires a single pass through the array to calculate the sum of the numbers, and then it uses a constant time operation to calculate the total sum."}, {"generated_text": "Here's a Python solution that uses the mathematical property of the sum of numbers from 0 to n. This solution runs in linear time complexity (O(n)) and constant space complexity (O(1)).\n\n```python\nfrom typing import List\n\nclass Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        # Calculate the sum of numbers from 0 to n\n        n = len(nums)\n        expected_sum = n * (n + 1) // 2\n        actual_sum = sum(nums)\n        \n        # The missing number is the difference between the expected sum and the actual sum\n        return expected_sum - actual_sum\n```\n\nHere's an explanation of how this solution works:\n\n1. We first calculate the sum of numbers from 0 to n using the formula `n * (n + 1) // 2`.\n2. We then calculate the sum of the numbers in the input array `nums`.\n3. The missing number is the difference between the expected sum and the actual sum.\n\nThis solution runs in linear time complexity because we only need to iterate over the input array once to calculate the sum. It also runs in constant space complexity because we only need a few extra variables to store the expected sum, actual sum, and the missing number.\n\nExample usage:\n\n```python\nsolution = Solution()\nprint(solution.missingNumber([3, 0, 1]))  # Output: 2\nprint(solution.missingNumber([9, 6, 4, 2, 3, 5, 7, 0, 1]))  # Output: 8\n```"}, {"generated_text": "Here's a Python solution that uses the mathematical property of the sum of an arithmetic series to find the missing number in linear time complexity and constant extra space complexity.\n\n```python\nfrom typing import List\n\nclass Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        n = len(nums)\n        total_sum = n * (n + 1) // 2\n        actual_sum = sum(nums)\n        return total_sum - actual_sum\n```\n\nExplanation:\n\n*   We first calculate the total sum of numbers from 0 to n using the formula `n * (n + 1) / 2`.\n*   Then, we calculate the actual sum of the numbers in the given array.\n*   The missing number is the difference between the total sum and the actual sum.\n\nThis solution runs in linear time complexity because it involves a single pass through the array to calculate the actual sum. It also uses constant extra space complexity because it only uses a few variables to store the total sum and the actual sum.\n\nExample usage:\n\n```python\nsolution = Solution()\nprint(solution.missingNumber([3, 0, 1]))  # Output: 2\nprint(solution.missingNumber([9, 6, 4, 2, 3, 5, 7, 0, 1]))  # Output: 8\n```"}, {"generated_text": "Here's a Python solution that uses the mathematical property of the sum of numbers from 0 to n. This solution has a linear runtime complexity and constant extra space complexity.\n\n```python\nfrom typing import List\n\nclass Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        n = len(nums)\n        total_sum = n * (n + 1) // 2\n        actual_sum = sum(nums)\n        \n        return total_sum - actual_sum\n```\n\nExplanation:\n\n- We first calculate the total sum of numbers from 0 to n using the formula `n * (n + 1) / 2`.\n- Then we calculate the actual sum of numbers in the input array.\n- The missing number is the difference between the total sum and the actual sum.\n\nThis solution works because the total sum of numbers from 0 to n is always equal to the sum of the numbers in the array plus the missing number. By subtracting the actual sum from the total sum, we get the missing number.\n\nExample usage:\n\n```python\nsolution = Solution()\nprint(solution.missingNumber([3, 0, 1]))  # Output: 2\nprint(solution.missingNumber([9, 6, 4, 2, 3, 5, 7, 0, 1]))  # Output: 8\n```"}, {"generated_text": "Here's a Python solution that uses the mathematical property of the sum of an arithmetic series to find the missing number. This solution runs in linear time complexity (O(n)) and uses constant extra space complexity (O(1)).\n\n```python\nfrom typing import List\n\nclass Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        # Calculate the sum of the first n natural numbers using Gauss' formula\n        n = len(nums)\n        total_sum = n * (n + 1) // 2\n        \n        # Calculate the sum of the given array\n        array_sum = sum(nums)\n        \n        # The missing number is the difference between the total sum and the array sum\n        return total_sum - array_sum\n```\n\nHere's an explanation of how this solution works:\n\n1. We first calculate the sum of the first `n` natural numbers using Gauss' formula: `n * (n + 1) / 2`. This formula is derived by summing the arithmetic series `1 + 2 + 3 +... + n`.\n2. We then calculate the sum of the given array using the built-in `sum` function.\n3. The missing number is the difference between the total sum and the array sum. This is because the total sum includes all numbers from 0 to `n`, while the array sum only includes the numbers present in the array.\n\nThis solution runs in linear time complexity (O(n)) because we only need to iterate over the array once to calculate the sum. It uses constant extra space complexity (O(1)) because we only need to store a few variables to keep track of the sums.\n\nYou can test this solution using the examples provided:\n\n```python\nsolution = Solution()\nprint(solution.missingNumber([3, 0, 1]))  # Output: 2\nprint(solution.missingNumber([9, 6, 4, 2, 3, 5, 7, 0, 1]))  # Output: 8\n```"}, {"generated_text": "Here's a Python program that uses the mathematical formula for the sum of an arithmetic series to find the missing number in linear time complexity and constant extra space complexity.\n\n```python\nfrom typing import List\n\nclass Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        # Calculate the sum of the arithmetic series\n        n = len(nums)\n        total_sum = n * (n + 1) // 2\n        \n        # Calculate the sum of the given numbers\n        actual_sum = sum(nums)\n        \n        # The missing number is the difference between the total sum and the actual sum\n        return total_sum - actual_sum\n```\n\nThis program works by first calculating the total sum of the numbers from 0 to n using the formula for the sum of an arithmetic series: `n * (n + 1) / 2`. It then calculates the sum of the given numbers using the built-in `sum` function. The missing number is the difference between the total sum and the actual sum.\n\nThis solution runs in linear time complexity, O(n), because the `sum` function iterates over the list once. It also runs in constant extra space complexity, O(1), because it only uses a constant amount of extra space to store the total sum, actual sum, and the missing number.\n\nExample usage:\n\n```python\nsolution = Solution()\nprint(solution.missingNumber([3, 0, 1]))  # Output: 2\nprint(solution.missingNumber([9, 6, 4, 2, 3, 5, 7, 0, 1]))  # Output: 8\n```"}]}