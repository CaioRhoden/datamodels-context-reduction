[{"task_id": 2545, "output": ["import math\n\ndef calculate_probability():\n    # Read the number of test cases\n    T = int(input())\n\n    # Iterate over each test case\n    for _ in range(T):\n        # Read the probability of rainfall and time\n        P = float(input().split()[0])\n        time = int(input().split()[1])\n\n        # Calculate the probability\n        probability = 1 - (1 - P) ** (time // 1440)\n        probability *= (1 - P) ** (time % 1440)\n\n        # Round the answer to 4 decimal places\n        probability = round(probability, 4)\n\n        # Print the answer\n        print(probability)\n\n# Call the function to run the program\ncalculate_probability()", "import math\n\ndef calculate_probability():\n    MOD = 10**9 + 7\n    T = int(input())\n    for _ in range(T):\n        P, time = map(float, input().split())\n        D = (1 + P)\n        R = 1\n        while time > 0:\n            if time % 2:\n                R = R * D % MOD\n            D = D * D % MOD\n            time //= 2\n        print(f\"{R:.4f}\")\n\ncalculate_probability()", "import math\n\nMOD = 10**9 + 7\n\ndef bin_exponentiation(base, exponent):\n    \"\"\"\n    Compute (base ^ exponent) % MOD efficiently using binary exponentiation.\n    \"\"\"\n    result = 1\n    while exponent > 0:\n        if exponent % 2 == 1:\n            result = (result * base) % MOD\n        exponent //= 2\n        base = (base * base) % MOD\n    return result\n\ndef compute_probability(rainfall_prob, travel_time):\n    \"\"\"\n    Compute the probability that it rains during Raj's commute.\n    \"\"\"\n    # Since there are 1440 minutes in a day, and travel_time is a divisor of 1440,\n    # we can simply square the probability of rain and divide by 2 to get the probability\n    # that it rains during the travel time.\n    return bin_exponentiation(rainfall_prob, 2 * travel_time // 1440)\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\nfor _ in range(num_test_cases):\n    # Read the probability of rain and travel time\n    rainfall_prob, travel_time = map(float, input().split())\n    # Compute and print the probability of rain during Raj's commute\n    probability = compute_probability(rainfall_prob, travel_time)\n    print(f\"{probability:.4f}\")", "import math\n\nfor _ in range(int(input())):\n    P, time = map(float, input().split())\n    print(round((1 - (1 - P)**time), 4))", "import math\n\ndef calculate_probability(p, time):\n    \"\"\"\n    Calculate the probability of rainfall during Raj's journey.\n\n    Args:\n    p (float): Probability of rainfall today.\n    time (int): Time it takes for Raj to reach his office in minutes.\n\n    Returns:\n    float: Probability of rainfall during Raj's journey.\n    \"\"\"\n    # If it doesn't rain today, the probability is 0\n    if p == 0:\n        return 0\n\n    # Calculate the probability of no rainfall during Raj's journey\n    prob_no_rain = (1 - p) ** (time // 1440)\n\n    # Calculate the probability of rainfall during Raj's journey\n    prob_rain = 1 - prob_no_rain\n\n    return round(prob_rain, 4)\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Process each test case\nfor _ in range(test_cases):\n    # Read the probability of rainfall and time\n    p, time = input().split()\n    p = float(p)\n    time = int(time)\n\n    # Calculate and print the probability of rainfall during Raj's journey\n    print(calculate_probability(p, time))", "import math\n\nT = int(input())\nfor _ in range(T):\n    P, time = map(float, input().split())\n    # Calculate the probability of rain during the commute\n    # Since time is a perfect divisor of 1440, we can calculate the probability\n    # as the probability of rain during the first half of the time, multiplied\n    # by the probability of no rain during the remaining half of the time.\n    prob_rain = P * (1 - P) ** (time // 2)\n    print(f\"{prob_rain:.4f}\")", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculates the probability of rainfall during Raj's commute.\n\n    Args:\n    test_cases (int): The number of test cases.\n\n    Returns:\n    None\n    \"\"\"\n    for _ in range(test_cases):\n        p, time = map(float, input().split())\n        # Calculate the probability of no rainfall\n        no_rain_probability = 1 - p\n        # Calculate the probability of rainfall using the formula\n        # P(rain) = 1 - P(no rain) * (time / 1440)\n        rainfall_probability = 1 - no_rain_probability * (time / 1440)\n        # Round the answer to 4 decimal places\n        rainfall_probability = round(rainfall_probability, 4)\n        print(f\"{rainfall_probability:.4f}\")\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Call the function with the test cases\ncalculate_rainfall_probability(test_cases)", "import math\n\ndef calculate_probability():\n    MOD = 10 ** 9 + 7\n    T = int(input())\n    for _ in range(T):\n        P, time = map(float, input().split())\n        P = P / 2\n        R = 1\n        D = P\n        T //= 2\n        while T > 0:\n            if T % 2:\n                R = R * D % MOD\n            D = D * D % MOD\n            T //= 2\n        print(f\"{R}\")\n\ncalculate_probability()", "import math\n\ndef calculate_rainfall_probability(p, time):\n    \"\"\"\n    Calculate the probability of rain during Raj's commute.\n\n    Args:\n        p (float): Probability of rain today.\n        time (int): Time taken to reach the office in minutes.\n\n    Returns:\n        float: Probability of rain during the commute.\n    \"\"\"\n    # Calculate the probability of no rain during the commute\n    no_rain_probability = (1 - p) ** (time // 1440)\n    \n    # Calculate the probability of rain during the commute\n    rainfall_probability = 1 - no_rain_probability\n    \n    return round(rainfall_probability, 4)\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Process each test case\nfor _ in range(num_test_cases):\n    # Read the probability of rain and time taken to reach the office\n    p, time = map(float, input().split())\n    \n    # Calculate and print the probability of rain during the commute\n    print(calculate_rainfall_probability(p, time))", "import math\n\ndef calculate_rainfall_probability():\n    MOD = 10**9 + 7\n    t = int(input())\n    for _ in range(t):\n        p, time = map(float, input().split())\n        # Convert probability to decimal format\n        p = p / 10\n        # Calculate the number of minutes it will rain\n        num_rain_minutes = time * p\n        # Calculate the number of minutes it will not rain\n        num_no_rain_minutes = time - num_rain_minutes\n        # Calculate the probability that it will rain during the time Raj is on his way\n        rainfall_probability = 1 - (1 - p) ** num_no_rain_minutes\n        print(f'{rainfall_probability:.4f}')\n\n# Run the program\ncalculate_rainfall_probability()", "import math\n\n# Function to calculate the probability of rain during Raj's journey\ndef calculate_probability(rain_probability, travel_time):\n    # Calculate the probability that it will not rain during Raj's journey\n    no_rain_probability = 1 - rain_probability\n    \n    # Calculate the probability that it will rain during Raj's journey\n    rain_probability_during_journey = 1 - math.pow(no_rain_probability, travel_time)\n    \n    # Round the answer to 4 decimal places\n    return round(rain_probability_during_journey, 4)\n\n# Number of test cases\ntest_cases = int(input())\n\n# Process each test case\nfor _ in range(test_cases):\n    # Read the input values\n    rain_probability, travel_time = map(float, input().split())\n    \n    # Calculate and print the result\n    result = calculate_probability(rain_probability, travel_time)\n    print(result)", "import math\n\ndef calculate_probability(rain_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on his way to the office.\n\n    Args:\n        rain_probability (float): The probability of rain today.\n        travel_time (int): The time it will take for Raj to reach his office in minutes.\n\n    Returns:\n        float: The probability that it rains during the time Raj is on his way to the office.\n    \"\"\"\n    # Calculate the number of times the travel time can be divided by 1440\n    # This is equivalent to the number of times the probability of rain can be squared\n    num = 1\n    for _ in range(travel_time // 1440):\n        num *= rain_probability\n    # Calculate the probability that it does not rain during the travel time\n    num *= (1 - rain_probability) ** (travel_time % 1440)\n    # Return the result\n    return num\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Process each test case\nfor _ in range(num_test_cases):\n    # Read the probability of rain and travel time\n    rain_probability, travel_time = map(float, input().split())\n    # Calculate and print the result\n    result = calculate_probability(rain_probability, travel_time)\n    print(f\"{result:.4f}\")", "import math\n\ndef calculate_probability(rain_probability, travel_time):\n    \"\"\"\n    Calculate the probability of rainfall during a journey.\n\n    Args:\n        rain_probability (float): The probability of rainfall today.\n        travel_time (int): The time it will take for Raj to reach his office.\n\n    Returns:\n        float: The probability of rainfall during the journey.\n    \"\"\"\n    return rain_probability * (1 - (1 - rain_probability) ** (travel_time // 1440))\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Process each test case\nfor _ in range(test_cases):\n    # Read the probability of rainfall and travel time\n    rain_probability, travel_time = map(float, input().split())\n\n    # Calculate the probability of rainfall during the journey\n    probability = calculate_probability(rain_probability, travel_time)\n\n    # Round the result to 4 decimal places\n    probability = round(probability, 4)\n\n    # Print the result\n    print(probability)", "import math\n\ndef calculate_rainfall_probability(T, t, P):\n    \"\"\"\n    Calculate the probability that it rains during a certain time period.\n\n    Args:\n        T (float): The overall probability of rainfall.\n        t (int): The time period in minutes.\n        P (float): The probability that it rains during the time period.\n\n    Returns:\n        float: The probability that it rains during the time period.\n    \"\"\"\n    # Since the time period is a perfect divisor of 1440, we can calculate the probability\n    # using the formula for the probability of a geometric distribution.\n    # However, this problem can be simplified by using the formula for the probability\n    # of the time period being less than or equal to the given time.\n    # We can use the cumulative distribution function of the standard normal distribution\n    # to calculate this probability.\n\n    # Calculate the z-score\n    z = (t / 1440) * math.sqrt(1 / P)\n\n    # Calculate the cumulative distribution function\n    probability = (1 + math.erf(z / math.sqrt(2))) / 2\n\n    return probability\n\n# Read the number of test cases\nT = int(input())\n\n# Iterate over each test case\nfor _ in range(T):\n    # Read the probability of rainfall and time period\n    P, t = map(float, input().split())\n\n    # Calculate the probability that it rains during the time period\n    probability = calculate_rainfall_probability(P, t, P)\n\n    # Print the result, rounded to 4 decimal places\n    print(\"{:.4f}\".format(probability))", "import math\n\nT = int(input())  # Number of test cases\n\nfor _ in range(T):\n    P, time = map(float, input().split())  # Probability of rainfall and travel time\n\n    # Calculate the probability of no rainfall during travel time\n    no_rain_probability = (1 - P) ** (time // 1440)\n\n    # Calculate the probability of rainfall during travel time\n    rain_probability = 1 - no_rain_probability\n\n    # Round the answer to 4 decimal places\n    rain_probability = round(rain_probability, 4)\n\n    print(rain_probability)", "import math\n\nT = int(input())\nfor _ in range(T):\n    P, time = map(float, input().split())\n    P = P / 2\n    time = time / 1440\n    result = 1 - (1 - P) ** time\n    print(\"{:.4f}\".format(result))", "import math\n\ndef calculate_probability():\n    MOD = 10**9 + 7\n    T = int(input())\n    for _ in range(T):\n        P, time = map(float, input().split())\n        D = math.floor(time / 1440) + 1\n        R = 1\n        for _ in range(D):\n            if _ % 2:\n                R = (R * P) % MOD\n            P = (P * (1 - P)) % MOD\n        print('{:.4f}'.format(R))\n\ncalculate_probability()", "import math\n\ndef calculate_rain_probability(time, probability):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes for Raj to reach his office.\n\n    Args:\n        time (int): The time it takes for Raj to reach his office in minutes.\n        probability (float): The probability that it will rain today.\n\n    Returns:\n        float: The probability that it rains during the time it takes for Raj to reach his office.\n    \"\"\"\n    # Calculate the probability that it does not rain during the given time\n    no_rain_probability = (1 - probability) ** time\n    \n    # The probability that it rains during the given time is 1 minus the probability that it does not rain\n    rain_probability = 1 - no_rain_probability\n    \n    # Round the result to 4 decimal places\n    return round(rain_probability, 4)\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Process each test case\nfor _ in range(test_cases):\n    # Read the probability and time for the current test case\n    probability, time = map(float, input().split())\n    \n    # Calculate and print the result\n    print(calculate_rain_probability(time, probability))", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the probability of rainfall during Raj's commute.\n\n    Args:\n        test_cases (int): Number of test cases.\n\n    Returns:\n        list: List of probabilities for each test case.\n    \"\"\"\n    probabilities = []\n    for _ in range(test_cases):\n        P, time = map(float, input().split())\n        # Since time is a perfect divisor of 1440, we can calculate the probability using modular arithmetic\n        # If P is less than or equal to 0.5, the probability of rain during the commute is 0\n        # If P is greater than 0.5, the probability of rain during the commute is 1 - (1 - P)^time\n        if P <= 0.5:\n            probability = 0\n        else:\n            probability = 1 - (1 - P) ** (time // 12)  # 1440 / 12 = 120 minutes per hour\n        # Round the probability to 4 decimal places\n        probability = round(probability, 4)\n        probabilities.append(str(probability))\n    return probabilities\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Calculate and print the probabilities for each test case\nprobabilities = calculate_rainfall_probability(test_cases)\nfor probability in probabilities:\n    print(probability)", "import math\n\ndef calculate_probability_of_rain(rain_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n        rain_probability (float): The probability of rainfalls today.\n        travel_time (int): The time it will take for Raj to reach his office.\n\n    Returns:\n        float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the probability that it does not rain during the travel time\n    no_rain_probability = (1 - rain_probability) ** (travel_time / 1440)\n\n    # Calculate the probability that it rains during the travel time\n    rain_probability_during_travel = 1 - no_rain_probability\n\n    return round(rain_probability_during_travel, 4)\n\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the rain probability and travel time\n        rain_probability, travel_time = map(float, input().split())\n\n        # Calculate and print the probability that it rains during the travel time\n        print(calculate_probability_of_rain(rain_probability, travel_time))\n\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n    rainfall_probability (float): The probability that it will rain today.\n    travel_time (int): The time (in minutes) it will take for Raj to reach his office.\n\n    Returns:\n    float: The probability that it rains during the travel time.\n    \"\"\"\n    # Calculate the probability that it does not rain during the travel time\n    no_rain_probability = (1 - rainfall_probability) ** travel_time\n    \n    # Calculate the probability that it rains during the travel time\n    rain_probability = 1 - no_rain_probability\n    \n    return round(rain_probability, 4)\n\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the probability of rainfall and travel time\n        rainfall_probability, travel_time = map(float, input().split())\n\n        # Calculate and print the probability\n        print(calculate_probability(rainfall_probability, travel_time))\n\n\nif __name__ == \"__main__\":\n    main()", "import math\n\nMOD = 10 ** 9 + 7\n\ndef calculate_probability(rain_probability, travel_time):\n    # Calculate the probability of rain during the travel time\n    rain_probability_during_travel = rain_probability ** (travel_time // 1440) * math.sin(2 * math.pi * (travel_time // 1440)) / (2 * math.pi)\n\n    # Calculate the probability of no rain during the travel time\n    no_rain_probability_during_travel = (1 - rain_probability) ** (travel_time // 1440) * math.cos(2 * math.pi * (travel_time // 1440)) / (2 * math.pi)\n\n    # Return the probability of rain during the travel time\n    return round(rain_probability_during_travel, 4)\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\nfor _ in range(num_test_cases):\n    # Read the rain probability and travel time\n    rain_probability, travel_time = input().split()\n    rain_probability = float(rain_probability)\n    travel_time = int(travel_time)\n\n    # Calculate and print the probability of rain during the travel time\n    print(calculate_probability(rain_probability, travel_time))", "import math\n\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability of rain during Raj's trip to the office.\n\n    Args:\n        rainfall_probability (float): The probability of rain today.\n        travel_time (int): The time it will take for Raj to reach his office.\n\n    Returns:\n        float: The probability of rain during Raj's trip.\n    \"\"\"\n    # Calculate the probability of no rain during the trip\n    no_rain_probability = (1 - rainfall_probability) ** (travel_time // 1440)\n    # Calculate the probability of rain during the trip\n    rain_probability = 1 - no_rain_probability\n    return round(rain_probability, 4)\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Process each test case\nfor _ in range(num_test_cases):\n    # Read the probability of rain and travel time\n    rainfall_probability, travel_time = map(float, input().split())\n    # Calculate and print the probability of rain during the trip\n    print(calculate_probability(rainfall_probability, travel_time))", "import math\n\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n    rainfall_probability (float): The probability of rainfalls today.\n    travel_time (int): The time it takes for Raj to reach his office in minutes.\n\n    Returns:\n    float: The probability that it rains during the time Raj is on the way to his office.\n    \"\"\"\n    # Since the probability of rain during travel is the same as the probability of rain today,\n    # we can simply multiply the two probabilities.\n    return rainfall_probability * (travel_time / 1440)\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Process each test case\nfor _ in range(test_cases):\n    # Read the rainfall probability and travel time\n    rainfall_probability, travel_time = map(float, input().split())\n\n    # Calculate and print the result, rounded to 4 decimal places\n    result = calculate_probability(rainfall_probability, travel_time)\n    print(f\"{result:.4f}\")", "import math\n\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes to reach the office.\n\n    Args:\n    rainfall_probability (float): The probability of rainfall today.\n    travel_time (int): The time it takes to reach the office in minutes.\n\n    Returns:\n    float: The probability that it rains during the time it takes to reach the office.\n    \"\"\"\n    # If the rainfall probability is 0, the probability of rain during travel is 0\n    if rainfall_probability == 0:\n        return 0\n\n    # If the travel time is a multiple of 30 minutes, the probability of rain during travel is 0\n    if travel_time % 30 == 0:\n        return 0\n\n    # Calculate the probability that it rains during travel\n    probability = (rainfall_probability / (1 - rainfall_probability)) * (travel_time / 1440)\n\n    return round(probability, 4)\n\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Process each test case\nfor _ in range(test_cases):\n    # Read the rainfall probability and travel time\n    rainfall_probability, travel_time = map(float, input().split())\n\n    # Calculate and print the probability\n    print(calculate_probability(rainfall_probability, travel_time))", "import math\n\ndef rainfall_probability():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Iterate over each test case\n    for _ in range(test_cases):\n        # Read the probability of rain and travel time\n        probability = float(input().split()[0])\n        travel_time = int(input().split()[1])\n\n        # Calculate the probability that it rains during the journey\n        # This is equivalent to 1 minus the probability that it doesn't rain\n        probability_rains = 1 - (1 - probability) ** (travel_time // 1440)\n\n        # Print the result rounded to 4 decimal places\n        print(f\"{probability_rains:.4f}\")\n\n# Run the program\nrainfall_probability()", "import math\n\ndef calculate_rainfall_probability():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    for _ in range(num_test_cases):\n        # Read the probability of rain and time\n        probability_of_rain, time = map(float, input().split())\n\n        # Calculate the probability that it rains during the journey\n        rainfall_probability = (1 - probability_of_rain) ** time\n\n        # Round the result to 4 decimal places\n        rainfall_probability = round(rainfall_probability, 4)\n\n        # Print the result\n        print(rainfall_probability)\n\nif __name__ == \"__main__\":\n    calculate_rainfall_probability()", "def calculate_probability():\n    MOD = 10**9 + 7\n    for _ in range(int(input())):\n        P, time = map(float, input().split())\n        D = (P + (1 - P)) // 2\n        R = 1\n        for _ in range(time.bit_length()):\n            if time & 1:\n                R = (R * D) % MOD\n            D = (D * D) % MOD\n            time >>= 1\n        print(round(R, 4))\n\ncalculate_probability()", "import math\n\ndef calculate_probability(T, time, P):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes for Raj to reach his office.\n\n    Args:\n        T (int): The number of test cases.\n        time (int): The time it takes for Raj to reach his office in minutes.\n        P (float): The probability that it will rain today.\n\n    Returns:\n        None\n    \"\"\"\n    # Calculate the probability that it does not rain\n    P_not_rain = 1 - P\n\n    # Calculate the probability that it rains during the time it takes for Raj to reach his office\n    # using the formula for the probability of the union of two events\n    # P(rain) = P(rain and <time>) + P(rain and >=time)\n    # Since the events are independent, we can multiply the probabilities\n    # P(rain and <time>) = P(rain) * P(not rain in the remaining time)\n    # P(rain and >=time) = P(not rain in the remaining time) * P(rain)\n    probability_rain = (P * (1 - P_not_rain)) + (P_not_rain * P)\n\n    # Return the probability rounded to 4 decimal places\n    return round(probability_rain, 4)\n\n# Read the number of test cases\nT = int(input())\n\n# Process each test case\nfor _ in range(T):\n    # Read the probability and time for the current test case\n    P, time = map(float, input().split())\n\n    # Calculate and print the result\n    result = calculate_probability(T, time, P)\n    print(result)", "import math\n\ndef calculate_probability():\n    MOD = 10 ** 9 + 7\n    T = int(input())\n    for _ in range(T):\n        P, time = map(float, input().split())\n        D = (1 + P) / 2\n        R = 1\n        while time > 0:\n            if time % 2:\n                R = (R * D) % MOD\n            D = (D * D) % MOD\n            time //= 2\n        print('{:.4f}'.format(R))\n\ncalculate_probability()", "import math\n\nT = int(input())\nfor _ in range(T):\n    P, time = map(float, input().split())\n    probability = 1 - (1 - P) ** (time // 12)\n    print(\"{0:4.4f}\".format(probability))", "def calculate_rain_probability():\n    MOD = 10 ** 9 + 7\n    t = int(input())\n    for _ in range(t):\n        P, time = map(float, input().split())\n        D = (1 + P) * (1 - P)\n        R = 1\n        while time > 0:\n            if time % 2:\n                R = R * D % MOD\n            D = D * D % MOD\n            time //= 2\n        print(format(R, \".4f\"))\n\ncalculate_rain_probability()", "import math\n\ndef rainfall_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on his way to the office.\n\n    Args:\n        p (float): Probability of rainfall today (0.0 <= p <= 0.5)\n        time (int): Travel time in minutes (10 <= time <= 720)\n\n    Returns:\n        float: Probability that it rains during the travel time\n    \"\"\"\n    # Calculate the number of intervals of 10 minutes in the travel time\n    num_intervals = time // 10\n\n    # If p is 0, the probability of rain in any interval is 0\n    if p == 0:\n        return 0\n\n    # Calculate the probability of no rain in the travel time\n    prob_no_rain = (1 - p) ** num_intervals\n\n    # Calculate the probability of rain in the travel time\n    prob_rain = 1 - prob_no_rain\n\n    return round(prob_rain, 4)\n\ndef main():\n    \"\"\"\n    Main function to read input and print output.\n    \"\"\"\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Read the input for each test case\n    for _ in range(num_test_cases):\n        # Read the probability and travel time\n        p, time = map(float, input().split())\n\n        # Calculate and print the probability of rain\n        print(rainfall_probability(p, time))\n\nif __name__ == \"__main__\":\n    main()", "def calculate_probability_of_rain(rain_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n        rain_probability (float): The probability that it will rain today.\n        travel_time (int): The time (in minutes) it will take for Raj to reach his office.\n\n    Returns:\n        float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the fraction of the total time that Raj spends on the way\n    travel_fraction = 1 / (1440 // travel_time)\n    \n    # Calculate the probability that it rains during the time Raj is on the way\n    probability_of_rain_during_travel = rain_probability * travel_fraction\n    \n    return round(probability_of_rain_during_travel, 4)\n\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Process each test case\nfor _ in range(num_test_cases):\n    # Read the probability of rain and travel time\n    rain_probability, travel_time = input().split()\n    rain_probability = float(rain_probability)\n    travel_time = int(travel_time)\n    \n    # Calculate and print the result\n    result = calculate_probability_of_rain(rain_probability, travel_time)\n    print(result)", "import math\n\ndef calculate_probability(rainfall_probability, travel_time):\n    # Calculate the probability that it rains during the travel time\n    probability = 1 - (1 - rainfall_probability) ** (1440 // travel_time)\n    \n    # Round the answer to 4 decimal places\n    return round(probability, 4)\n\n# Get the number of test cases\nnum_test_cases = int(input())\n\n# Loop through each test case\nfor _ in range(num_test_cases):\n    # Get the rainfall probability and travel time\n    rainfall_probability, travel_time = map(float, input().split())\n    \n    # Calculate and print the result\n    print(calculate_probability(rainfall_probability, travel_time))", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the probability of rainfall during a given time period.\n\n    Args:\n        test_cases (list): A list of tuples containing the probability of rainfall and time.\n\n    Returns:\n        list: A list of tuples containing the result for each test case.\n    \"\"\"\n    results = []\n    for p, time in test_cases:\n        # Calculate the probability of no rainfall during the given time period\n        no_rainfall_probability = (1 - p) ** (time / 1440)\n        # Calculate the probability of rainfall during the given time period\n        rainfall_probability = 1 - no_rainfall_probability\n        # Round the result to 4 decimal places\n        result = round(rainfall_probability, 4)\n        results.append(result)\n    return results\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n    # Read the test cases\n    test_cases_data = []\n    for _ in range(test_cases):\n        p, time = map(float, input().split())\n        test_cases_data.append((p, time))\n    # Calculate the results\n    results = calculate_rainfall_probability(test_cases_data)\n    # Print the results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "import math\n\nMOD = 10**9 + 7\n\ndef calculate_rainfall_probability():\n    T = int(input())\n    for _ in range(T):\n        P, time = map(float, input().split())\n        D = (P + 1 - P * time) / (1 - P * time)\n        R = 1\n        for i in range(time):\n            R = R * D % MOD\n        R = round(R, 4)\n        print(R)\n\ncalculate_rainfall_probability()", "import math\n\ndef calculate_probability():\n    MOD = 10 ** 9 + 7\n    t = int(input())\n    for _ in range(t):\n        probability, time = map(float, input().split())\n        D = (probability + 1) / 2\n        R = 1\n        while time > 0:\n            if time % 2:\n                R = R * D % MOD\n            D = D * D % MOD\n            time //= 2\n        print(f'{R:.4f}')\n\ncalculate_probability()", "import math\n\ndef calculate_rainfall_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the given time.\n\n    Args:\n    p (float): Probability of rain (0.0 <= p <= 0.5)\n    time (int): Time in minutes it takes for Raj to reach his office (10 <= time <= 720)\n\n    Returns:\n    float: Probability that it rains during the given time, rounded to 4 decimal places\n    \"\"\"\n    # Calculate the number of intervals in 1440 minutes\n    intervals = 1440 // time\n    \n    # Calculate the probability that it rains during the given time\n    rainfall_probability = (1 - p) ** intervals\n    \n    return round(p * rainfall_probability, 4)\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Read the input for each test case\nfor _ in range(test_cases):\n    p, time = map(float, input().split())\n    \n    # Calculate and print the rainfall probability\n    print(calculate_rainfall_probability(p, time))", "def calculate_probability_of_rainfall(rain_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during Raj's commute.\n\n    Args:\n        rain_probability (float): The probability of rainfalls today (0.0 - 0.5).\n        travel_time (int): The time it takes for Raj to reach his office (in minutes).\n\n    Returns:\n        float: The probability that it rains during Raj's commute.\n    \"\"\"\n    # Calculate the probability of no rain during the travel time\n    no_rain_probability = (1 - rain_probability) ** (travel_time // 1440)\n    \n    # The probability of rain during the travel time is 1 - the probability of no rain\n    return 1 - no_rain_probability\n\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Iterate over each test case\n    for _ in range(test_cases):\n        # Read the rain probability and travel time\n        rain_probability, travel_time = map(float, input().split())\n\n        # Calculate and print the probability of rain during the travel time\n        print(f\"{calculate_probability_of_rainfall(rain_probability, travel_time):.4f}\")\n\n\nif __name__ == \"__main__\":\n    main()", "import math\n\nT = int(input())\n\nfor _ in range(T):\n    P, time = map(float, input().split())\n    probability = (1 - P) * (1 - P) * (1 - P) * (1 - P) * (1 - P) * (1 - P) * (1 - P) * (1 - P) * (1 - P) * (1 - P) * (1 - P) * (1 - P) * (1 - P) * (1 - P)\n    print(f\"{probability:.4f}\")", "import math\n\nT = int(input())\n\nfor _ in range(T):\n    P = float(input())\n    time = int(input())\n\n    probability = P * (1 - P**time)\n    probability = round(probability, 4)\n\n    print(probability)", "import math\n\nfor _ in range(int(input())):\n    p, t = map(float, input().split())\n    probability = (1 - p) * (1 - p)\n    print(round(probability, 4))", "import math\n\ndef calculate_probability(time, probability):\n    \"\"\"\n    Calculate the probability that it rains during Raj's journey.\n\n    Parameters:\n    time (int): Time taken for Raj to reach his office in minutes.\n    probability (float): Probability of rainfall today (0 to 1).\n\n    Returns:\n    float: Probability that it rains during Raj's journey.\n    \"\"\"\n    # Since the probability of no rain is (1 - probability), \n    # we can calculate the probability of rain using the formula for complementary events\n    probability_of_rain = 1 - (probability ** time)\n    return probability_of_rain\n\ndef main():\n    MOD = 10 ** 9 + 7\n    t = int(input())\n    for _ in range(t):\n        probability, time = map(float, input().split())\n        result = calculate_probability(time, probability)\n        print('{:.4f}'.format(result))\n\nif __name__ == \"__main__\":\n    main()", "def calculate_probability():\n    \"\"\"\n    This function calculates the probability that it rains during the time Raj is on the way to his office.\n    \n    Parameters:\n    None\n    \n    Returns:\n    None\n    \"\"\"\n    MOD = 10 ** 9 + 7\n    T = int(input())\n    for _ in range(T):\n        P, time = map(float, input().split())\n        # Since the probability of rain is P and it rains for time units, the probability that it rains during the time is P * (1 - (1 - P)^time)\n        # This is because the probability of not raining is (1 - P)^time, so the probability that it rains is 1 - (1 - P)^time\n        print('{:.4f}'.format(P * (1 - (1 - P)**time)))\n\nif __name__ == \"__main__\":\n    calculate_probability()", "def calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on his way to the office.\n\n    Args:\n        rainfall_probability (float): The probability of rainfalls today.\n        travel_time (int): The time it will take for Raj to reach his office.\n\n    Returns:\n        float: The probability that it rains during the travel time.\n    \"\"\"\n    return (1 - (rainfall_probability ** travel_time))\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Process each test case\nfor _ in range(num_test_cases):\n    # Read the rainfall probability and travel time\n    rainfall_probability, travel_time = map(float, input().split())\n\n    # Calculate and print the result\n    result = calculate_probability(rainfall_probability, travel_time)\n    print(f\"{result:.4f}\")", "import math\n\ndef calculate_probability():\n    MOD = 10**9 + 7\n    t = int(input())\n    for _ in range(t):\n        p, time = map(float, input().split())\n        time_in_hours = time // 60\n        probability = (1 - p) ** time_in_hours\n        print('{0:.4f}'.format(probability))\n\ncalculate_probability()", "def calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n        rainfall_probability (float): The probability that it will rain today.\n        travel_time (int): The time it takes for Raj to reach his office.\n\n    Returns:\n        float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    return rainfall_probability * (travel_time / 1440)\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Process each test case\nfor _ in range(num_test_cases):\n    # Read the rainfall probability and travel time\n    rainfall_probability, travel_time = map(float, input().split())\n\n    # Calculate and print the result\n    result = calculate_probability(rainfall_probability, travel_time)\n    print(f\"{result:.4f}\")", "import math\n\nT = int(input())\nfor _ in range(T):\n    P, time = map(float, input().split())\n    # Since 1440 is the total number of minutes in a day\n    # and time is a perfect divisor of 1440, \n    # the probability of it raining during time is the same as the probability of it raining in a day\n    probability_of_rain = P\n    probability_of_no_rain = 1 - probability_of_rain\n    \n    # The probability of it raining during time is the probability of it raining in a day \n    # times the ratio of the time period to the total day\n    probability_of_rain_during_time = probability_of_rain * (time / 1440)\n    \n    # The probability of it not raining during time is the probability of it not raining in a day \n    # times the ratio of the time period to the total day\n    probability_of_no_rain_during_time = probability_of_no_rain * (time / 1440)\n    \n    # Since the probability of it raining during time and the probability of it not raining during time \n    # must add up to 1, we can calculate the probability of it raining during time by subtracting the \n    # probability of it not raining during time from 1\n    probability_of_rain_during_time = 1 - probability_of_no_rain_during_time\n    \n    print('{:.4f}'.format(probability_of_rain_during_time))", "import math\n\ndef calculate_probability():\n    MOD = 10 ** 9 + 7\n    T = int(input())\n    for _ in range(T):\n        P, time = map(float, input().split())\n        D = (1 + P) / 2\n        R = 1\n        while time > 0:\n            if time % 2 == 0:\n                R = R * D % MOD\n            D = D * D % MOD\n            time //= 2\n        print(f'{R:.4f}')\n\ncalculate_probability()", "import math\n\nT = int(input())\n\nfor _ in range(T):\n    P, time = map(float, input().split())\n    probability = 1 - (1 - P) ** time / time\n\n    # If probability is less than a very small number, consider it as 0\n    if probability < 1e-10:\n        probability = 0.0\n\n    print(\"{:.4f}\".format(probability))", "import math\n\ndef calculate_probability():\n    MOD = 10**9 + 7\n    t = int(input())\n    for _ in range(t):\n        p, time = map(float, input().split())\n        if p == 0:\n            print(\"0.0000\")\n        else:\n            probability = (1 - p ** time) ** (1/time)\n            print(\"{:.4f}\".format(probability))\n\ncalculate_probability()", "import math\n\nfor _ in range(int(input())):\n    P, time = map(float, input().split())\n    probability = P * (1 - P) * (time / 1440)\n    print('{:.4f}'.format(probability))", "import math\n\nT = int(input())\n\nfor _ in range(T):\n    P = float(input().split()[0])\n    t = int(input().split()[1])\n\n    # Calculate the probability of rain during the time\n    prob = P * (1 - P ** (1440 // t))\n\n    # Round the answer to 4 decimal places\n    prob = round(prob, 4)\n\n    print(prob)", "import math\n\ndef calculate_probability():\n    MOD = 10 ** 9 + 7\n    T = int(input())\n    for _ in range(T):\n        P, time = map(float, input().split())\n        D = math.ceil(time / 1440)  # convert minutes to days\n        R = 1\n        while D > 0:\n            if D % 2:\n                R = R * (1 - P) % MOD\n            (1 - P) = (1 - P) ** 2 % MOD\n            D //= 2\n        print((R * P) % MOD)\n\ncalculate_probability()", "import math\n\nT = int(input())\n\nfor _ in range(T):\n    P, time = map(float, input().split())\n\n    # Calculate the probability of no rain\n    no_rain_prob = (1 - P) ** (time // 1440)\n\n    # Calculate the probability of rain\n    rain_prob = 1 - no_rain_prob\n\n    # Round the result to 4 decimal places\n    result = round(rain_prob, 4)\n\n    print(result)", "import math\n\ndef calculate_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the travel time.\n\n    Args:\n        p (float): The probability of rainfall today.\n        time (int): The time it will take for Raj to reach his office.\n\n    Returns:\n        float: The probability that it rains during the travel time.\n    \"\"\"\n    # Since the probability of rainfall today is 'p' and the travel time is 'time',\n    # the probability that it rains during the travel time is 'p' * (1440 / time)\n    # because 1440 is the total number of minutes in a day.\n    probability = p * (1440 / time)\n    return round(probability, 4)\n\ndef main():\n    \"\"\"\n    Main function to read input, calculate the probability, and print the result.\n    \"\"\"\n    MOD = 10 ** 9 + 7\n    t = int(input())\n    for _ in range(t):\n        p, time = map(float, input().split())\n        probability = calculate_probability(p, time)\n        print(probability)\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability():\n    T = int(input())\n    for _ in range(T):\n        P = float(input().split()[0])\n        time = int(input().split()[1])\n\n        # Calculate the probability that it rains during the time\n        probability = P * (1 - P) * (time / 1440)\n        print(f\"{probability:.4f}\")\n\ncalculate_probability()", "import math\n\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n    rainfall_probability (float): The probability that it will rain today.\n    travel_time (int): The time it takes for Raj to reach his office.\n\n    Returns:\n    float: The probability that it rains during the travel time.\n    \"\"\"\n    # Calculate the number of two-minute intervals in the travel time\n    num_intervals = travel_time // 2\n    \n    # Calculate the probability that it rains during the travel time\n    probability = rainfall_probability ** num_intervals\n    \n    return probability\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n    \n    for _ in range(num_test_cases):\n        # Read the rainfall probability and travel time\n        rainfall_probability, travel_time = map(float, input().split())\n        \n        # Calculate and print the probability\n        probability = calculate_probability(rainfall_probability, travel_time)\n        print(f\"{probability:.4f}\")\n\nif __name__ == \"__main__\":\n    main()", "import math\n\n# Given probability and time in minutes\ndef calculate_probability(probability, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n        probability (float): The probability that it will rain today.\n        time (int): The time it takes for Raj to reach his office in minutes.\n\n    Returns:\n        float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Since time is a perfect divisor of 1440, the problem can be treated as a geometric distribution\n    # The probability that it rains during the time is given by the formula: probability * (1 - probability) ^ (time / 1440)\n    return probability * (1 - probability) ** (time / 1440)\n\n# Get the number of test cases\ntest_cases = int(input())\n\n# Loop through each test case\nfor _ in range(test_cases):\n    # Get the probability and time\n    probability, time = map(float, input().split())\n\n    # Calculate and print the result\n    result = calculate_probability(probability, time)\n    print(\"{:.4f}\".format(result))", "import math\n\nT = int(input())\n\nfor _ in range(T):\n    P, time = map(float, input().split())\n    P = P / 100  # Convert percentage to decimal\n    time = time / 60  # Convert minutes to hours\n\n    # Calculate the probability that it does not rain during the time\n    prob_no_rain = (1 - P) ** time\n\n    # Calculate the probability that it rains during the time\n    prob_rain = 1 - prob_no_rain\n\n    print(\"{:.4f}\".format(prob_rain))", "import math\n\ndef calculate_probability():\n    T = int(input())\n    for _ in range(T):\n        P, time = map(float, input().split())\n        # Calculate the probability of not raining\n        no_rain_prob = 1 - P\n        # Calculate the probability of raining during the given time\n        rain_prob = (1 - no_rain_prob) * (1 + P + P**2 * (time // 1440) + P**3 * (time // 1440)**2)\n        print(f\"{rain_prob:.4f}\")\n\ncalculate_probability()", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the probability of rainfall during travel.\n\n    Args:\n    test_cases (list): List of tuples containing probability and time.\n\n    Returns:\n    list: List of probabilities rounded to 4 decimal places.\n    \"\"\"\n    results = []\n    for probability, time in test_cases:\n        # Calculate the probability that it rains during the travel time\n        rainfall_probability = 1 - (1 - probability) ** time\n        # Round the result to 4 decimal places\n        result = round(rainfall_probability, 4)\n        results.append(result)\n    return results\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n    # Read the input data\n    test_cases_data = [tuple(map(float, input().split())) for _ in range(test_cases)]\n    # Calculate and print the results\n    results = calculate_rainfall_probability(test_cases_data)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the probability of rainfall during the time Raj is on his way to the office.\n\n    Args:\n        test_cases (list): A list of tuples containing the probability of rain `P` and time `t` in minutes.\n\n    Returns:\n        list: A list of probabilities of rainfall during the time Raj is on his way to the office.\n    \"\"\"\n    result = []\n    MOD = 10 ** 9 + 7\n    for P, t in test_cases:\n        D = (P + 1) // 2  # Effective probability of rain\n        R = 1\n        while t > 0:\n            if t % 2:\n                R = R * D % MOD\n            D = D * D % MOD\n            t //= 2\n        result.append(format(R, '.4f'))  # Round to 4 decimal places\n    return result\n\n# Read test cases\ntest_cases = int(input())\n\n# Calculate and print the result\nresult = calculate_rainfall_probability([(float(p), int(t)) for p, t in [(input().split()) for _ in range(test_cases)]]))\nprint('\\n'.join(result))", "import math\n\ndef calculate_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes for Raj to reach his office.\n\n    Args:\n        p (float): The probability that it will rain today.\n        time (int): The time it takes for Raj to reach his office in minutes.\n\n    Returns:\n        float: The probability that it rains during the time it takes for Raj to reach his office.\n    \"\"\"\n    # If the probability of rain is 0, the probability of rain during the time is 0\n    if p == 0:\n        return 0\n\n    # Calculate the probability of no rain during the time\n    no_rain_probability = (1 - p) ** (time // 2)\n\n    # Calculate the probability of rain during the time\n    rain_probability = 1 - no_rain_probability\n\n    return round(rain_probability, 4)\n\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Process each test case\n    for _ in range(test_cases):\n        # Read the probability of rain and time\n        p, time = map(float, input().split())\n\n        # Calculate and print the probability of rain during the time\n        print(calculate_probability(p, time))\n\n\nif __name__ == \"__main__\":\n    main()", "import math\n\nMOD = 10**9 + 7\n\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes to travel to the office.\n\n    Args:\n        rainfall_probability (float): The probability of rainfall today.\n        travel_time (int): The time it takes to travel to the office in minutes.\n\n    Returns:\n        float: The probability that it rains during the time it takes to travel to the office.\n    \"\"\"\n    # Convert the rainfall probability to a decimal\n    rainfall_probability = float(rainfall_probability)\n    \n    # Calculate the probability that it does not rain during the travel time\n    no_rain_probability = (1 - rainfall_probability) ** (travel_time // 2)\n    \n    # Calculate the probability that it rains during the travel time\n    rain_probability = 1 - no_rain_probability\n    \n    return rain_probability\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n    \n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the rainfall probability and travel time\n        rainfall_probability, travel_time = input().split()\n        rainfall_probability = float(rainfall_probability)\n        travel_time = int(travel_time)\n        \n        # Calculate and print the probability that it rains during the travel time\n        rain_probability = calculate_probability(rainfall_probability, travel_time)\n        print(\"{:.4f}\".format(rain_probability))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n        rainfall_probability (float): The probability of rainfalls today.\n        travel_time (int): The time it will take for Raj to reach his office.\n\n    Returns:\n        float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the probability that it does not rain during the entire trip\n    no_rain_probability = (1 - rainfall_probability) ** travel_time\n\n    # Calculate the probability that it rains during the trip\n    rain_probability = 1 - no_rain_probability\n\n    return round(rain_probability, 4)\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Process each test case\nfor _ in range(test_cases):\n    # Read the probability of rain and travel time\n    rainfall_probability, travel_time = map(float, input().split())\n\n    # Calculate and print the result\n    print(calculate_probability(rainfall_probability, travel_time))", "import math\n\ndef calculate_probability(time, probability):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes for Raj to reach his office.\n\n    Args:\n        time (int): The time it takes for Raj to reach his office in minutes.\n        probability (float): The probability that it rains today.\n\n    Returns:\n        float: The probability that it rains during the time it takes for Raj to reach his office.\n    \"\"\"\n    # Calculate the probability that it does not rain during the time it takes for Raj to reach his office\n    no_rain_probability = (1 - probability) ** (time // 1440)\n    \n    # Calculate the probability that it rains during the time it takes for Raj to reach his office\n    rain_probability = 1 - no_rain_probability\n    \n    return round(rain_probability, 4)\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    MOD = 10 ** 9 + 7\n    num_tests = int(input())\n    \n    for _ in range(num_tests):\n        # Read the probability and time from input\n        probability, time = map(float, input().split())\n        \n        # Calculate and print the probability that it rains during the time it takes for Raj to reach his office\n        print(calculate_probability(time, probability))\n\n\nif __name__ == \"__main__\":\n    main()", "def calculate_probability(probability, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n    probability (float): The probability that it will rain today.\n    time (int): The time it will take for Raj to reach his office in minutes.\n\n    Returns:\n    float: The probability that it rains during the time Raj is on the way to his office.\n    \"\"\"\n    # Calculate the probability that it does not rain during the time Raj is on the way\n    no_rain_probability = (1 - probability) ** (time // 1440)\n    \n    # Calculate the probability that it rains during the time Raj is on the way\n    rain_probability = 1 - no_rain_probability\n    \n    return round(rain_probability, 4)\n\n\ndef main():\n    \"\"\"\n    Main function that reads the input, calculates the probability, and prints the result.\n    \"\"\"\n    # Read the number of test cases\n    num_test_cases = int(input())\n    \n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the probability and time\n        probability, time = input().split()\n        probability = float(probability)\n        time = int(time)\n        \n        # Calculate and print the probability\n        print(calculate_probability(probability, time))\n\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability of rain during travel.\n\n    Args:\n    rainfall_probability (float): The probability of rain.\n    travel_time (int): The time it takes to travel.\n\n    Returns:\n    float: The probability of rain during travel.\n    \"\"\"\n    # Calculate the number of 2-minute intervals in the travel time\n    intervals = travel_time // 2\n\n    # Calculate the probability of no rain in a single interval\n    no_rain_probability = (1 - rainfall_probability) ** 2\n\n    # Calculate the probability of no rain in all intervals\n    no_rain_probability_all_intervals = no_rain_probability ** intervals\n\n    # Calculate the probability of rain during travel\n    rain_probability = 1 - no_rain_probability_all_intervals\n\n    return round(rain_probability, 4)\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Process each test case\nfor _ in range(test_cases):\n    # Read the rainfall probability and travel time\n    rainfall_probability, travel_time = map(float, input().split())\n\n    # Calculate and print the probability of rain during travel\n    print(calculate_probability(rainfall_probability, travel_time))", "import math\n\ndef calculate_probability():\n    MOD = 10 ** 9 + 7\n    t = int(input())\n    for _ in range(t):\n        p, time = map(float, input().split())\n        D = math.ceil(time / 1440)  # calculate the number of days\n        R = 1\n        while D > 0:\n            if D % 2 == 1:\n                R = R * (1 - p) % MOD\n            D //= 2\n            p = p * (1 - p) % MOD  # update the probability of no rain\n        print(f\"{R * p:.4f}\")  # calculate and print the probability of rain\n\ncalculate_probability()", "import math\n\ndef calculate_probability_of_rainfall(t, p):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes to reach the office.\n\n    Args:\n        t (int): Time it takes to reach the office in minutes.\n        p (float): Probability of rainfall today.\n\n    Returns:\n        float: Probability that it rains during the time it takes to reach the office.\n    \"\"\"\n    # Calculate the probability that it does not rain\n    prob_no_rain = 1 - p\n    \n    # Calculate the probability that it rains during the time it takes to reach the office\n    # This can be done using the formula for probability of union of two events\n    # P(A or B) = P(A) + P(B) - P(A and B)\n    # Here, A is the event that it rains, and B is the event that it does not rain\n    # P(A and B) is the probability that it does not rain during the time it takes to reach the office\n    # This can be calculated by raising the probability of no rain to the power of the number of time units\n    prob_rain = p + (prob_no_rain ** t)\n    \n    return round(prob_rain, 4)\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Process each test case\nfor _ in range(num_test_cases):\n    # Read the probability of rainfall and time\n    p, t = map(float, input().split())\n    \n    # Calculate the probability of rainfall during the time it takes to reach the office\n    probability = calculate_probability_of_rainfall(t, p)\n    \n    # Print the result\n    print(probability)", "import math\n\nT = int(input())\n\nfor _ in range(T):\n    P, time = map(float, input().split())\n    R = 1\n    for i in range(time.bit_length()):\n        if time & (1 << i):\n            R = R * P % 1\n            R = R * (1 - P) % 1\n    print(f\"{R:.4f}\")", "def calculate_rainfall_probability(T, P, time):\n    \"\"\"\n    Calculate the probability of rainfall during a certain time period.\n\n    Args:\n    T (int): Number of test cases.\n    P (float): Probability of rainfall (0 \u2264 P \u2264 0.5).\n    time (int): Time in minutes.\n\n    Returns:\n    float: Probability of rainfall during the time period.\n    \"\"\"\n    # Calculate the probability of no rainfall during the time period\n    no_rain_probability = (1 - P) ** (time // 1440)\n    # Calculate the probability of rainfall during the time period\n    rainfall_probability = 1 - no_rain_probability\n    # Round the result to 4 decimal places\n    return round(rainfall_probability, 4)\n\n# Read the number of test cases\nT = int(input())\n\n# Process each test case\nfor _ in range(T):\n    # Read the probability of rainfall and time\n    P, time = map(float, input().split())\n    # Calculate and print the probability of rainfall\n    print(calculate_rainfall_probability(T, P, time))", "import math\n\nT = int(input())\nfor _ in range(T):\n    P = float(input().split()[0])\n    time = int(input().split()[1])\n\n    if P == 0:\n        print(0.0000)\n    elif time <= 1440 / P:\n        print(1.0)\n    else:\n        print(1 - (1 - P) ** (time // (1440 / P)))", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    for _ in range(test_cases):\n        probability, time = map(float, input().split())\n        minutes_per_day = 1440\n        probability_of_rain = probability * time / minutes_per_day\n        print(f\"{probability_of_rain:.4f}\")\n\n# Get the number of test cases\ntest_cases = int(input())\n\n# Process each test case\ncalculate_rainfall_probability(test_cases)", "import math\n\nT = int(input())\n\nfor _ in range(T):\n    P, time = map(float, input().split())\n    time_in_hours = time / 60  # convert minutes to hours\n    probability_rain = (1 - P) ** (1440 // time_in_hours)\n    print(\"{:.4f}\".format(probability_rain))", "import math\n\ndef calculate_probability(probability, time):\n    \"\"\"\n    Calculate the probability that it rains during Raj's commute.\n\n    Args:\n    probability (float): The probability of rainfall today.\n    time (int): The time it takes for Raj to reach his office in minutes.\n\n    Returns:\n    float: The probability that it rains during Raj's commute.\n    \"\"\"\n    # Calculate the probability that it does not rain during Raj's commute\n    no_rain_probability = (1 - probability) ** (time // 1440)\n\n    # Calculate the probability that it rains during Raj's commute\n    rain_probability = 1 - no_rain_probability\n\n    return round(rain_probability, 4)\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Process each test case\nfor _ in range(test_cases):\n    # Read the probability of rainfall and commute time\n    probability, time = input().split()\n    probability = float(probability)\n    time = int(time)\n\n    # Calculate and print the probability that it rains during Raj's commute\n    print(calculate_probability(probability, time))", "import math\n\nfor _ in range(int(input())):\n    P, time = map(float, input().split())\n    print(format((1-P) * time, \".4f\"))", "import math\n\nT = int(input())\n\nfor _ in range(T):\n    P = float(input().split()[0])\n    time = int(input().split()[1])\n\n    # Calculate the probability that it rains during the time\n    # If P is 0, it's definitely not raining\n    # If P is 1, it's definitely raining\n    # For any other value of P, we need to calculate the probability\n    # that it rains in less than time minutes\n    # This can be done using the formula for the cumulative distribution\n    # function of a uniform distribution: P(X <= x) = x / (b - a + 1)\n\n    # Calculate the probability that it rains in less than time minutes\n    # Assuming that the probability of rain is uniformly distributed\n    # between 0 and 1, and that the time is uniformly distributed\n    # between 0 and 1440 (the total number of minutes in a day)\n    prob = time / 1440\n\n    # Calculate the probability that it rains during the time\n    # This is equal to 1 minus the probability that it doesn't rain\n    # during the time\n    prob_rain = 1 - (1 - P) ** (1440 / time)\n\n    # Round the result to 4 decimal places\n    prob_rain = round(prob_rain, 4)\n\n    print(prob_rain)", "import math\n\ndef calculate_rain_probability(P, time):\n    \"\"\"\n    Calculate the probability that it rains during the given time.\n\n    Args:\n    P (float): Probability of rainfall (0 to 0.5).\n    time (int): Time it takes for Raj to reach his office (10 to 720 minutes).\n\n    Returns:\n    float: Probability of rainfall during the given time.\n    \"\"\"\n    # Since time is a perfect divisor of 1440, we can calculate the probability\n    # of rainfall during the given time by multiplying P with the ratio of time\n    # to the total possible time (1440 minutes).\n    probability = P * (time / 1440)\n    return round(probability, 4)\n\n# Read the number of test cases\nT = int(input())\n\n# Process each test case\nfor _ in range(T):\n    # Read the probability of rainfall and time\n    P, time = map(float, input().split())\n    \n    # Calculate and print the probability of rainfall during the given time\n    print(calculate_rain_probability(P, time))", "import math\n\ndef calculate_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n    \n    Args:\n    p (float): The probability that it will rain today.\n    time (int): The time it takes for Raj to reach his office.\n    \n    Returns:\n    float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Since the problem states that time is a perfect divisor of 1440,\n    # we can calculate the number of 10-minute intervals in the given time\n    intervals = time // 10\n    \n    # The probability that it rains during the time Raj is on the way is\n    # equal to the probability that it rains today multiplied by the\n    # number of intervals\n    return p * intervals\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    # Read the probability and time\n    p, time = map(float, input().split())\n    \n    # Calculate and print the result, rounded to 4 decimal places\n    result = calculate_probability(p, time)\n    print(f\"{result:.4f}\")", "import math\n\ndef calculate_probability(time, probability):\n    \"\"\"\n    Calculate the probability that it rains during Raj's commute.\n\n    Args:\n    time (int): Time in minutes it will take for Raj to reach his office.\n    probability (float): Probability of rainfalls today.\n\n    Returns:\n    float: Probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the time in minutes that Raj spends commuting\n    commute_time = time / 1440.0  # Convert minutes to fraction of day\n\n    # Calculate the probability of no rain during Raj's commute\n    no_rain_probability = (1 - probability) ** commute_time\n\n    # Calculate the probability that it rains during Raj's commute\n    rain_probability = 1 - no_rain_probability\n\n    # Round the result to 4 decimal places\n    rain_probability = round(rain_probability, 4)\n\n    return rain_probability\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Read the input for each test case\nfor _ in range(num_test_cases):\n    # Read the probability of rainfalls today and time\n    probability, time = input().split()\n\n    # Convert the probability to a float and the time to an integer\n    probability = float(probability)\n    time = int(time)\n\n    # Calculate the probability that it rains during Raj's commute\n    result = calculate_probability(time, probability)\n\n    # Print the result\n    print(result)", "import math\n\nMOD = 10 ** 9 + 7\n\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during Raj's commute.\n\n    Args:\n    rainfall_probability (float): The probability of rainfall today.\n    travel_time (int): The time it takes for Raj to reach his office.\n\n    Returns:\n    float: The probability that it rains during Raj's commute.\n    \"\"\"\n    # Calculate the time it takes for the rain to cover the entire distance\n    rain_time = 1440 // travel_time\n\n    # Calculate the probability that it rains during Raj's commute\n    # using the formula for the sum of a geometric series\n    if rainfall_probability == 0:\n        return 0\n    else:\n        # The probability that it rains during Raj's commute is 1 minus the\n        # probability that it does not rain during Raj's commute\n        probability = 1 - (1 - rainfall_probability) ** rain_time\n        return probability\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the probability of rainfall and travel time\n        rainfall_probability, travel_time = map(float, input().split())\n\n        # Calculate the probability that it rains during Raj's commute\n        probability = calculate_probability(rainfall_probability, travel_time)\n\n        # Round the result to 4 decimal places\n        probability = round(probability, 4)\n\n        # Print the result\n        print(probability)\n\nif __name__ == \"__main__\":\n    main()", "def calculate_probability():\n    MOD = 10**9 + 7\n    T = int(input())\n    for _ in range(T):\n        P, time = map(float, input().split())\n        D = (1 + P)\n        R = 1\n        while time > 0:\n            if time % 2:\n                R = (D * R) % MOD\n            D = (D * D) % MOD\n            time //= 2\n        probability = R\n        print(f\"{probability:.4f}\")\n\ncalculate_probability()", "import math\n\ndef calculate_probability(rain_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes for Raj to reach his office.\n\n    Args:\n        rain_probability (float): The probability that it will rain today.\n        travel_time (int): The time it takes for Raj to reach his office.\n\n    Returns:\n        float: The probability that it rains during the time it takes for Raj to reach his office.\n    \"\"\"\n    # Calculate the probability that it does not rain during the travel time\n    no_rain_probability = (1 - rain_probability) ** math.gcd(travel_time, 1440)\n\n    # Calculate the probability that it rains during the travel time\n    rain_probability_during_travel = 1 - no_rain_probability\n\n    return round(rain_probability_during_travel, 4)\n\ndef main():\n    \"\"\"\n    Main function that reads input and calculates the probabilities.\n    \"\"\"\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the probability of rain and travel time\n        rain_probability, travel_time = input().split()\n\n        # Convert the input to float and int respectively\n        rain_probability = float(rain_probability)\n        travel_time = int(travel_time)\n\n        # Calculate the probability that it rains during the travel time\n        result = calculate_probability(rain_probability, travel_time)\n\n        # Print the result\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the travel time.\n    \n    Args:\n        rainfall_probability (float): The probability of rainfall.\n        travel_time (int): The time it takes to travel.\n    \n    Returns:\n        float: The probability that it rains during the travel time.\n    \"\"\"\n    # Calculate the probability that it does not rain during the travel time\n    no_rain_probability = (1 - rainfall_probability) ** (travel_time // 1440)\n    \n    # Calculate the probability that it rains during the travel time\n    rain_probability = 1 - no_rain_probability\n    \n    return round(rain_probability, 4)\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Process each test case\nfor _ in range(test_cases):\n    # Read the rainfall probability and travel time\n    rainfall_probability, travel_time = map(float, input().split())\n    \n    # Calculate and print the result\n    print(calculate_probability(rainfall_probability, travel_time))", "import math\n\nMOD = 10 ** 9 + 7\n\ndef solve():\n    T = int(input())\n    for _ in range(T):\n        P, t = map(float, input().split())\n        D = 1440 / t\n        R = (1 - P) ** D\n        print('{:.4f}'.format(1 - R))\n\nsolve()", "import math\n\ndef calculate_probability_of_rain(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on his way to the office.\n\n    Args:\n        rainfall_probability (float): The probability that it will rain today (0 <= P <= 0.5).\n        travel_time (int): The time (in minutes) it will take for Raj to reach his office (10 <= time <= 720).\n\n    Returns:\n        float: The probability that it rains during the time Raj is on his way to the office.\n    \"\"\"\n    # Calculate the probability of no rain during the travel time\n    no_rain_probability = (1 - rainfall_probability) ** (travel_time // 1440)\n    # Calculate the probability of rain during the travel time\n    rain_probability = 1 - no_rain_probability\n    return round(rain_probability, 4)\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Process each test case\nfor _ in range(num_test_cases):\n    # Read the rainfall probability and travel time\n    rainfall_probability, travel_time = map(float, input().split())\n    # Calculate and print the probability of rain\n    print(calculate_probability_of_rain(rainfall_probability, travel_time))", "import math\n\nT = int(input())\n\nfor _ in range(T):\n    P, time = map(float, input().split())\n\n    # Calculate the probability of no rain\n    prob_no_rain = 1 - P\n\n    # Calculate the probability of rain using the formula for the sum of an infinite geometric series\n    prob_rain = P / (1 - prob_no_rain)\n\n    # Print the result rounded to 4 decimal places\n    print(\"{:.4f}\".format(prob_rain))", "import math\n\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n        rainfall_probability (float): The probability that it will rain today.\n        travel_time (int): The time it will take for Raj to reach his office.\n\n    Returns:\n        float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the number of 2-hour blocks in the travel time\n    num_blocks = travel_time // 120\n    \n    # Calculate the probability that it will not rain during the entire travel time\n    no_rain_probability = (1 - rainfall_probability) ** num_blocks\n    \n    # Calculate the probability that it will rain during the travel time\n    rain_probability = 1 - no_rain_probability\n    \n    return rain_probability\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n    \n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the rainfall probability and travel time\n        rainfall_probability, travel_time = map(float, input().split())\n        \n        # Calculate the probability that it rains during the travel time\n        probability = calculate_probability(rainfall_probability, travel_time)\n        \n        # Round the result to 4 decimal places\n        probability = round(probability, 4)\n        \n        # Print the result\n        print(probability)\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rain_probability():\n    MOD = 10 ** 9 + 7\n    for _ in range(int(input())):\n        P = float(input().split()[0])\n        time = int(input().split()[1])\n        \n        # Calculate the probability of not raining\n        prob_not_raining = (1 - P) ** (time // 2)\n        \n        # Calculate the probability of raining\n        prob_raining = 1 - prob_not_raining\n        \n        print(f\"{prob_raining:.4f}\")\n\n# Call the function\ncalculate_rain_probability()", "import math\n\ndef calculate_probability():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Iterate over each test case\n    for _ in range(num_test_cases):\n        # Read the probability of rain and time\n        probability, time = map(float, input().split())\n\n        # Calculate the probability that it rains during the time\n        probability_raining = probability * (1 - (1 - probability) ** (1440 / time))\n\n        # Round the answer to 4 decimal places\n        probability_raining = round(probability_raining, 4)\n\n        # Print the result\n        print(f\"{probability_raining:.4f}\")\n\n# Call the function\ncalculate_probability()", "import math\n\nMOD = 10 ** 9 + 7\n\ndef solve_case():\n    P = float(input())\n    time = int(input())\n\n    # Calculate the probability that it rains during the time\n    probability_rains = P * (1 - (1 - P) ** (1440 // time))\n\n    print(format(probability_rains, \".4f\"))\n\n# Read the number of test cases\nT = int(input())\n\n# Solve each test case\nfor _ in range(T):\n    solve_case()", "import math\n\ndef calculate_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes for Raj to reach his office.\n\n    Args:\n        p (float): The probability of rain today.\n        time (int): The time it takes for Raj to reach his office.\n\n    Returns:\n        float: The probability that it rains during the time it takes for Raj to reach his office.\n    \"\"\"\n    # Calculate the probability that it does not rain\n    prob_no_rain = (1 - p) ** time\n    # Calculate the probability that it rains at least once\n    prob_rain = 1 - prob_no_rain\n    # Return the probability that it rains during the time it takes for Raj to reach his office\n    return round(prob_rain, 4)\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Process each test case\nfor _ in range(test_cases):\n    # Read the probability of rain and time\n    p, time = map(float, input().split())\n    # Calculate and print the probability that it rains during the time it takes for Raj to reach his office\n    print(calculate_probability(p, time))", "import math\n\n# Function to calculate the probability that it rains during the time Raj is on the way\ndef calculate_rain_probability(time, probability):\n    # Calculate the probability that it does not rain during the time\n    no_rain_probability = (1 - probability) ** time\n    \n    # Calculate the probability that it rains during the time\n    rain_probability = 1 - no_rain_probability\n    \n    # Round the answer to 4 decimal places\n    return round(rain_probability, 4)\n\n# Read the number of test cases\nT = int(input())\n\n# Process each test case\nfor _ in range(T):\n    # Read the probability and time\n    probability, time = map(float, input().split())\n    \n    # Calculate and print the rain probability\n    print(calculate_rain_probability(time, probability))", "import math\n\ndef calculate_probability(T, time, P):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n    T (int): The total time in minutes.\n    time (int): The time it takes for Raj to reach his office.\n    P (float): The probability of rainfalls today.\n\n    Returns:\n    float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the number of complete hours\n    complete_hours = time // 60\n    # Calculate the remaining minutes\n    remaining_minutes = time % 60\n\n    # Calculate the probability of rain during the complete hours\n    rain_probability = P ** complete_hours\n\n    # Calculate the probability of rain during the remaining minutes\n    rain_probability_remaining_minutes = P ** remaining_minutes\n\n    # Calculate the probability of no rain during the complete hours\n    no_rain_probability = (1 - P) ** complete_hours\n\n    # Calculate the probability of no rain during the remaining minutes\n    no_rain_probability_remaining_minutes = (1 - P) ** remaining_minutes\n\n    # Calculate the overall probability\n    probability = rain_probability * no_rain_probability * rain_probability_remaining_minutes * no_rain_probability_remaining_minutes\n\n    # Round the answer to 4 decimal places\n    probability = round(probability, 4)\n\n    return probability\n\n# Read the number of test cases\nT = int(input())\n\n# Read the test cases\nfor _ in range(T):\n    # Read the probability and time\n    P, time = map(float, input().split())\n\n    # Calculate the probability\n    probability = calculate_probability(1440, time, P)\n\n    # Print the result\n    print(probability)", "import math\n\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n        rainfall_probability (float): The probability that it will rain today.\n        travel_time (int): The time it takes for Raj to reach his office.\n\n    Returns:\n        float: The probability that it rains during the time Raj is on the way to his office.\n    \"\"\"\n    # Calculate the probability that it does not rain\n    no_rain_probability = 1 - rainfall_probability\n    \n    # Calculate the probability that it rains during the travel time\n    # This is equivalent to 1 - (probability that it does not rain) ^ travel_time\n    rain_probability = 1 - (no_rain_probability ** travel_time)\n    \n    return rain_probability\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n    \n    # Iterate over each test case\n    for _ in range(num_test_cases):\n        # Read the rainfall probability and travel time\n        rainfall_probability, travel_time = map(float, input().split())\n        \n        # Calculate and print the probability that it rains during the travel time\n        probability = calculate_probability(rainfall_probability, travel_time)\n        print(\"{:.4f}\".format(probability))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\nMOD = 10 ** 9 + 7\n\ndef solve():\n    P, time = map(float, input().split())\n    R = (1 - P) ** (1440 // time)\n    print('{:.4f}'.format(R))\n\nT = int(input())\nfor _ in range(T):\n    solve()", "import math\n\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the travel time.\n\n    Args:\n        rainfall_probability (float): The probability of rainfall today.\n        travel_time (int): The time it takes for Raj to reach his office.\n\n    Returns:\n        float: The probability that it rains during the travel time.\n    \"\"\"\n    # Calculate the probability that it does not rain during the travel time\n    no_rain_probability = 1 - rainfall_probability\n\n    # Calculate the probability that it rains during the travel time\n    rainfall_probability = no_rain_probability * (1 - no_rain_probability) ** (travel_time // 1440)\n\n    # Return the probability rounded to 4 decimal places\n    return round(rainfall_probability, 4)\n\n\ndef main():\n    \"\"\"\n    Read the number of test cases and solve each test case.\n    \"\"\"\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Read each test case\n    for _ in range(num_test_cases):\n        # Read the rainfall probability and travel time\n        rainfall_probability, travel_time = map(float, input().split())\n\n        # Calculate and print the probability\n        probability = calculate_probability(rainfall_probability, travel_time)\n        print(probability)\n\n\nif __name__ == \"__main__\":\n    main()", "def calculate_probability():\n    MOD = 10 ** 9 + 7\n    T = int(input())\n    for _ in range(T):\n        P, time = map(float, input().split())\n        # P is already a float, so no need to convert it\n        # We can directly multiply the probabilities\n        probability = (1 - P) * (1 - P) * (1 - P) * (1 - P)\n        probability *= (1 + P) * (1 + P)\n        # Multiply by the probability of remaining dry time\n        probability *= (1 - P) ** (time * 2)\n        print('{:.4f}'.format(probability))\n\ncalculate_probability()", "def calculate_probability():\n    MOD = 10 ** 9 + 7\n    T = int(input())\n    for _ in range(T):\n        P, time = map(float, input().split())\n        probability = (1 - P) ** time\n        print('{:.4f}'.format(probability))\n\ncalculate_probability()", "import math\n\ndef calculate_rainfall_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes for Raj to reach his office.\n\n    Args:\n    p (float): The probability of rain today.\n    time (int): The time it takes for Raj to reach his office in minutes.\n\n    Returns:\n    float: The probability that it rains during the time it takes for Raj to reach his office.\n    \"\"\"\n    # Calculate the probability of no rain during the time it takes for Raj to reach his office\n    no_rain_probability = (1 - p) ** time\n\n    # Calculate the probability of rain during the time it takes for Raj to reach his office\n    rainfall_probability = 1 - no_rain_probability\n\n    # Round the result to 4 decimal places\n    return round(rainfall_probability, 4)\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Process each test case\nfor _ in range(num_test_cases):\n    # Read the probability of rain and time\n    p, time = map(float, input().split())\n\n    # Calculate and print the rainfall probability\n    print(calculate_rainfall_probability(p, time))", "import math\n\ndef calculate_probability():\n    MOD = 10**9 + 7\n    T = int(input())\n    for _ in range(T):\n        P, time = map(float, input().split())\n        D = (1 - P) * (1 - P) * (1 - P)\n        R = 1\n        while time > 0:\n            if time % 2:\n                R = R * D\n            D = D * D\n            time //= 2\n        print(format(R, '.4f'))\n\ncalculate_probability()", "import math\n\nfor _ in range(int(input())):\n    probability = float(input().split()[0])\n    time = int(input().split()[1])\n\n    # Calculate the probability that it does not rain\n    no_rain_probability = 1 - probability\n\n    # Calculate the number of minutes it takes to walk the entire distance\n    total_minutes = 1440 / time\n\n    # Calculate the probability that it does not rain for the entire time\n    no_rain_time_probability = no_rain_probability ** total_minutes\n\n    # Calculate the probability that it rains for at least one minute\n    rain_time_probability = 1 - no_rain_time_probability\n\n    # Round the result to 4 decimal places\n    result = round(rain_time_probability, 4)\n\n    print(result)", "import math\n\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability of rainfall during travel.\n\n    Args:\n        rainfall_probability (float): Probability of rainfall (0-1).\n        travel_time (int): Time taken for travel in minutes.\n\n    Returns:\n        float: Probability of rainfall during travel.\n    \"\"\"\n    # Calculate the number of showers in the travel time\n    showers = travel_time // 1440\n    # Calculate the probability of no showers\n    no_shower_probability = (1 - rainfall_probability) ** showers\n    # Calculate the probability of at least one shower\n    shower_probability = 1 - no_shower_probability\n    return round(shower_probability, 4)\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Iterate over each test case\nfor _ in range(test_cases):\n    # Read the rainfall probability and travel time\n    rainfall_probability, travel_time = map(float, input().split())\n    # Calculate and print the probability of rainfall during travel\n    print(calculate_probability(rainfall_probability, travel_time))", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    for _ in range(test_cases):\n        probability, time = map(float, input().split())\n        time_in_days = time // 1440\n        rainy_days = time_in_days * probability\n        rainy_days = math.floor(rainy_days)\n        rainy_days_remaining = time_in_days - rainy_days\n        probability_rainy = (math.factorial(time_in_days - rainy_days) *\n                            math.factorial(rainy_days) *\n                            math.factorial(rainy_days_remaining)) / math.factorial(time_in_days)\n        print(f\"{probability_rainy:.4f}\")\n\n# Get the number of test cases\ntest_cases = int(input())\n\n# Process each test case\ncalculate_rainfall_probability(test_cases)\nprobability_rainy = (math.factorial(n) * math.factorial(r) * math.factorial(t - r)) / math.factorial(t)", "import math\n\ndef calculate_probability():\n    MOD = 10 ** 9 + 7\n    T = int(input())\n    for _ in range(T):\n        P, time = map(float, input().split())\n        if P == 0:\n            print(\"0.0000\")\n        else:\n            D = (1 + P) * (1 - P) * (1 + P) ** (time - 1)\n            D = D / (1 - P)\n            D = D * 1440 / (1 + P)\n            print('{:.4f}'.format(D))\n\ncalculate_probability()", "def calculate_rain_probability(T, time, P):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes for Raj to reach his office.\n\n    Args:\n        T (int): The number of test cases.\n        time (int): The time it takes for Raj to reach his office in minutes.\n        P (float): The probability that it will rain today.\n\n    Returns:\n        None\n    \"\"\"\n    # Calculate the probability that it does not rain\n    no_rain_probability = 1 - P\n    \n    # Calculate the probability that it rains during the time it takes for Raj to reach his office\n    rain_probability = (1 - (no_rain_probability ** time))\n    \n    # Round the answer to 4 decimal places\n    rain_probability = round(rain_probability, 4)\n    \n    # Print the result\n    print(rain_probability)\n\n# Get the number of test cases\nT = int(input())\n\n# Process each test case\nfor _ in range(T):\n    # Get the time and probability\n    time, P = map(float, input().split())\n    \n    # Calculate and print the result\n    calculate_rain_probability(T, time, P)", "import math\n\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n    rainfall_probability (float): The probability of rainfall today.\n    travel_time (int): The time it takes for Raj to reach his office.\n\n    Returns:\n    float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    return (rainfall_probability * travel_time) / 1440\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the probability of rainfall and travel time\n        rainfall_probability, travel_time = map(float, input().split())\n\n        # Calculate the probability that it rains during the time Raj is on the way\n        probability = calculate_probability(rainfall_probability, travel_time)\n\n        # Round the result to 4 decimal places and print\n        print('{:.4f}'.format(probability))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\n# Function to calculate the probability\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n    rainfall_probability (float): The probability of rainfalls today.\n    travel_time (int): The time it will take for Raj to reach his office.\n\n    Returns:\n    float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the probability that it does not rain\n    no_rain_probability = 1 - rainfall_probability\n\n    # Calculate the probability that it rains during the travel time\n    # This is done by calculating the probability of no rain for the remaining time\n    # and subtracting it from 1\n    rain_probability = 1 - math.pow(no_rain_probability, travel_time / 1440)\n\n    # Round the answer to 4 decimal places\n    rain_probability = round(rain_probability, 4)\n\n    return rain_probability\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Process each test case\nfor _ in range(num_test_cases):\n    # Read the rainfall probability and travel time\n    rainfall_probability, travel_time = input().split()\n    rainfall_probability = float(rainfall_probability)\n    travel_time = int(travel_time)\n\n    # Calculate and print the probability\n    print(calculate_probability(rainfall_probability, travel_time))", "import math\n\nt = int(input())\n\nfor _ in range(t):\n    p, time = map(float, input().split())\n    probability = (1 - p) * (1 - p) * (1 - p) * (1 - p) * (1 - p)\n    probability *= (1 + p + p**2/2 + p**3/6 + p**4/24)\n    probability *= (1 + p + p**2/2 + p**3/6 + p**4/24)\n    probability *= (1 + p + p**2/2 + p**3/6 + p**4/24)\n    probability *= (1 + p + p**2/2 + p**3/6 + p**4/24)\n    probability *= (1 + p + p**2/2 + p**3/6 + p**4/24)\n    probability *= (1 - p) * (1 - p) * (1 - p) * (1 - p)\n    probability *= (1 + p + p**2/2 + p**3/6 + p**4/24)\n    probability *= (1 + p + p**2/2 + p**3/6 + p**4/24)\n    probability *= (1 - p) * (1 - p) * (1 - p) * (1 - p)\n    probability *= (1 + p + p**2/2 + p**3/6 + p**4/24)\n    probability *= (1 + p + p**2/2 + p**3/6 + p**4/24)\n    probability *= (1 - p) * (1 - p) * (1 - p) * (1 - p)\n\n    print(round(probability, 4))\nimport math\n\nt = int(input())\n\nfor _ in range(t):\n    p, time = map(float, input().split())\n    probability = 1 - (1 - p) ** time\n    print(round(probability, 4))", "def calculate_probability():\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n    \n    Parameters:\n    p (float): The probability of rain today.\n    time (int): The time it will take for Raj to reach his office.\n    \n    Returns:\n    float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Get the input from the user\n    t, p_time = map(float, input().split())\n    \n    # Calculate the probability that it rains during the time Raj is on the way\n    # This is the same as the probability of rain today, since the time doesn't affect the probability\n    return round(p_time * p, 4)\n\n\n# Get the number of test cases\nt = int(input())\n\n# Run the test cases\nfor _ in range(t):\n    print(calculate_probability())", "import math\n\ndef calculate_probability(rain_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n        rain_probability (float): The probability that it will rain today.\n        travel_time (int): The time it will take for Raj to reach his office in minutes.\n\n    Returns:\n        float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Since the probability of rain and no rain are mutually exclusive, we can use the complement rule\n    # The probability of no rain is (1 - rain_probability)\n    no_rain_probability = 1 - rain_probability\n    # The probability of rain during the travel time is the probability of no rain before the travel time\n    # multiplied by the probability of rain during the travel time\n    return no_rain_probability * (1 - no_rain_probability) * (1 - no_rain_probability) * (1 - no_rain_probability) * (1 - no_rain_probability) * (1 - no_rain_probability) * (1 - no_rain_probability) * (1 - no_rain_probability) * (1 - no_rain_probability) * (1 - no_rain_probability) * (1 - no_rain_probability) * (1 - no_rain_probability) * (1 - no_rain_probability) * (1 - no_rain_probability) * (1 - no_rain_probability) * (1 - no_rain_probability) * (1 - no_rain_probability) * (1 - no_rain_probability)\n\ndef main():\n    num_cases = int(input())\n    for _ in range(num_cases):\n        rain_probability, travel_time = map(float, input().split())\n        probability = calculate_probability(rain_probability, travel_time)\n        print(f\"{probability:.4f}\")\n\nif __name__ == \"__main__\":\n    main()", "import math\n\n# Function to calculate the probability of rainfall during Raj's commute\ndef rainfall_probability(p, time):\n    # Calculate the probability of no rainfall during the commute\n    no_rain_probability = (1 - p) ** time\n    \n    # Calculate the probability of rainfall during the commute\n    rainfall_probability = 1 - no_rain_probability\n    \n    # Return the result rounded to 4 decimal places\n    return round(rainfall_probability, 4)\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Process each test case\nfor _ in range(test_cases):\n    # Read the probability of rainfall and commute time\n    p, time = map(float, input().split())\n    \n    # Calculate and print the result\n    result = rainfall_probability(p, time)\n    print(result)", "import math\n\n# Function to calculate the probability\ndef calculate_probability(probability, time):\n    # Calculate the probability that it does not rain during the time\n    not_raining_probability = (1 - probability) ** time\n    \n    # Calculate the probability that it rains during the time\n    raining_probability = 1 - not_raining_probability\n    \n    # Return the probability rounded to 4 decimal places\n    return round(raining_probability, 4)\n\n# Number of test cases\ntest_cases = int(input())\n\n# Process each test case\nfor _ in range(test_cases):\n    # Input probability and time\n    probability, time = map(float, input().split())\n    \n    # Calculate and print the probability\n    print(calculate_probability(probability, time))", "import math\n\nT = int(input())\nfor _ in range(T):\n    P, time = map(float, input().split())\n    P = math.pow(P, time)\n    print(f\"{P:.4f}\")", "import math\n\ndef calculate_probability():\n    T = int(input())\n    for _ in range(T):\n        P, time = map(float, input().split())\n        # Calculate the probability of no rain\n        prob_no_rain = (1 - P) ** (time // 1440)\n        # Calculate the probability of rain\n        prob_rain = 1 - prob_no_rain\n        # Print the result rounded to 4 decimal places\n        print('{:.4f}'.format(prob_rain))\n\ncalculate_probability()", "import math\n\nfor _ in range(int(input())):\n    P, time = map(float, input().split())\n    probability = (1 - P) ** (1440 // time)\n    print(f\"{probability:.4f}\")", "import math\n\ndef calculate_probability(P, time):\n    \"\"\"\n    Calculate the probability that it rains during Raj's commute.\n\n    Args:\n    P (float): The probability of rainfalls today.\n    time (int): The time it will take for Raj to reach his office.\n\n    Returns:\n    float: The probability that it rains during Raj's commute.\n    \"\"\"\n    # Calculate the probability of no rain\n    P_no_rain = (1 - P) ** (1440 // time)\n    # Calculate the probability of rain\n    P_rain = 1 - P_no_rain\n    return round(P_rain, 4)\n\n# Read the number of test cases\nT = int(input())\n\n# Process each test case\nfor _ in range(T):\n    # Read the probability and time\n    P, time = map(float, input().split())\n    # Calculate and print the probability of rain\n    print(calculate_probability(P, time))", "import math\n\ndef calculate_rain_probability():\n    MOD = 10 ** 9 + 7\n    t = int(input())\n    for _ in range(t):\n        P, T = map(float, input().split())\n        D = (1 + P) / 2\n        R = 1\n        while T > 0:\n            if T % 2:\n                R = (R * D) % MOD\n            D = (D * D) % MOD\n            T //= 2\n        print(f\"{R:.4f}\")\n\ncalculate_rain_probability()", "import math\n\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n    \n    Args:\n        rainfall_probability (float): The probability of rainfall today.\n        travel_time (int): The time it takes for Raj to reach his office.\n    \n    Returns:\n        float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Since the probability of rainfall today is independent of the travel time,\n    # we can calculate the probability that it rains during the travel time by\n    # multiplying the rainfall probability with the probability of rainfall for each hour\n    # of travel time.\n    # The probability of rainfall for each hour of travel time is the rainfall probability\n    # to the power of the number of hours.\n    return rainfall_probability * (rainfall_probability ** (travel_time - 1))\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n    \n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the rainfall probability and travel time\n        rainfall_probability, travel_time = map(float, input().split())\n        \n        # Calculate and print the probability that it rains during the travel time\n        probability = calculate_probability(rainfall_probability, travel_time)\n        print(\"{:.4f}\".format(probability))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n    rainfall_probability (float): The probability that it will rain today.\n    travel_time (int): The time it takes for Raj to reach his office in minutes.\n\n    Returns:\n    float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the probability that it does not rain\n    no_rain_probability = 1 - rainfall_probability\n    \n    # Calculate the probability that it rains during the travel time\n    # This is done by raising the probability that it does not rain to the power of the travel time\n    # Then subtract this from 1 to get the probability that it rains\n    rain_probability = 1 - (no_rain_probability ** travel_time)\n    \n    return round(rain_probability, 4)\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Read the test cases\nfor _ in range(test_cases):\n    # Read the rainfall probability and travel time\n    rainfall_probability, travel_time = map(float, input().split())\n    \n    # Calculate and print the probability that it rains during the travel time\n    print(calculate_probability(rainfall_probability, travel_time))", "import math\n\ndef calculate_probability(rain_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n        rain_probability (float): The probability of rain today.\n        travel_time (int): The time it will take for Raj to reach his office.\n\n    Returns:\n        float: The probability that it rains during the travel time.\n    \"\"\"\n    # Calculate the probability that it does not rain during the travel time\n    no_rain_probability = (1 - rain_probability) ** (travel_time // 1440)\n    \n    # Calculate the probability that it rains during the travel time\n    rain_probability_during_travel = 1 - no_rain_probability\n    \n    # Return the probability that it rains during the travel time, rounded to 4 decimal places\n    return round(rain_probability_during_travel, 4)\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Process each test case\nfor _ in range(num_test_cases):\n    # Read the probability of rain and travel time\n    rain_probability, travel_time = input().split()\n    rain_probability = float(rain_probability)\n    travel_time = int(travel_time)\n    \n    # Calculate and print the probability that it rains during the travel time\n    print(calculate_probability(rain_probability, travel_time))", "import math\n\nT = int(input())\n\nfor _ in range(T):\n    P, time = map(float, input().split())\n\n    # calculate the probability of no rain during the given time\n    prob_no_rain = (1 - P) ** (time // 1440)\n\n    # calculate the probability of rain during the given time\n    prob_rain = 1 - prob_no_rain\n\n    # round the result to 4 decimal places\n    prob_rain = round(prob_rain, 4)\n\n    print(prob_rain)", "import math\n\ndef calculate_rainfall_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n    p (float): The probability of rain today.\n    time (int): The time it takes for Raj to reach his office in minutes.\n\n    Returns:\n    float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the probability that it does not rain during the time Raj is on the way\n    no_rain_probability = (1 - p) ** (time // 1440)\n    \n    # Calculate the probability that it rains during the time Raj is on the way\n    rainfall_probability = 1 - no_rain_probability\n    \n    return rainfall_probability\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Process each test case\n    for _ in range(test_cases):\n        # Read the probability of rain today and the time it takes to reach the office\n        p, time = map(float, input().split())\n\n        # Calculate and print the probability that it rains during the time Raj is on the way\n        print(\"{:.4f}\".format(calculate_rainfall_probability(p, time)))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef solve():\n    MOD = 10 ** 9 + 7\n    T = int(input())\n    for _ in range(T):\n        P, time = map(float, input().split())\n        D = 1\n        for i in range(time):\n            D = (D * P) % MOD\n            D = (D * (1 - P)) % MOD\n        print('{:.4f}'.format(D))\n\nsolve()", "import math\n\nT = int(input())\nfor _ in range(T):\n    P = float(input().split()[0])\n    time = int(input().split()[1])\n    \n    # Calculate the probability that it does not rain\n    prob_not_rain = 1 - P\n    \n    # Calculate the probability that it rains during the time it takes to reach the office\n    prob_rain = 1 - math.pow(1 - P, time / 1440)\n    \n    # Print the probability that it rains\n    print(round(prob_rain, 4))", "import math\n\ndef solve_case():\n    MOD = 10**9 + 7\n    (P, time) = map(float, input().split())\n    time = time // 2  # since 1440 is the total minutes in a day\n    D = P\n    R = 1\n    T = time\n    while T > 0:\n        if T % 2:\n            R = (R * D) % MOD\n        D = (D * D) % MOD\n        T //= 2\n    R = (R + MOD) % MOD  # add MOD to handle the case when R is 0\n    print('{:.4f}'.format(R / MOD))\n\nT = int(input())\nfor _ in range(T):\n    solve_case()", "import math\n\ndef calculate_probability_of_rain(time, probability_of_rain):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on his way to the office.\n\n    Args:\n    time (int): The time it takes for Raj to reach his office in minutes.\n    probability_of_rain (float): The probability that it will rain today.\n\n    Returns:\n    float: The probability that it rains during the time Raj is on his way to the office.\n    \"\"\"\n    # Calculate the probability of no rain during the time\n    probability_of_no_rain = (1 - probability_of_rain) ** (time // 1440)\n    # Calculate the probability of rain during the time\n    probability_of_rain_during_time = probability_of_rain * (1 - probability_of_no_rain)\n    return probability_of_rain_during_time\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Process each test case\nfor _ in range(num_test_cases):\n    # Read the probability of rain and time\n    probability_of_rain, time = map(float, input().split())\n    # Calculate and print the probability of rain during the time\n    print(f\"{calculate_probability_of_rain(time, probability_of_rain):.4f}\")", "import math\n\nT = int(input())\nfor _ in range(T):\n    P, time = map(float, input().split())\n    # Calculate the probability of no rainfall during Raj's journey\n    prob_no_rain = (1 - P) ** time\n    # Calculate the probability of rainfall during Raj's journey\n    prob_rain = 1 - prob_no_rain\n    print(\"{:.4f}\".format(prob_rain))", "import math\n\ndef calculate_probability():\n    t = int(input())\n    for _ in range(t):\n        p, time = map(float, input().split())\n        # calculate the probability of rain after time minutes\n        probability = 1 - (1 - p) ** (time // 1440)\n        # round the probability to 4 decimal places\n        probability = round(probability, 4)\n        print(probability)\n\ncalculate_probability()", "import math\n\nMOD = 10**9 + 7\nT = int(input())\n\nfor _ in range(T):\n    P, time = map(float, input().split())\n    D = (P + (1 - P)) // 2\n    R = 1\n    while time > 0:\n        if time % 2:\n            R = R * D % MOD\n        D = D * D % MOD\n        time //= 2\n    print(f\"{R:.4f}\")", "import math\n\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the travel time.\n\n    Args:\n    rainfall_probability (float): The probability of rainfall today.\n    travel_time (int): The time it will take for Raj to reach his office in minutes.\n\n    Returns:\n    float: The probability that it rains during the travel time.\n    \"\"\"\n    # Calculate the probability of no rain during the travel time\n    no_rain_probability = (1 - rainfall_probability) ** (travel_time // 2)\n    \n    # Calculate the probability of rain during the travel time\n    rain_probability = 1 - no_rain_probability\n    \n    # Round the result to 4 decimal places\n    return round(rain_probability, 4)\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Iterate over each test case\nfor _ in range(test_cases):\n    # Read the rainfall probability and travel time\n    rainfall_probability, travel_time = input().split()\n    rainfall_probability = float(rainfall_probability)\n    travel_time = int(travel_time)\n\n    # Calculate and print the probability of rain during the travel time\n    print(calculate_probability(rainfall_probability, travel_time))", "import math\n\ndef calculate_probability(rain_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n    rain_probability (float): The probability that it will rain today.\n    travel_time (int): The time (in minutes) it will take for Raj to reach his office.\n\n    Returns:\n    float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the number of minutes in a day\n    total_minutes_in_a_day = 1440\n\n    # Calculate the number of minutes in a cycle\n    cycle_minutes = total_minutes_in_a_day // travel_time\n\n    # Calculate the probability that it rains during the cycle\n    probability_rains_during_cycle = (1 - rain_probability) ** cycle_minutes\n\n    # Calculate the probability that it rains during the travel time\n    probability_rains_during_travel_time = rain_probability * (1 - probability_rains_during_cycle)\n\n    return round(probability_rains_during_travel_time, 4)\n\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Iterate over each test case\nfor _ in range(num_test_cases):\n    # Read the probability of rain and travel time\n    rain_probability, travel_time = input().split()\n    rain_probability = float(rain_probability)\n    travel_time = int(travel_time)\n\n    # Calculate the probability that it rains during the travel time\n    probability = calculate_probability(rain_probability, travel_time)\n\n    # Print the result\n    print(probability)", "import math\n\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n    rainfall_probability (float): The probability of rainfalls today.\n    travel_time (int): The time it will take for Raj to reach his office.\n\n    Returns:\n    float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Since the probability of rain during the first half of the travel time and the second half are independent,\n    # we can multiply these probabilities to get the overall probability of rain during the entire travel time.\n    # We use the formula for the probability of independent events: P(A and B) = P(A) * P(B)\n    # Here, A is the event that it rains during the first half of the travel time, and B is the event that it rains during the second half of the travel time.\n    # Since the probability of rain during the first half of the travel time is equal to the probability of rain during the second half of the travel time,\n    # we can simplify the formula to: P(rain during travel time) = P(rain during first half) * P(rain during second half)\n    # Since the probability of rain during the first half of the travel time is equal to the rainfall probability, we can write:\n    return (rainfall_probability ** (travel_time // 2)) * (1 - rainfall_probability ** (travel_time // 2))\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Iterate over each test case\nfor _ in range(num_test_cases):\n    # Read the rainfall probability and travel time for the current test case\n    rainfall_probability, travel_time = map(float, input().split())\n\n    # Calculate and print the probability of rain during the travel time\n    print('{:.4f}'.format(calculate_probability(rainfall_probability, travel_time)))", "import math\n\ndef calculate_probability():\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n    \n    Parameters:\n    p (float): The probability of rainfall today.\n    time (int): The time it will take for Raj to reach his office.\n    \n    Returns:\n    float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    MOD = 10**9 + 7\n    (p, time) = map(float, input().split())\n    D = (p + (1-p)) // 2\n    R = 1\n    while time > 0:\n        if time % 2:\n            R = R * D % MOD\n        D = D * D % MOD\n        time //= 2\n    return R\n\ndef main():\n    \"\"\"\n    Main function to get the number of test cases and calculate the probability for each test case.\n    \"\"\"\n    for _ in range(int(input())):\n        print(f\"{calculate_probability():.4f}\")\n\nif __name__ == \"__main__\":\n    main()", "import math\n\nT = int(input())\n\nfor _ in range(T):\n    P = float(input().split()[0])\n    time = int(input().split()[1])\n\n    # Calculate the probability of rain for each minute\n    prob_per_minute = P / time\n\n    # Calculate the probability that it rains for the entire time\n    prob_rain = 1 - (1 - P) ** time\n\n    # Round the answer to 4 decimal places\n    print(format(prob_rain, '.4f'))", "def calculate_probability_of_rain(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n    rainfall_probability (float): The probability that it will rain today.\n    travel_time (int): The time it takes for Raj to reach his office.\n\n    Returns:\n    float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # The probability that it rains during the time Raj is on the way is equal to the rainfall probability\n    # because the travel time is a divisor of 1440, which is the total number of minutes in a day\n    return rainfall_probability\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Process each test case\nfor _ in range(num_test_cases):\n    # Read the rainfall probability and travel time\n    rainfall_probability, travel_time = map(float, input().split())\n\n    # Calculate and print the result\n    result = calculate_probability_of_rain(rainfall_probability, travel_time)\n    print(f\"{result:.4f}\")", "import math\n\nMOD = 10**9 + 7\nT = int(input())\n\nfor _ in range(T):\n    P = float(input().split()[0])\n    time = int(input().split()[1])\n\n    D = time // 1440  # since time is a perfect divisor of 1440\n    R = 1\n    while D > 0:\n        if D % 2:\n            R = R * (1 - P) * (1 - P) % MOD\n        R = R * (1 - P) * (1 - P) % MOD\n        D //= 2\n    R = R * (1 - P) % MOD\n    print('{:.4f}'.format(R))", "import math\n\ndef calculate_probability(time, probability):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n    time (int): The time (in minutes) it takes for Raj to reach his office.\n    probability (float): The probability that it will rain today.\n\n    Returns:\n    float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # If the probability of rain is 0, the probability of rain during the time is 0\n    if probability == 0:\n        return 0\n    # If the time is a multiple of 1440, the probability of rain during the time is 1\n    if time % 1440 == 0:\n        return 1\n    # Calculate the probability of no rain during the time\n    no_rain_probability = (1 - probability) ** (time // 1440)\n    # Calculate the probability of rain during the time\n    rain_probability = 1 - no_rain_probability\n    return rain_probability\n\ndef main():\n    \"\"\"\n    Main function to solve the problem.\n    \"\"\"\n    # Read the number of test cases\n    num_test_cases = int(input())\n    # Iterate over each test case\n    for _ in range(num_test_cases):\n        # Read the probability and time for the current test case\n        probability, time = map(float, input().split())\n        # Calculate and print the probability of rain during the time\n        print('{:.4f}'.format(calculate_probability(time, probability)))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability(T, P, time):\n    \"\"\"\n    Calculate the probability of rain during Raj's commute.\n\n    Args:\n        T (int): Number of test cases.\n        P (float): Probability of rain today (0.0 to 0.5).\n        time (int): Time it takes for Raj to reach his office in minutes.\n\n    Returns:\n        None\n    \"\"\"\n    # Calculate the number of minutes it takes for a full cycle\n    cycle_time = 1440 / time\n\n    # Calculate the number of cycles in the given time\n    num_cycles = time // cycle_time\n\n    # Calculate the probability of no rain during the given time\n    no_rain_prob = (1 - P) ** num_cycles\n\n    # Calculate the probability of rain during the given time\n    rain_prob = 1 - no_rain_prob\n\n    return round(rain_prob, 4)\n\n# Read the number of test cases\nT = int(input())\n\n# Process each test case\nfor _ in range(T):\n    # Read the probability and time\n    P = float(input().split()[0])\n    time = int(input().split()[1])\n\n    # Calculate and print the probability of rain\n    print(calculate_probability(T, P, time))", "import math\n\nT = int(input())\nfor _ in range(T):\n    P, time = map(float, input().split())\n    # Calculate the probability that it rains during the time it takes to reach the office\n    prob_rain = P * (1 - (1 - P) ** (1440 // time))\n    # Round the result to 4 decimal places\n    print('{:.4f}'.format(prob_rain))", "def calculate_probability_of_rain(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes for Raj to reach his office.\n\n    Args:\n        p (float): The probability that it will rain today.\n        time (int): The time it will take for Raj to reach his office in minutes.\n\n    Returns:\n        float: The probability that it rains during the time it takes for Raj to reach his office.\n    \"\"\"\n    # Since the probability of rain is independent of the time, we can simply multiply the probability by the time.\n    return p * (time / 1440)\n\n\ndef main():\n    \"\"\"\n    Main function to read input, calculate the probability of rain, and print the result.\n    \"\"\"\n    MOD = 10 ** 9 + 7\n    t = int(input())\n\n    for _ in range(t):\n        p, time = map(float, input().split())\n        probability_of_rain = calculate_probability_of_rain(p, time)\n        print('{:.4f}'.format(probability_of_rain))\n\n\nif __name__ == \"__main__\":\n    main()", "import math\n\nfor _ in range(int(input())):\n    # Read the probability of rain and time\n    P, time = map(float, input().split())\n\n    # Calculate the probability that it rains during the time\n    # This is equivalent to 1 - P for the time before Raj reaches the office\n    # Since time is a perfect divisor of 1440, we need to find the time before Raj reaches the office\n    # We can do this by finding the GCD of time and 1440\n    gcd = math.gcd(int(time), 1440)\n    time_before_office = time // gcd\n\n    # Calculate the probability that it rains during the time\n    prob_rain = 1 - P\n    prob_rain *= (prob_rain ** (time_before_office // gcd))\n\n    # Round the result to 4 decimal places\n    print('{:.4f}'.format(prob_rain))", "import math\n\ndef solve(T, cases):\n    for p, t in cases:\n        probability = 1 - (1 - p) ** (t // 1440)\n        print(\"{0:.4f}\".format(probability))\n\nT = int(input())\ncases = [tuple(map(float, input().split())) for _ in range(T)]\nsolve(T, cases)", "def calculate_probability_of_rain(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n    rainfall_probability (float): The probability that it will rain today.\n    travel_time (int): The time (in minutes) it will take for Raj to reach his office.\n\n    Returns:\n    float: The probability that it rains during the time Raj is on the way to his office.\n    \"\"\"\n    # Calculate the probability of no rain during the travel time\n    no_rain_probability = (1 - rainfall_probability) ** (travel_time // 1440)\n\n    # Calculate the probability of rain during the travel time\n    rain_probability = 1 - no_rain_probability\n\n    # Round the result to 4 decimal places\n    return round(rain_probability, 4)\n\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the rainfall probability and travel time\n        rainfall_probability, travel_time = map(float, input().split())\n\n        # Calculate and print the result\n        result = calculate_probability_of_rain(rainfall_probability, travel_time)\n        print(f\"{result:.4f}\")\n\n\nif __name__ == \"__main__\":\n    main()", "import math\n\nfor _ in range(int(input())):\n    P = float(input().split()[0])\n    time = int(input().split()[1])\n    if P == 0:\n        print(\"0.0000\")\n    else:\n        print(\"{:.4f}\".format(1 - (1 - P ** time)))", "def calculate_probability():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    for _ in range(test_cases):\n        # Read the probability of rain and time taken\n        probability, time = map(float, input().split())\n\n        # Calculate the probability that it rains during the given time\n        probability_rains = probability * time\n\n        # Round the answer to 4 decimal places\n        probability_rains = round(probability_rains, 4)\n\n        # Print the result\n        print(probability_rains)\n\ncalculate_probability()", "import math\n\ndef calculate_probability():\n    T = int(input())\n    for _ in range(T):\n        P, time = map(float, input().split())\n        probability = 1 - (1 - P) ** time / (1 - (1 - P) ** 1440)\n        print(\"{:.4f}\".format(probability))\n\ncalculate_probability()", "import math\n\ndef calculate_rainfall_probability(probability, time):\n    \"\"\"\n    Calculate the probability that it rains during a given time.\n\n    Args:\n    probability (float): The probability of rain today.\n    time (int): The time it takes for Raj to reach his office in minutes.\n\n    Returns:\n    float: The probability that it rains during the given time.\n    \"\"\"\n    # If the probability is 0, the chance of rain during any time is 0\n    if probability == 0:\n        return 0\n    \n    # Calculate the probability that it does not rain during the given time\n    no_rain_probability = (1 - probability) ** time\n    \n    # Calculate the probability that it rains during the given time\n    rainfall_probability = 1 - no_rain_probability\n    \n    # Round the result to 4 decimal places\n    return round(rainfall_probability, 4)\n\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the probability of rain and the time\n        probability, time = map(float, input().split())\n        \n        # Calculate and print the rainfall probability\n        print(calculate_rainfall_probability(probability, time))\n\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability(rainfall_probability, commute_time):\n    \"\"\"\n    Calculate the probability that it rains during Raj's commute.\n\n    Args:\n        rainfall_probability (float): Probability of rainfall today (0.0 to 1.0).\n        commute_time (int): Time of Raj's commute in minutes.\n\n    Returns:\n        float: Probability that it rains during Raj's commute.\n    \"\"\"\n    # Calculate the probability that it does not rain during Raj's commute\n    no_rain_probability = (1 - rainfall_probability) ** (commute_time // 1440)\n    \n    # Calculate the probability that it rains during Raj's commute\n    rain_probability = 1 - no_rain_probability\n    \n    return rain_probability\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Process each test case\nfor _ in range(num_test_cases):\n    # Read the rainfall probability and commute time\n    rainfall_probability, commute_time = map(float, input().split())\n    \n    # Calculate and print the probability that it rains during Raj's commute\n    print(\"{:.4f}\".format(calculate_probability(rainfall_probability, commute_time)))", "import math\n\ndef calculate_probability(time, probability):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n        time (int): Time it takes for Raj to reach his office in minutes.\n        probability (float): Probability of rainfalls today.\n\n    Returns:\n        float: Probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the number of periods in the given time\n    num_periods = time // 1440\n    \n    # Calculate the remaining time in minutes\n    remaining_time = time % 1440\n    \n    # Calculate the number of remaining periods in the remaining time\n    num_remaining_periods = remaining_time // 1440\n    \n    # Calculate the probability that it rains during the remaining time\n    remaining_probability = probability * (1 - probability) ** num_remaining_periods\n    \n    # Calculate the probability that it rains during the given time\n    probability = probability * (1 - probability) ** num_periods\n    \n    # Return the probability\n    return probability\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Process each test case\nfor _ in range(num_test_cases):\n    # Read the probability of rainfalls and the time it takes to reach the office\n    probability, time = input().split()\n    probability = float(probability)\n    time = int(time)\n    \n    # Calculate and print the probability that it rains during the time Raj is on the way\n    print(\"{:.4f}\".format(calculate_probability(time, probability)))", "import math\n\ndef calculate_probability(P, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Parameters:\n    P (float): The probability of rain today.\n    time (int): The time it takes for Raj to reach his office.\n\n    Returns:\n    float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    return P * (1 - (1 - P) ** (time - 1))\n\ndef main():\n    MOD = 10**9 + 7\n    T = int(input())\n    for _ in range(T):\n        P, time = map(float, input().split())\n        probability = calculate_probability(P, time)\n        print(\"{:.4f}\".format(probability))\n\nif __name__ == \"__main__\":\n    main()", "def calculate_probability(T, time, P):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n    T (int): The number of test cases.\n    time (int): The time it takes for Raj to reach his office in minutes.\n    P (float): The probability of rainfalls today.\n\n    Returns:\n    None\n    \"\"\"\n    # Calculate the probability that it doesn't rain during the entire time\n    no_rain_probability = (1 - P) ** (time // 1440)\n    \n    # If the time is not a multiple of 1440, calculate the probability of rain for the remaining time\n    if time % 1440!= 0:\n        remaining_time = time % 1440\n        rain_probability = P ** remaining_time\n        no_rain_probability *= (1 - P) ** remaining_time\n    \n    # Calculate the probability that it rains during the time Raj is on the way\n    rain_probability = 1 - no_rain_probability\n    \n    # Return the result rounded to 4 decimal places\n    return round(rain_probability, 4)\n\n\n# Read the number of test cases\nT = int(input())\n\n# Process each test case\nfor _ in range(T):\n    # Read the probability and time\n    P, time = input().split()\n    P, time = float(P), int(time)\n    \n    # Calculate and print the result\n    result = calculate_probability(T, time, P)\n    print(result)", "import math\n\ndef calculate_probability(rainfall_probability, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n    rainfall_probability (float): The probability of rainfalls today.\n    time (int): The time (in minutes) it will take for Raj to reach his office.\n\n    Returns:\n    float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the probability that it does not rain during the time Raj is on the way\n    no_rain_probability = (1 - rainfall_probability) ** time\n    # Calculate the probability that it rains during the time Raj is on the way\n    rain_probability = 1 - no_rain_probability\n    return round(rain_probability, 4)\n\ndef main():\n    \"\"\"\n    Main function to handle user input and output.\n    \"\"\"\n    # Read the number of test cases\n    num_test_cases = int(input())\n    # Loop through each test case\n    for _ in range(num_test_cases):\n        # Read the probability of rainfalls and time\n        rainfall_probability, time = map(float, input().split())\n        # Calculate and print the probability\n        print(calculate_probability(rainfall_probability, time))\n\nif __name__ == \"__main__\":\n    main()", "def calculate_probability(rain_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n    rain_probability (float): The probability that it will rain today.\n    travel_time (int): The time it will take for Raj to reach his office.\n\n    Returns:\n    float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # The probability that it rains during the travel time is equal to the probability that it rains today\n    # This is because the probability of two independent events occurring is the product of their individual probabilities\n    return rain_probability\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the probability of rain and travel time\n        rain_probability, travel_time = input().split()\n        rain_probability = float(rain_probability)\n        travel_time = int(travel_time)\n\n        # Calculate and print the probability that it rains during the travel time\n        probability = calculate_probability(rain_probability, travel_time)\n        print('{:.4f}'.format(probability))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\nMOD = 10**9 + 7\n\ndef calculate_rainfall_probability():\n    T = int(input())\n    for _ in range(T):\n        P, time = map(float, input().split())\n        D = (1 + P) / 2\n        R = 1\n        for _ in range(time):\n            R = (D - R) % MOD\n            D = (D * D) % MOD\n        print(f\"{R:.4f}\")\n\ncalculate_rainfall_probability()", "import math\n\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the travel time.\n\n    Args:\n    rainfall_probability (float): The probability of rainfalls today.\n    travel_time (int): The time it takes for Raj to reach his office in minutes.\n\n    Returns:\n    float: The probability that it rains during the travel time.\n    \"\"\"\n    # Calculate the probability that it does not rain during the travel time\n    no_rain_probability = (1 - rainfall_probability) ** (travel_time // 24)\n    # Calculate the probability that it rains during the travel time\n    rain_probability = 1 - no_rain_probability\n    return round(rain_probability, 4)\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Iterate over each test case\nfor _ in range(num_test_cases):\n    # Read the rainfall probability and travel time\n    rainfall_probability, travel_time = map(float, input().split())\n    # Calculate and print the probability that it rains during the travel time\n    print(calculate_probability(rainfall_probability, travel_time))", "import math\n\ndef calculate_probability():\n    MOD = 10**9 + 7\n    T = int(input())\n    for _ in range(T):\n        P, t = map(float, input().split())\n        if P == 0:\n            print('0.0000')\n        else:\n            D = (P + (1 - P)) // 2\n            R = 1\n            while t > 0:\n                if t % 2 == 1:\n                    R = R * D % MOD\n                D = D * D % MOD\n                t //= 2\n            print('{:.4f}'.format(R))\n\ncalculate_probability()", "def calculate_rain_probability():\n    MOD = 10**9 + 7\n    T = int(input())\n\n    for _ in range(T):\n        P, time = map(float, input().split())\n        D = (P + 1 - P * time) / (1 - P * time)\n\n        # Calculate the modular inverse of (1 - P * time) modulo 1000\n        # This is done to avoid floating point precision issues\n        den = pow(1 - P * time, -1, MOD)\n\n        # Calculate the probability\n        probability = (D * den) % MOD\n\n        # Print the result rounded to 4 decimal places\n        print(f'{probability:.4f}')\n\ncalculate_rain_probability()", "import math\n\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n    rainfall_probability (float): The probability that it will rain today.\n    travel_time (int): The time it takes for Raj to reach his office in minutes.\n\n    Returns:\n    float: The probability that it rains during the time Raj is on the way to his office.\n    \"\"\"\n    # Calculate the number of 2-minute intervals in the travel time\n    intervals = travel_time // 2\n\n    # Calculate the binomial coefficient using the formula for combinations\n    binomial_coefficient = math.comb(intervals, 1)\n\n    # Calculate the probability of rain during the travel time\n    probability = binomial_coefficient * (rainfall_probability ** 1) * ((1 - rainfall_probability) ** (intervals - 1))\n\n    return round(probability, 4)\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Process each test case\nfor _ in range(num_test_cases):\n    # Read the rainfall probability and travel time\n    rainfall_probability, travel_time = map(float, input().split())\n\n    # Calculate and print the probability\n    print(calculate_probability(rainfall_probability, travel_time))", "import math\n\nT = int(input())\nfor _ in range(T):\n    P = float(input().split()[0])\n    time = int(input().split()[1])\n    \n    # Calculate the probability\n    probability = P * (time / 1440)\n    \n    # Round the result to 4 decimal places\n    probability = round(probability, 4)\n    \n    print(probability)", "import math\n\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n    \n    Args:\n    rainfall_probability (float): The probability of rainfalls today.\n    travel_time (int): The time (in minutes) it will take for Raj to reach his office.\n    \n    Returns:\n    float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the probability that it doesn't rain during the travel time\n    no_rain_probability = (1 - rainfall_probability) ** math.gcd(travel_time, 1440)\n    \n    # Calculate the probability that it rains during the travel time\n    rain_probability = 1 - no_rain_probability\n    \n    # Round the result to 4 decimal places\n    rain_probability = round(rain_probability, 4)\n    \n    return rain_probability\n\ndef main():\n    \"\"\"\n    Main function to handle user input and output.\n    \"\"\"\n    # Get the number of test cases\n    num_test_cases = int(input())\n    \n    # Process each test case\n    for _ in range(num_test_cases):\n        # Get the probability of rainfalls and travel time\n        rainfall_probability, travel_time = map(float, input().split())\n        \n        # Calculate and print the probability that it rains during the travel time\n        print(calculate_probability(rainfall_probability, travel_time))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability():\n    MOD = 10 ** 9 + 7\n    t = int(input())\n    for _ in range(t):\n        p, time = map(float, input().split())\n        D = (p + (1 - p)) // 2\n        R = 1\n        while time > 0:\n            if time % 2:\n                R = R * D % MOD\n            D = D * D % MOD\n            time //= 2\n        print(f\"{R:.4f}\")\n\nif __name__ == \"__main__\":\n    calculate_probability()", "import math\n\ndef calculate_rainfall_probability(probability, time):\n    \"\"\"\n    Calculate the probability of rain during Raj's commute.\n\n    Args:\n        probability (float): The probability of rain today.\n        time (int): The time (in minutes) it will take for Raj to reach his office.\n\n    Returns:\n        float: The probability of rain during Raj's commute.\n    \"\"\"\n    # Calculate the probability of no rain during Raj's commute\n    no_rain_probability = (1 - probability) ** (time // 1440)\n    \n    # Calculate the probability of rain during Raj's commute\n    rain_probability = 1 - no_rain_probability\n    \n    # Round the result to 4 decimal places\n    return round(rain_probability, 4)\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Process each test case\n    for _ in range(test_cases):\n        # Read the probability of rain and time\n        probability, time = map(float, input().split())\n\n        # Calculate and print the probability of rain during Raj's commute\n        print(calculate_rainfall_probability(probability, time))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability(P, time):\n    \"\"\"\n    Calculate the probability that it rains during the given time.\n    \n    Parameters:\n    P (float): The probability of rain (0.0 to 1.0).\n    time (int): The time it takes to reach the office (in minutes).\n    \n    Returns:\n    float: The probability that it rains during the given time.\n    \"\"\"\n    # Since the probability of rain is P, the probability of no rain is 1 - P\n    # We can use the formula for the probability of independent events: P(A and B) = P(A) * P(B)\n    # In this case, A is the event that it rains and B is the event that it doesn't rain\n    # So, the probability that it rains during the given time is P * (1 - P)^(time - 1)\n    # We use the fact that time is a perfect divisor of 1440 to simplify the calculation\n    # Since 1440 = 2^6 * 3^2 * 5, we can use the properties of modular arithmetic to calculate the probability\n    # For example, (1 - P)^(time - 1) = (1 - P)^1440 / (1 - P)^((time - 1) mod 1440)\n    # We can use the fact that (1 - P)^1440 = 1 to simplify the calculation\n    # Finally, we use the property of modular arithmetic that a^b mod n = (a mod n)^b to calculate the probability\n    return P * (1 - P) ** ((time - 1) % 1440)\n\n# Read the number of test cases\nT = int(input())\n\n# Process each test case\nfor _ in range(T):\n    # Read the probability of rain and the time\n    P, time = map(float, input().split())\n    \n    # Calculate and print the probability\n    print(\"{:.4f}\".format(calculate_probability(P, time)))", "import math\n\nMOD = 10 ** 9 + 7\n\ndef calculate_probability():\n    # Read the number of test cases\n    T = int(input())\n\n    for _ in range(T):\n        # Read the probability of rain and time\n        P, time = map(float, input().split())\n\n        # Calculate the probability that it rains during the time\n        D = (1 - P) * (1 - P)\n        for _ in range(time):\n            D *= (1 - P)\n\n        # Calculate the probability that it does not rain during the time\n        D *= (1 - P)\n        D *= (1 - P)\n        for _ in range(time - 1):\n            D *= (1 - P)\n\n        # Calculate the final probability\n        D *= P\n\n        # Print the result rounded to 4 decimal places\n        print(f\"{D:.4f}\")\n\n# Call the function to start the program\ncalculate_probability()", "import math\n\ndef calculate_probability(rain_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes to travel to the office.\n\n    Args:\n    rain_probability (float): The probability of rain.\n    travel_time (int): The time it takes to travel to the office in minutes.\n\n    Returns:\n    float: The probability that it rains during the travel time.\n    \"\"\"\n    # Calculate the probability that it does not rain\n    no_rain_probability = 1 - rain_probability\n\n    # Calculate the number of times the travel time is a multiple of 1440 (the number of minutes in a day)\n    num_multiples = travel_time // 1440\n\n    # Calculate the probability that it does not rain for any of the multiples\n    no_rain_for_multiples = no_rain_probability ** num_multiples\n\n    # Calculate the probability that it rains during the travel time\n    rain_probability_travel_time = 1 - no_rain_for_multiples\n\n    return rain_probability_travel_time\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Read the test cases\n    for _ in range(num_test_cases):\n        # Read the probability of rain and travel time\n        rain_probability, travel_time = map(float, input().split())\n\n        # Calculate the probability that it rains during the travel time\n        probability = calculate_probability(rain_probability, travel_time)\n\n        # Print the result rounded to 4 decimal places\n        print(\"{:.4f}\".format(probability))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n    p (float): The probability of rain today.\n    time (int): The time it will take for Raj to reach his office.\n\n    Returns:\n    float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Since time is a perfect divisor of 1440, we can find the time it would take for Raj to reach his office if it rains\n    # by dividing the time by the probability of rain, and multiplying by the probability of no rain\n    # The probability of no rain is 1 - p\n    return (1 - p) * (1 - (1 - p) ** (time / 1440))\n\n# Read the number of test cases\nT = int(input())\n\n# Iterate over each test case\nfor _ in range(T):\n    # Read the probability of rain and time\n    p, time = map(float, input().split())\n\n    # Calculate and print the probability\n    print(format(calculate_probability(p, time), \".4f\"))", "import math\n\ndef calculate_probability(rain_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the travel time.\n\n    Args:\n        rain_probability (float): The probability of rain.\n        travel_time (int): The time taken to travel.\n\n    Returns:\n        float: The probability that it rains during the travel time.\n    \"\"\"\n    # Since the probability of rain remains constant, \n    # we can multiply the probability by the number of times it rains in the given travel time\n    # The number of times it rains in 1440 minutes is 1440 / 1440 = 1, \n    # so we multiply the probability by the number of times it rains in the given travel time\n    # The number of times it rains in the given travel time is 1440 // travel_time\n    return rain_probability * (1440 // travel_time)\n\ndef main():\n    MOD = 10 ** 9 + 7\n    for _ in range(int(input())):\n        rain_probability, travel_time = map(float, input().split())\n        result = calculate_probability(rain_probability, travel_time)\n        print('{:.4f}'.format(result))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\nfor _ in range(int(input())):\n    P, time = map(float, input().split())\n    time /= 1440  # convert minutes to hours\n    result = 1 - (1 - P) ** (time * 24)  # calculate the probability\n    print(round(result, 4))", "import math\n\ndef calculate_probability():\n    T = int(input())\n    for _ in range(T):\n        P, time = map(float, input().split())\n        probability = P * (1 - (1 - P) ** (1440 // time))\n        print(f'{probability:.4f}')\n\ncalculate_probability()", "import math\n\ndef calculate_probability(probability, time):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes to reach the office.\n\n    Args:\n    probability (float): The probability of rain today.\n    time (int): The time it takes to reach the office in minutes.\n\n    Returns:\n    float: The probability that it rains during the time it takes to reach the office.\n    \"\"\"\n    # Calculate the probability that it does not rain during the time it takes to reach the office\n    no_rain_probability = (1 - probability) ** time\n\n    # Calculate the probability that it rains during the time it takes to reach the office\n    rain_probability = 1 - no_rain_probability\n\n    # Round the answer to 4 decimal places\n    return round(rain_probability, 4)\n\ndef main():\n    # Read the number of test cases\n    test_cases = int(input())\n\n    # Process each test case\n    for _ in range(test_cases):\n        # Read the probability of rain and time\n        probability, time = map(float, input().split())\n\n        # Calculate and print the probability that it rains during the time it takes to reach the office\n        print(calculate_probability(probability, time))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability_of_rain():\n    for _ in range(int(input())):\n        probability_of_rain = float(input().split()[0])\n        time_in_minutes = int(input().split()[1])\n        probability_of_rain_during_time = 1 - (1 - probability_of_rain) ** (time_in_minutes // 1440)\n        print(f\"{probability_of_rain_during_time:.4f}\")\n\ncalculate_probability_of_rain()", "import math\n\ndef calculate_probability_of_rain(rain_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n    rain_probability (float): The probability of rain today.\n    travel_time (int): The time it takes for Raj to reach his office.\n\n    Returns:\n    float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the probability that it does not rain\n    no_rain_probability = 1 - rain_probability\n    \n    # Calculate the probability that it rains during the entire travel time\n    # This can be represented as the probability of rain times the remaining time\n    # divided by the probability of no rain times the total travel time\n    # This is based on the concept of the geometric distribution\n    probability_of_rain = (rain_probability * (travel_time / 1440)) / (no_rain_probability * (travel_time / 1440))\n    \n    # Return the probability, rounded to 4 decimal places\n    return round(probability_of_rain, 4)\n\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Process each test case\nfor _ in range(test_cases):\n    # Read the probability of rain and travel time\n    rain_probability, travel_time = map(float, input().split())\n    \n    # Calculate and print the probability of rain during the travel time\n    print(calculate_probability_of_rain(rain_probability, travel_time))", "import math\n\nT = int(input())\nfor _ in range(T):\n    P, time = map(float, input().split())\n    probability = 1 - (1 - P) ** (time // 1440)\n    print(\"{:.4f}\".format(probability))", "import math\n\ndef calculate_probability(rainfall_prob, travel_time):\n    \"\"\"\n    Calculate the probability of rainfall during a meeting.\n\n    Args:\n    rainfall_prob (float): Probability of rainfall today (0 to 0.5).\n    travel_time (int): Time taken to reach the office in minutes.\n\n    Returns:\n    float: Probability of rainfall during the meeting.\n    \"\"\"\n    # Calculate the probability of no rainfall during the travel time\n    no_rainfall_prob = (1 - rainfall_prob) ** travel_time\n    \n    # Calculate the probability of rainfall during the meeting\n    rainfall_prob_meeting = 1 - no_rainfall_prob\n    \n    # Round the result to 4 decimal places\n    result = round(rainfall_prob_meeting, 4)\n    \n    return result\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Process each test case\nfor _ in range(test_cases):\n    # Read the input values\n    rainfall_prob, travel_time = map(float, input().split())\n    \n    # Calculate and print the result\n    result = calculate_probability(rainfall_prob, travel_time)\n    print(result)", "import math\n\ndef calculate_probability(time, probability):\n    \"\"\"\n    Calculate the probability of rainfall during a given time frame.\n\n    Args:\n    time (int): The time in minutes.\n    probability (float): The probability of rainfall today.\n\n    Returns:\n    float: The probability of rainfall during the given time frame.\n    \"\"\"\n    # Since the probability of rainfall today is given, we can use it directly.\n    # However, we need to find the probability of rainfall within the given time frame.\n    # This can be done by multiplying the probability of rainfall today with the fraction of the day that the given time frame covers.\n    # Since the problem states that time is a perfect divisor of 1440, we can calculate the fraction of the day covered by the given time frame.\n    fraction_of_day = time / 1440\n    # Now, we can calculate the probability of rainfall during the given time frame.\n    # We can use the formula for the probability of an event occurring within a given time frame, which is the probability of the event occurring multiplied by the fraction of the day covered by the given time frame.\n    probability_within_time_frame = probability * fraction_of_day\n    # Finally, we round the result to 4 decimal places.\n    return round(probability_within_time_frame, 4)\n\ndef main():\n    \"\"\"\n    Read the number of test cases and solve each test case.\n    \"\"\"\n    # Read the number of test cases.\n    num_test_cases = int(input())\n    # Read each test case and solve it.\n    for _ in range(num_test_cases):\n        # Read the probability of rainfall today and the time.\n        probability, time = map(float, input().split())\n        # Calculate and print the probability of rainfall during the given time frame.\n        print(calculate_probability(time, probability))\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability(probability, time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n        probability (float): The probability of rain today.\n        time (int): The time it will take for Raj to reach his office in minutes.\n\n    Returns:\n        float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the probability that it rains during the time Raj is on the way\n    # This is equivalent to the probability of rain today times the fraction of the day that Raj is on the way\n    # Since Raj is on the way for 1/12 of the day, we multiply the probability of rain today by 1/12\n    return probability * (1 / 12)\n\ndef main():\n    \"\"\"\n    Main function to read input and calculate the probability.\n    \"\"\"\n    MOD = 10 ** 9 + 7\n    T = int(input())\n    for _ in range(T):\n        probability, time = map(float, input().split())\n        # Calculate the probability that it rains during the time Raj is on the way\n        probability_rain = calculate_probability(probability, time)\n        # Round the result to 4 decimal places\n        probability_rain = round(probability_rain, 4)\n        # Print the result\n        print(f\"{probability_rain:.4f}\")\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on his way to the office.\n\n    Args:\n        test_cases (int): The number of test cases.\n\n    Returns:\n        list: A list of probabilities for each test case.\n    \"\"\"\n    probabilities = []\n    for _ in range(test_cases):\n        probability, time = map(float, input().split())\n        # Calculate the probability that it does not rain during the time\n        no_rain_probability = (1 - probability) ** (time // 1440)\n        # Calculate the probability that it rains during the time\n        rain_probability = 1 - no_rain_probability\n        probabilities.append(round(rain_probability, 4))\n    return probabilities\n\ndef main():\n    test_cases = int(input())\n    probabilities = calculate_rainfall_probability(test_cases)\n    for probability in probabilities:\n        print(probability)\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n\n    Args:\n    rainfall_probability (float): The probability that it will rain today.\n    travel_time (int): The time it will take for Raj to reach his office.\n\n    Returns:\n    float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the probability that it does not rain during the travel time\n    no_rain_probability = (1 - rainfall_probability) ** (travel_time // 1440)\n\n    # Calculate the probability that it rains during the travel time\n    rain_probability = 1 - no_rain_probability\n\n    # Return the result rounded to 4 decimal places\n    return round(rain_probability, 4)\n\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Process each test case\nfor _ in range(test_cases):\n    # Read the probability of rainfall and travel time\n    rainfall_probability, travel_time = map(float, input().split())\n\n    # Calculate and print the probability that it rains during the travel time\n    print(calculate_probability(rainfall_probability, travel_time))", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the rainfall probability for each test case.\n\n    Args:\n    test_cases (int): Number of test cases.\n\n    Returns:\n    list: List of rainfall probabilities for each test case.\n    \"\"\"\n    results = []\n    for _ in range(test_cases):\n        # Read input values\n        p, time = map(float, input().split())\n\n        # Calculate rainfall probability\n        rainfall_probability = 1 - (1 - p) ** (1440 // time)\n\n        # Round the result to 4 decimal places\n        rainfall_probability = round(rainfall_probability, 4)\n\n        results.append(str(rainfall_probability))\n\n    return results\n\ndef main():\n    # Read number of test cases\n    test_cases = int(input())\n\n    # Calculate rainfall probabilities for each test case\n    results = calculate_rainfall_probability(test_cases)\n\n    # Print results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "import math\n\nMOD = 10 ** 9 + 7\n\ndef calculate_probability():\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n    \n    Returns:\n    float: The probability of rain during the specified time.\n    \"\"\"\n    T = int(input())\n    for _ in range(T):\n        P, time = map(float, input().split())\n        # Calculate the probability that it does not rain during the time\n        no_rain_probability = (1 - P) ** time\n        # Calculate the probability that it rains during the time\n        rain_probability = 1 - no_rain_probability\n        print(f\"{rain_probability:.4f}\")\n\ncalculate_probability()", "import math\n\nT = int(input())\nfor _ in range(T):\n    P = float(input().split()[0])\n    time = int(input().split()[1])\n\n    # Calculate the probability that it does not rain during the time\n    prob_not_rain = (1 - P) ** (time // 1440)\n\n    # Calculate the final probability\n    final_prob = 1 - prob_not_rain\n\n    # Round the final probability to 4 decimal places\n    final_prob = round(final_prob, 4)\n\n    print(final_prob)", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    \"\"\"\n    Calculate the probability of rainfall during Raj's commute.\n\n    Args:\n        test_cases (int): Number of test cases.\n\n    Returns:\n        list: A list of probabilities for each test case.\n    \"\"\"\n    probabilities = []\n    for _ in range(test_cases):\n        probability, time = map(float, input().split())\n        # Calculate the probability using the formula: P(t) = P * (1 - P) * (1 + t/P +... + (t/P)^(P-1))\n        # where P is the probability of rain, t is the time, and the formula is based on the binomial distribution\n        if probability == 0:\n            probability_rain = 0\n        else:\n            probability_rain = (probability ** (time / probability)) * (1 - probability ** (time / probability))\n        probabilities.append(round(probability_rain, 4))\n    return probabilities\n\ndef main():\n    test_cases = int(input())\n    probabilities = calculate_rainfall_probability(test_cases)\n    for probability in probabilities:\n        print(probability)\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability():\n    T = int(input())\n    for _ in range(T):\n        P, time = map(float, input().split())\n        probability = 1 - (1 - P) ** (1440 // time)\n        print(f\"{probability:.4f}\")\n\ncalculate_probability()", "import math\n\ndef calculate_probability():\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way to his office.\n    \"\"\"\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Iterate over each test case\n    for _ in range(num_test_cases):\n        # Read the probability of rain and time\n        probability, time = map(float, input().split())\n\n        # Calculate the probability that it does not rain during the time\n        no_rain_probability = (1 - probability) ** time\n\n        # Calculate the final probability\n        final_probability = probability * (1 - no_rain_probability)\n\n        # Round the final probability to 4 decimal places\n        final_probability = round(final_probability, 4)\n\n        # Print the final probability\n        print(final_probability)\n\n# Call the function to start the program\ncalculate_probability()", "import math\n\nT = int(input())\n\nfor _ in range(T):\n    P, time = map(float, input().split())\n\n    # Calculate the time it takes to walk to the office\n    # Assuming the office is 1440 minutes away\n    total_time = 1440\n\n    # Calculate the probability that it will rain during the time it takes to walk to the office\n    probability = P * (1 - P) * (total_time / time)\n\n    # Round the answer to 4 decimal places\n    probability = round(probability, 4)\n\n    print(probability)", "import math\n\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time of travel.\n\n    Args:\n        rainfall_probability (float): The probability of rain.\n        travel_time (int): The time it takes to travel.\n\n    Returns:\n        float: The probability that it rains during the time of travel.\n    \"\"\"\n    # Calculate the number of 2-minute intervals\n    num_intervals = travel_time // 2\n\n    # Calculate the probability that it rains during the time of travel\n    # using the binomial distribution formula\n    probability = math.comb(num_intervals, 1) * (rainfall_probability ** 1) * ((1 - rainfall_probability) ** (num_intervals - 1))\n\n    return round(probability, 4)\n\ndef main():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Process each test case\n    for _ in range(num_test_cases):\n        # Read the rainfall probability and travel time\n        rainfall_probability, travel_time = map(float, input().split())\n\n        # Calculate and print the result\n        result = calculate_probability(rainfall_probability, travel_time)\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability_of_rainfall(time, probability):\n    \"\"\"\n    Calculate the probability of rainfall during a given time.\n\n    Args:\n    time (int): Time in minutes.\n    probability (float): Probability of rainfall today.\n\n    Returns:\n    float: Probability of rainfall during the given time.\n    \"\"\"\n    # Calculate the probability of no rainfall during the given time\n    no_rain_probability = (1 - probability) ** (time // 1440)\n    # Calculate the probability of rainfall during the given time\n    rain_probability = 1 - no_rain_probability\n    return round(rain_probability, 4)\n\n\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Process each test case\nfor _ in range(num_test_cases):\n    # Read the probability of rainfall and time\n    probability, time = map(float, input().split())\n    # Calculate and print the probability of rainfall during the given time\n    print(calculate_probability_of_rainfall(time, probability))", "import math\n\ndef calculate_probability():\n    # Read the number of test cases\n    num_test_cases = int(input())\n\n    # Iterate over each test case\n    for _ in range(num_test_cases):\n        # Read the probability and time\n        probability, time = map(float, input().split())\n\n        # Calculate the probability that it will rain during the time\n        # This is equivalent to 1 - (probability of no rain)^(time/1440)\n        # where 1440 is the total number of minutes in a day\n        if time == 1440:\n            probability_of_no_rain = 1\n        else:\n            probability_of_no_rain = (1 - probability) ** (time / 1440)\n\n        # Calculate the probability that it will rain during the time\n        probability_rain = 1 - probability_of_no_rain\n\n        # Round the result to 4 decimal places\n        probability_rain = round(probability_rain, 4)\n\n        # Print the result\n        print(probability_rain)\n\n# Call the function\ncalculate_probability()", "import math\n\ndef calculate_probability(p, time):\n    \"\"\"\n    Calculate the probability that it rains during the time it takes for Raj to reach his office.\n\n    Args:\n    p (float): The probability of rain today.\n    time (int): The time (in minutes) it takes for Raj to reach his office.\n\n    Returns:\n    float: The probability that it rains during the time it takes for Raj to reach his office.\n    \"\"\"\n    # Calculate the area under the uniform distribution curve\n    # This is done using the formula (p * time) + ((1-p) * (1440 - time))\n    area = (p * time) + ((1-p) * (1440 - time))\n\n    # Calculate the total area under the curve\n    total_area = 1440\n\n    # Return the ratio of the area to the total area\n    return area / total_area\n\n\ndef main():\n    \"\"\"\n    Read the number of test cases, and then calculate the probability for each test case.\n    \"\"\"\n    # Read the number of test cases\n    t = int(input())\n\n    # Iterate over each test case\n    for _ in range(t):\n        # Read the probability and time\n        p, time = map(float, input().split())\n\n        # Calculate the probability\n        probability = calculate_probability(p, time)\n\n        # Print the probability, rounded to 4 decimal places\n        print(\"{:.4f}\".format(probability))\n\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability_of_rainfall():\n    MOD = 10 ** 9 + 7\n    T = int(input())\n    for _ in range(T):\n        P, time = map(float, input().split())\n        D = (1 + P) * (1 - P) * (1 - P) * (1 - P) * (1 - P) * (1 - P)\n        R = 1\n        while time > 0:\n            if time % 2 == 1:\n                R = R * D % MOD\n            D = D * D % MOD\n            time //= 2\n        print(round(R, 4))\n\nif __name__ == \"__main__\":\n    calculate_probability_of_rainfall()", "import math\n\ndef calculate_rain_probability():\n    MOD = 10 ** 9 + 7\n    T = int(input())\n    for _ in range(T):\n        P, time = map(float, input().split())\n        D = 1440 / time\n        R = 1\n        while time > 0:\n            if time % 2:\n                R = R * D % MOD\n            D = D * D % MOD\n            time //= 2\n        probability = (R + (1 - R) * P) % MOD\n        print('{:.4f}'.format(probability / MOD))\n\ncalculate_rain_probability()", "import math\n\nT = int(input())\n\nfor _ in range(T):\n    P, t = map(float, input().split())\n    t /= 1440  # convert minutes to fraction of day\n    print(format((1 - P) * (1 - (1 - P)**t), '.4f'))", "import math\n\nT = int(input())\n\nfor _ in range(T):\n    P, time = map(float, input().split())\n\n    # Calculate the probability of no rain\n    prob_no_rain = (1 - P) ** (time // 1440)\n\n    # Calculate the probability of rain\n    prob_rain = 1 - prob_no_rain\n\n    # Round the result to 4 decimal places\n    result = round(prob_rain, 4)\n\n    print(result)", "import math\n\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the travel time.\n\n    Args:\n        rainfall_probability (float): The probability of rainfall.\n        travel_time (int): The time taken to reach the office in minutes.\n\n    Returns:\n        float: The probability of rainfall during travel.\n    \"\"\"\n    return (1 - (1 - rainfall_probability) ** (travel_time // 24)) ** 24\n\n# Get the number of test cases\nnum_test_cases = int(input())\n\n# Process each test case\nfor _ in range(num_test_cases):\n    # Get the rainfall probability and travel time\n    rainfall_probability, travel_time = map(float, input().split())\n\n    # Calculate the probability of rainfall during travel\n    probability = calculate_probability(rainfall_probability, travel_time)\n\n    # Round the answer to 4 decimal places\n    probability = round(probability, 4)\n\n    # Print the result\n    print(probability)", "import math\n\ndef calculate_rainfall_probability(test_cases):\n    for _ in range(test_cases):\n        p, time = map(float, input().split())\n        if p == 0:\n            print(0.0000)\n        else:\n            # Calculate the probability of no rain during the entire journey\n            prob_no_rain = (1 - p) ** time\n            # Calculate the probability of rain during the journey\n            prob_rain = 1 - prob_no_rain\n            # Round the result to 4 decimal places\n            print(round(prob_rain, 4))\n\ndef main():\n    test_cases = int(input())\n    calculate_rainfall_probability(test_cases)\n\nif __name__ == \"__main__\":\n    main()", "import math\n\ndef calculate_probability(rainfall_probability, travel_time):\n    \"\"\"\n    Calculate the probability that it rains during the time Raj is on the way.\n\n    Args:\n    rainfall_probability (float): The probability that it will rain today.\n    travel_time (int): The time it will take for Raj to reach his office.\n\n    Returns:\n    float: The probability that it rains during the time Raj is on the way.\n    \"\"\"\n    # Calculate the probability that it does not rain\n    no_rain_probability = 1 - rainfall_probability\n\n    # Calculate the probability that it rains during the travel time\n    rain_probability = (1 - math.pow(no_rain_probability, travel_time))\n\n    return round(rain_probability, 4)\n\n# Read the number of test cases\ntest_cases = int(input())\n\n# Process each test case\nfor _ in range(test_cases):\n    # Read the rainfall probability and travel time\n    rainfall_probability, travel_time = map(float, input().split())\n\n    # Calculate and print the result\n    print(calculate_probability(rainfall_probability, travel_time))"]}]