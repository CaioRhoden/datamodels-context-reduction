id,input
287,"Kevinsogo is a professor of mathematics, One day he gave an assignment to his students which was hard for them. The students want you to help them in solving the problem.

Given the value of $N$, 

$x=\text{rand()}\bmod N$ 

$Y=\sqrt{x+\sqrt{x+\sqrt{x+\sqrt{x+\cdots}}}}$

Note that $\text{rand}()$ returns an integer between ${0}$ and $10^{100}$ (inclusive) uniformly at random.

Find out the expected value of ${Y}$.

Input Format 

The first line contains an integer ${T}$ i.e. the number of test cases.

The next ${T}$ lines will each contain an integer $N$.

Output Format 

Print the output corresponding to each test case in a separate line. The answer will be considered correct if its absolute error doesn't exceed $10^{-3}$ or ${0.001}$.  

Constraints 

Task 1: 30 points 

$1\leq T\leq10000$ 

$1\leq N\leq5\times10^6$  

Task 2: 10 additional points 

$1\leq T\leq1000$ 

$1\leq N\leq10^{16}$  

Sample Input

3
1
5
10

Sample Output

0.0
1.69647248786
2.43798952788
"
2545,"It's the rainy season again, and the city experiences frequent showers throughout the day.

The weather report says that there is a P probability of rainfalls today. Raj has to step out for a meeting at the office, and would like to know the probability that it rains during the time he is on the way.

Input:

The first line of input contains the number of test cases, T. Each of the following T lines contain two numbers, P and time. P denotes the probability that it will rain today and time is the time (in minutes), it will take for Raj to reach his office.

Output:

Output should have T lines each containing answer to corresponding test case. Please round the answer to 4 decimal places.

Constraints:

1 ≤ T ≤ 100
0 ≤ P ≤ 0.5
10 ≤ time ≤ 720
time is a perfect divisor of 1440.

SAMPLE INPUT
2
0 10
.5 720

SAMPLE OUTPUT
0.0000
0.2929
"
2966,"n passengers board an airplane with exactly n seats. The first passenger has lost the ticket and picks a seat randomly. But after that, the rest of passengers will:

Take their own seat if it is still available, 
Pick other seats randomly when they find their seat occupied 

What is the probability that the n-th person can get his own seat?
 
Example 1:
Input: n = 1
Output: 1.00000
Explanation: The first person can only get the first seat.
Example 2:
Input: n = 2
Output: 0.50000
Explanation: The second person has a probability of 0.5 to get the second seat (when first person gets the first seat).

 
Constraints:

1 <= n <= 10^5
class Solution:
    def nthPersonGetsNthSeat(self, n: int) -> float:
        "
3131,"James has a tree with $n$ nodes $n-1$ edges where the $i^{{th}}$ edge has a length, $w_i$. He wants to play a game involving $n$ moves. During each move, he performs the following steps:

Randomly chooses some node $x_i$ from the tree. Each node has an equal probability of being chosen.
Calculates the distance from node $x_i$ to each node reachable from $x_i$ using one or more edges.
Deletes node $x_i$.

For example, the diagram below shows what happens when we choose a random node and delete it from the tree:

After $n$ moves, the tree is empty and the game ends.

James defines the magic number, $m$, as the sum of all numbers calculated in step $2$ of each move. Let $E_{m}$ be the expected value of $m$.

Give the tree's edges and their respective lengths, calculate and the print the value of $(E_m\times n!)\ \text{mod}\ (10^9+9)$. It is guaranteed that $E_m\times n!$ is an integer.

Note

Due to a bug in the system, you might see accepted verdict in this problem even if you don't pass all the test cases. Please ignore that verdict, only the score you get is important in the ranklist.

Input Format

The first line contains an integer, $n$, denoting the number of nodes. 

Each of the $n-1$ subsequent lines contains three space-separated integers describing the respective values of $u_i$, $v_i$, and $w_i$, meaning that there is an edge of length $w_i$ connecting nodes $u_i$ and $v_i$.  

Constraints

$1\leq n\leq5000$
$1\leq u_i,v_i\leq n$
$1\leq w_i\leq10^9$

Subtasks

For $30\%$ of the max score $n\leq10$
For ${60\%}$ of the max score $n\leq400$

Output Format

Print a single integer denoting the value of $(E_m\times n!)\ \text{mod}\ (10^9+9)$.

Sample Input
3
2 1 2
3 2 3

Sample Output
50

Explanation

Let $d(u,v)$ be the distance between node ${u}$ and node ${v}$. Here are the ${6}$ different variants:

$(x_1,x_2,x_3)=(1,2,3)$

$(x_1,x_2,x_3)=(2,1,3)$

$(x_1,x_2,x_3)=(1,3,2)$. $m=7+3+0=10$

$(x_1,x_2,x_3)=(2,3,1)$. $m=0+5+0=5$
$(x_1,x_2,x_3)=(3,1,2)$. $m=2+0+8=10$
$(x_1,x_2,x_3)=(3,2,1)$. $m=0+2+8=10$

The expected value of the magic number is $E_m=\frac{50}{6}$. We then print the value of $(E_m\times n!)\ \text{mod}\ (10^9+9)=(\frac{50}{6}\times3!)\ \text{mod}\ (10^9+9)=50$.
"
3630,"It is Friday the 13th today, and even though you're a modern well-educated person, you can't help feeling a bit nervous about it. You decide to look for evidence against this superstition (or for it). As a first step, you recall all Fridays the 13th in your life and calculate how many of them were unusually bad — like that time when you decided to play a game on ZX Spectrum and ended up breaking your TV set. The problem is, you can't remember some Fridays, and you're not sure why — were they really that bad?

You have assembled a sequence of your recollections. Character ""0"" stands for a normal day, ""1"" — for a nasty one, and ""?"" means you have no idea what kind of day that was. Being a programmer, you decide to approximate these unknown days with independent random variables, which take value 1 with probability p, and 0 with probability (1 - p).

Given a string of your memories and the value of p, calculate out the expected value of average badness of your Fridays the 13th.

Input

The first line of the input contains a string s which represents your Fridays; s will contain between 1 and 50 characters, inclusive. Each character of s will be ""0"", ""1"" or ""?"".

The second line of the input contains a double p (0 ≤ p ≤ 1). Double p is given with at most 2 digits after the decimal point.

Output

Output the expected value of average badness of your Fridays with exactly 5 decimal places. Please, use standard mathematical rules when you are rounding an answer.

Examples

Input

?111?1??1
1.0


Output

1.00000


Input

01?10??10000
0.5


Output

0.37500

Note

In the first case, you're doomed. DOOMED! Sorry, just had to say that.
"
7533,"The expected value is the weighted average of all possible outcomes of an experiment, weighted with the probabilities of each particular outcome. For a random variable ${X}$, the expected value is written as $E[X]$.  

Intuitively, the expected value is the long run average value of repetitions of the experiment.  

The variance is the expected value of the outcome's squared deviation from its expected value. For a random variable ${X}$, the variance is written as ${Var}[X]$ and is defined as the expected value of $(X-E[X])^2$.  

Intuitively, the variance is a measure of how far the outcomes of an experiment are spread out. The higher the variance, the more spread out the outcomes.  

Let's say we perform the following experiment involving throwing a die:  

Throw the die, and record the outcome as d[1].  

For i from 2 to N:
    Repeatedly throw the die until the outcome is different from d[i-1].
    Record the outcome as d[i].  

Output d[1] + d[2] + ... + d[N].

The die used in this experiment is a standard 6-sided die with outcomes $1,2,\ldots,6$. However, it is biased. In each throw, the probability of ${i}$ appearing is $p_i$ for $i=1,2,\ldots6$.  

Find the expected value and variance of the outcome of this experiment.  

Note: Certain formulas for variance are not fit for computation because of loss of significance/numerical instability. This link contains a discussion about how to avoid/mitigate this problem.

Input Format

The first six lines contain the probabilities of the die's outcomes. Specifically, the ${i}$th line contains $p_i$, for $i=1,2,\ldots6$. 

The seventh (and final) line contains $N$, the number of times the die is thrown.  

Constraints 

$0.1\leq p_i\leq0.2$ 

$p_1+p_2+\ldots+p_6=1$  

For test cases worth $25\%$ of the total points: $1\leq N\leq8$ 

For test cases worth $25\%$ of the total points: $1\leq N\leq3000$ 

For test cases worth $50\%$ of the total points: $1\leq N\leq100000$  

Output Format

The first line of output contains the expected value. 

The second line contains the variance. 

The answer will be accepted if it is within an absolute error of ${10^{-5}}$ of the true answer.  

Sample Input
0.16666666667
0.16666666666
0.16666666667
0.16666666667
0.16666666666
0.16666666667
2

Sample Output
7.0
4.66666666666

Explanation

One can verify these results by writing code that performs the experiment, running it multiple times, and computing the expected value and variance from the outcomes. The more times the experiment is run, the more accurate the answer will be.
"
8083,"We sampled integers between 0 and 255, and stored the results in an array count:  count[k] is the number of integers we sampled equal to k.
Return the minimum, maximum, mean, median, and mode of the sample respectively, as an array of floating point numbers.  The mode is guaranteed to be unique.
(Recall that the median of a sample is:

The middle element, if the elements of the sample were sorted and the number of elements is odd;
The average of the middle two elements, if the elements of the sample were sorted and the number of elements is even.)

 
Example 1:
Input: count = [0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
Output: [1.00000,3.00000,2.37500,2.50000,3.00000]
Example 2:
Input: count = [0,4,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
Output: [1.00000,4.00000,2.18182,2.00000,1.00000]

 
Constraints:

count.length == 256
1 <= sum(count) <= 10^9
The mode of the sample that count represents is unique.
Answers within 10^-5 of the true value will be accepted as correct.
class Solution:
    def sampleStats(self, count: List[int]) -> List[float]:
        "
8583,"Ted has a random problem. This morning, he took two arrays consisting of permutations of the first N natural numbers and concatenated them together into a single array. But during his lunch break, his co-worker, Calvin, shuffled the numbers around!

To make matters worse, the numbers in the second of the two original permutations have grown into bigger numbers now. Each of them have increased by N. Afraid to look at what has become of his array, Ted first wants to know how many inversions he should expect in his array.

Luckily, Calvin is quite kind, and so he has given you a tip. He tells you the values of the permutation before some numbers have grown, but he doesn't tell you which permutation each number was original from.

Since Ted doesn't like real numbers with a lot of digits after the decimal point, he wants you to multiply the answer by 2^N before printing it out. Ted understands that you might have difficulty dealing with such a large number now, so you should print it modulo 10^9+7.

Input: 
The first line of input will have N. 
The second line of input will have 2N numbers, the permuted permutations before the numbers grew. It is guaranteed that each number from 1 to N appears exactly twice.

Output: 
Output one integer, the expected number of inversions times 2^N modulo 10^9+7.

Constraints: 
1 ≤ N ≤ 10^5 
For 40% of the test cases, 1 ≤ N ≤ 15.

SAMPLE INPUT
2
1 2 1 2

SAMPLE OUTPUT
10

Explanation

The permutation when Ted looks at it could be any of the following 4: 
1 2 3 4 (0 inversions) 
1 4 3 2 (3 inversions) 
3 2 1 4 (3 inversions) 
3 4 1 2 (4 inversions) 
Ted can expect an average of 2.5 inversions. Multiplied by 2^2 = 4 and taken modulo 10^9+7, the final output should be 10.
"
10495,"Recently in a class of Computer Networks, little Roy learned to calculate Hamming Distance between two strings of equal length.

During practical session, Roy's teacher gave him a string of length L with all distinct characters. Teacher asked him to find the number of permutations of the string such that the hamming distance between the original string and permuted string is maximum.

Roy seeks your help to answer the question.

Input:

First line of input will contain integer L, length of given string.

Second line of input will contain a string of length L.

Output:

Print in a single line the number of such permutations.

Since the answer can be very large output it modulo 1000000007

Constraints:

1 ≤  L ≤ 94

String is made of characters whose [ASCII value][2] fall within the range [33,126]

SAMPLE INPUT
3
#$%

SAMPLE OUTPUT
2

Explanation

Possible permutations of #$% are:

[1] #$% 
[2] #%$ 
[3] $#% 
[4] $%# 
[5] %#$ 
[6] %$#   

Out of these [4] and [5] result in maximum hamming distance. Hence the output is 2.
"
10707,"We have a list of points on the plane.  Find the K closest points to the origin (0, 0).
(Here, the distance between two points on a plane is the Euclidean distance.)
You may return the answer in any order.  The answer is guaranteed to be unique (except for the order that it is in.)
 

Example 1:
Input: points = [[1,3],[-2,2]], K = 1
Output: [[-2,2]]
Explanation: 
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
We only want the closest K = 1 points from the origin, so the answer is just [[-2,2]].


Example 2:
Input: points = [[3,3],[5,-1],[-2,4]], K = 2
Output: [[3,3],[-2,4]]
(The answer [[-2,4],[3,3]] would also be accepted.)

 
Note:

1 <= K <= points.length <= 10000
-10000 < points[i][0] < 10000
-10000 < points[i][1] < 10000
class Solution:
    def kClosest(self, points: List[List[int]], K: int) -> List[List[int]]:
        "
11762,"Given a string, you keep swapping any two characters in the string randomly till the string becomes a palindrome. What is the expected number of swaps you will make? There will always be at least one palindrome which can be formed with the letters of the given string.

Input: 

The first line contains the number of test cases T. Each of the next T lines contains a string each.

Output: 

Output T lines containing the answer for the corresponding test case. Print the answer correct to 4 decimal places.

Constraints: 

T <= 10000 

The length of the string will be at most 8 characters. 

The string will consist of only lower-case letters 'a'-'z'.

Sample Input:  

4  
b  
bb  
abb  
cbaabbb

Sample Output:  

0.0000  
0.0000  
3.0000  
59.3380

Explanation:

For the first two cases, the string is already a palindrome so no swaps are needed.

For the third case, there are 3 possible swaps. The string will become ""bab"",""bba"" or remain ""abb"" with 1/3rd probability each. It's easy to see that the expected number of swaps needed is 3.0000

For the last case, the answer is 59.337962..., which should be printed as 59.3380
"
12037,"You are given a fair coin and two integers X and N.

You repeatedly flip the coin and perform the following operation based on the result:
If it lands on heads, then X will increase by 1. However, if X = N then X will not change.
If it lands on tails, X will decrease by 1.

You stop as soon as the value of X becomes 1.

Find the expected number of coin flips.

Note that it is guaranteed that under the given constraints, the answer is an integer and does not exceed 2 \cdot 10^{18}

------ Input Format ------ 

- The first line contains a single integer T — the number of test cases. Then the test cases follow.
- The first and only line of each test case contains two space separated integers X and N.

------ Output Format ------ 

For each testcase, output the expected number of coin flips.

------ Constraints ------ 

$1 ≤ T ≤ 10^{5}$
$1 ≤ X ≤ N ≤ 10^{9}$

----- Sample Input 1 ------ 
4
1 3
2 2
12 12
568 57800
----- Sample Output 1 ------ 
0
2
132
65223144

----- explanation 1 ------ 
In the first test case, $X$ is already $1$. So, the expected number of coin flip in this case is $0$.

In the second test case, if the coin lands on head, $X$ will not change because $X$ is equal to $N$ here. Whenever the coin lands on tail, $X$ will decrease by $1$ and the game ends as $X$ becomes $1$. The expected number of coin flips to get the first tail is $2$. So, the answer for the case is $2$.
"
12872,"A recent lab accident resulted in the creation of an extremely dangerous virus that replicates so rapidly it's hard to predict exactly how many cells it will contain after a given period of time. However, a lab technician made the following observations about its growth per millisecond:

The probability of the number of virus cells growing by a factor of ${a}$ is $0.5$.
The probability of the number of virus cells growing by a factor of ${b}$ is $0.5$. 

Given ${a}$, ${b}$, and knowing that initially there is only a single cell of virus, calculate the expected number of virus cells after $\boldsymbol{\boldsymbol{t}}$ milliseconds. As this number can be very large, print your answer modulo $(10^9+7)$.

Input Format

A single line of three space-separated integers denoting the respective values of ${a}$ (the first growth factor), ${b}$ (the second growth factor), and ${t}}$ (the time you want to know the expected number of cells for).

Constraints

$1\leq t\leq10^{18}$  
$1\leq a,b\leq100$  
it is guaranteed that expected value is integer

Output Format

Print the expected number of virus cells after $\boldsymbol{\boldsymbol{t}}$ milliseconds modulo $(10^9+7)$.

Sample Input
2 4 1

Sample Output
3

Explanation

Initially, the virus has one cell. After a millisecond, with probability $0.5$, its size is doubled and, with probability of the other $0.5$ in the sample space, its size grows by ${4}$ times. Thus, the expected number of virus cell after ${1}$ millisecond is $0.5\cdot2\cdot1+0.5\cdot4\cdot1=3\%\ (10^9+7)=3$. Thus, we print $3$ on a new line.
"
14892,"Logan is cleaning his apartment. In particular, he must sort his old favorite sequence, ${P}$, of $N$ positive integers in nondecreasing order. He's tired from a long day, so he invented an easy way (in his opinion) to do this job. His algorithm can be described by the following pseudocode:

while isNotSorted(P) do {   
    WaitOneMinute();
    RandomShuffle(P)
}

Can you determine the expected number of minutes that Logan will spend waiting for ${P}$ to be sorted?

Input Format

The first line contains a single integer, $N$, denoting the size of permutation ${P}$. 

The second line contains $N$ space-separated integers describing the respective elements in the sequence's current order, $P_0,P_1,\ldots,P_{N-1}$.

Constraints

$2\leq N\leq18$
$1\leq P_i\leq100$

Output Format

Print the expected number of minutes Logan must wait for ${P}$ to be sorted, correct to  ${6}$ decimal places.

Sample Input
2
5 2

Sample Output
2.000000

Explanation

There are two permutations possible after a random shuffle, and each of them has probability $0.5$. The probability to get the sequence sorted after the first minute is $0.5$. The probability that ${P}$ will be sorted after the second minute is ${0.25}$, the probability ${P}$ will be sorted after the third minute is ${0.125}$, and so on. So, the answer is equal to the following sum: $\sum_{i=1}^{\infty}i\times2^{-i}=2$
"
16260,"After playing the game of stones and board chandu decide to put all the games in the boxes and sleep. But, he is afraid that you will go to market without taking him along with you. So, he decide to indulge you in a task.

Clever chandu has N boxes, N keys and N locks (1 key corresponding to each lock). He put all locks on all the boxes. Shuffled all the keys that are with him and slipped them into the box(Those were piggy bank like boxes).

Now, obviously, No one will be able to any of his box not even him without keys. But he has prepared a few bombs which can be used to break the locks. One bomb can be used to break exactly one lock. He asks you what is the probability that he will be able to open all boxes if he has M bombs.

Input: 

First line of input contains t which is the number of test cases. Each test case contains exactly one line having 2 integers N and M.

Output:

Print the probability that he will be able to open all boxes in a/b format. Note that a/b is in minimal fraction form.

Constraints:

1 ≤ N ≤ 20, 

1 ≤ M ≤ N

SAMPLE INPUT
3
2 1
2 2
3 1

SAMPLE OUTPUT
1/2
1/1
1/3

Explanation

Test case 1: When box 1 contains key 2, you can get all the keys 
Test case 2: When N=M, you can always get all the keys 
Test case 3: There are 6 possible configurations of keys in boxes. Using 1 bomb, you can open all the boxes in 2 of them:
box 1 - key 2, box 2 - key 3, box 3 - key 1;
box 1 - key 3, box 2 - key 1, box 3 - key 2.
"
17293,"As usual Gary and Flo are sitting at their favourite burger restaurant called Jim's Burgers. They want to treat themselves with delicious burger after an interesting day with lots of competitive programming. So they have ordered their burgers and are waiting for them. But with nothing to do, they get bored and decide to play a game.

The game is played on a sheet of paper with $n$ rows and $m$ columns and goes as follows: 

Flo places his white lotus tile somewhere at the top row and Gary places a caterpillar tile somewhere on the bottom row. Flo begins the game and their turns alternate. Flo can move his tile to any of the 8 adjacent cells, while Gary's caterpillar tile can only move  left or right, or stay at the same cell. Of course, they cannot step outside of the grid. Flo's goal is to catch Gary as fast as possible, that is, with the minimum number of moves, while Gary (with the caterpillar tile) has to survive for as long as possible.  

Now they are wondering: If they place their tiles in the corresponding rows and some random columns, what is the expected number of moves Flo has to make to win the game (assuming they will play optimally)? 

Can you help them answer this question?

Constraints

$2\leq n,m\leq5000$

Input Format

You will be given two space separated integers $n$ and $m$, denoting the number of rows and the number of columns on the board respectively. 

Output Format

Output the answer in one line. 

Note: The answer will be considered valid if it differs from the correct answer by at most $\mathbf{10^{-6}}$.

Sample input

2 3

Sample output

1.2222222

Consider the pair $(x,y)$ as the starting column of the lotus and the starting column of the caterpillar respectively. 

For $n=2$ and $m=3$ we get the following scenario. 

$(1,1),(1,2),(2,1),(2,2),(2,3),(3,2),(3,3)$ will lead to 1 move. 
The remaining pairs $(1,3)$ and $(3,1)$ will lead to 2 moves. So the expected value  is $\frac{1+1+1+1+1+1+1+2+2}{9}=1.222..$
"
18957,"A competition is being held between two teams: A and B. Team A has N players numbered from 1 to N. Team B has M players numbered from 1 to M.

The competition requires certain number of matches to be played. In each match, one person from each of the teams goes against one another, until one of them is defeated. The loser is then replaced by another player from his/her team. The team that fails to replace its player (means all players have already lost), loses the competition and no more matches are held.

To be more clear, the players in each team line up to play in their order. That means the first match will be always between the player number 1 in team A and the player number 1 in team B. After the first match, if the player number 1 in team A loses, then he/she will be replaced by the player number 2 in his team, i.e, the second match will be between player number 2 in team A and player number 1 in team B (in case team A has more than one player). Otherwise, the second match will be between player number 1 in team A and player number 2 in team B (in case team B has more than one player). And the two teams keep competing based on that rule until one team has all its players lost.

Given the probability of a player beating another, can you find the expected number of matches that will be played?

Input:
The first line of input file contains T, the number of test cases.
Each test case starts with two space-separated integers, N and M, denoting the number of players on team A and team B, respectively.
Each of the next N lines contains M decimal numbers, separated by a single space. The j^th decimal number on i^th line denotes the probability that the player number i of team A shall defeat the player number j of team B. All the decimal numbers only contain up to 2 digits after the decimal point.

Output:
Output exactly T numbers, each denoting the expected number of matches to be held in scenario of the corresponding test case. Print the answer upto 6 digits after decimal point. As, Hacker-Earth uses exact matching, you should ensure to print exactly 6 places.

Constraints:
1 ≤ T ≤ 3
1 ≤ N, M ≤ 1000

SAMPLE INPUT
1
2 2
0.5 0.5
0.5 0.5

SAMPLE OUTPUT
2.500000

Explanation

Possibilities are as follows: 
- 1A def 1B, 1A def 2B: Probability is 0.5 * 0.5 = 0.25 and number of matches is 2.
- 1A def 1B, 2B def 1A, 2B def 2A: Probability is 0.5 * 0.5 * 0.5=0.125 and number of matches is 3
- 1A def 1B, 2B def 1A, 2A def 2B: Probability is 0.5 * 0.5 * 0.5=0.125 and number of matches is 3
- 1B def 1A, 1B def 2A: Probability is 0.5 * 0.5 = 0.25 and number of matches is 2.
- 1B def 1A, 2A def 1B, 2A def 2B: Probability is 0.5 * 0.5 * 0.5=0.125 and number of matches is 3
- 1B def 1A, 2A def 1B, 2B def 2A: Probability is 0.5 * 0.5 * 0.5=0.125 and number of matches is 3
Thus final answer is:

0.25 * 2 + 0.125 * 3 + 0.125 * 3 + 0.25 * 2 + 0.125 * 3 + 0.125 * 3 = 2.5
"
19196,"My flatmate, Sayan, went to the game show called Takeshi's castle. It is a game show in which you need to pass different game challenges to enter the final. Now the most famous round of all of them is the ""skipping stones"".In the game you need to go from one end of a small puddle to the other end of it stepping on stones.Some of the stones are fixed while others sink as soon as you step on them. Now Sayan managd to bribe the gaurd and gather the information regarding each of the stones in the puddle. So he now knows the probability p of each stone staying stationary, i.e, the probability of stepping on a stone and not sinking is p.

Now, as common sense suggests, Sayan can cross the puddle only if he steps on stationary stones only. But Sayan, being a human being, has a fixed span of distance(L) which he can jump at once.You need to find out and inform Sayan the best probability of him crossing the puddle without sinking.

Note: He can jump from one stone to another only if it is within L metres of distance.

INPUT

The first line of input contains three numbers n, L and D , the number of stones in the puddle, the span of Sayan's jump, and length of the puddle respectively.
The next line contains n space separated floating point numbers, with ith number denoting the probability p of the ith stone being stationary.(1 ≤ i ≤ n).
The next line contains the distance d of the stones from the starting point in serial order, i.e, from 1 to n.

OUTPUT

Print one floating point number containing the answer of the problem exact to 6 decimals.
if no such answer is possible print ""IMPOSSIBLE"" without the quotes.

CONSTRAINTS

0.0 ≤ p ≤ 1.0

1 ≤ n ≤ 1000

1 ≤ d ≤ D ≤ 10000

1 ≤ L ≤ 10000

SAMPLE INPUT
5 3 10
0.5 0.4 0.6 0.8 1.0
2 3 5 6 8

SAMPLE OUTPUT
0.320000

Explanation

The best jump will be to jump from start to 2nd stone(with p=0.4), them to 4th stone(with p=0.8), then to 5th stone(with p=1.0) and finally to the end of the puddle.
"
20623,"Given 2n balls of k distinct colors. You will be given an integer array balls of size k where balls[i] is the number of balls of color i. 
All the balls will be shuffled uniformly at random, then we will distribute the first n balls to the first box and the remaining n balls to the other box (Please read the explanation of the second example carefully).
Please note that the two boxes are considered different. For example, if we have two balls of colors a and b, and two boxes [] and (), then the distribution [a] (b) is considered different than the distribution [b] (a) (Please read the explanation of the first example carefully).
We want to calculate the probability that the two boxes have the same number of distinct balls.
 
Example 1:
Input: balls = [1,1]
Output: 1.00000
Explanation: Only 2 ways to divide the balls equally:
- A ball of color 1 to box 1 and a ball of color 2 to box 2
- A ball of color 2 to box 1 and a ball of color 1 to box 2
In both ways, the number of distinct colors in each box is equal. The probability is 2/2 = 1

Example 2:
Input: balls = [2,1,1]
Output: 0.66667
Explanation: We have the set of balls [1, 1, 2, 3]
This set of balls will be shuffled randomly and we may have one of the 12 distinct shuffles with equale probability (i.e. 1/12):
[1,1 / 2,3], [1,1 / 3,2], [1,2 / 1,3], [1,2 / 3,1], [1,3 / 1,2], [1,3 / 2,1], [2,1 / 1,3], [2,1 / 3,1], [2,3 / 1,1], [3,1 / 1,2], [3,1 / 2,1], [3,2 / 1,1]
After that we add the first two balls to the first box and the second two balls to the second box.
We can see that 8 of these 12 possible random distributions have the same number of distinct colors of balls in each box.
Probability is 8/12 = 0.66667

Example 3:
Input: balls = [1,2,1,2]
Output: 0.60000
Explanation: The set of balls is [1, 2, 2, 3, 4, 4]. It is hard to display all the 180 possible random shuffles of this set but it is easy to check that 108 of them will have the same number of distinct colors in each box.
Probability = 108 / 180 = 0.6

Example 4:
Input: balls = [3,2,1]
Output: 0.30000
Explanation: The set of balls is [1, 1, 1, 2, 2, 3]. It is hard to display all the 60 possible random shuffles of this set but it is easy to check that 18 of them will have the same number of distinct colors in each box.
Probability = 18 / 60 = 0.3

Example 5:
Input: balls = [6,6,6,6,6,6]
Output: 0.90327

 
Constraints:

1 <= balls.length <= 8
1 <= balls[i] <= 6
sum(balls) is even.
Answers within 10^-5 of the actual value will be accepted as correct.
class Solution:
    def getProbability(self, balls: List[int]) -> float:
        "
22107,"This time, there will be no unnecessary information in the problem statement.

Given an array(A) of N integers, find the probability that sum of any selected triplet is a cube of an integer number.

A triplet is a set of any three indices. Two triplets with same indices but in different order are considered same (Ex: triplets with indices {2,4,5} and {2,5,4} are same).

Cube of a number x is x * x * x.

Input:

First line has an integer T=number of test cases.
Each test case has two lines.
First line of test case has an integer N=numbers in the array.
Second line of test case has an array of N integers.

Output:

Print answer for each test case in a separate lines with exactly 9 decimal digits.  

Constraints:

1 ≤ T ≤ 40
3 ≤ N ≤ 500
1 ≤ Ai ≤ 2000  

SAMPLE INPUT
2
4
2 3 4 6
4
1 1 6 25

SAMPLE OUTPUT
0.000000000
0.500000000

Explanation

Case #1 : No triplet sum could be cube of an integer.

Case #2 : We can form 4 triplets.

Indices        Values       Sum  
{1,2,3}        {1,1, 6}    1+1+6 = 8  
{1,2,4}        {1,1,25}    1+1+25 = 27  
{1,3,4}        {1,6,25}    1+6+25 = 32
{2,3,4}        {1,6,25}    1+6+25 = 32

Out of 4 resulting sums, 2 are cube of a number and therefore probability is 2/4.
"
25192,"There are two types of soup: type A and type B. Initially we have N ml of each type of soup. There are four kinds of operations:

Serve 100 ml of soup A and 0 ml of soup B
Serve 75 ml of soup A and 25 ml of soup B
Serve 50 ml of soup A and 50 ml of soup B
Serve 25 ml of soup A and 75 ml of soup B

When we serve some soup, we give it to someone and we no longer have it.  Each turn, we will choose from the four operations with equal probability 0.25. If the remaining volume of soup is not enough to complete the operation, we will serve as much as we can.  We stop once we no longer have some quantity of both types of soup.
Note that we do not have the operation where all 100 ml's of soup B are used first.  
Return the probability that soup A will be empty first, plus half the probability that A and B become empty at the same time.
 
Example:
Input: N = 50
Output: 0.625
Explanation: 
If we choose the first two operations, A will become empty first. For the third operation, A and B will become empty at the same time. For the fourth operation, B will become empty first. So the total probability of A becoming empty first plus half the probability that A and B become empty at the same time, is 0.25 * (1 + 1 + 0.5 + 0) = 0.625.


Notes: 

0 <= N <= 10^9. 
Answers within 10^-6 of the true value will be accepted as correct.
class Solution:
    def soupServings(self, N: int) -> float:
        "
